/*
******************************************************************************
**
** @file        : LinkerScript.ld
**
** @author      : Auto-generated by STM32CubeIDE
**
** @brief       : Linker script for STM32F767IGTx Device from STM32F7 series
**                      1024Kbytes FLASH
**                      512Kbytes RAM
**
**                Set heap size, stack size and stack location according
**                to application requirements.
**
**                Set memory bank area and size if external memory is used
**
**  Target      : STMicroelectronics STM32
**
**  Distribution: The file is distributed as is, without any warranty
**                of any kind.
**
******************************************************************************
** @attention
**
** Copyright (c) 2022 STMicroelectronics.
** All rights reserved.
**
** This software is licensed under terms that can be found in the LICENSE file
** in the root directory of this software component.
** If no LICENSE file comes with this software, it is provided AS-IS.
**
******************************************************************************
*/

/* Entry Point */
ENTRY(ResetISR)

/* Memories definition */
MEMORY
{
  ITCM_TABLE  (xrw) : ORIGIN = 0x00000000,   LENGTH = 0x00000400
  ITCM_RAM     (xrw) : ORIGIN = 0x00000400,   LENGTH = 0x00003C00
  ITCM_VTABLE  (rx)  : ORIGIN = 0x00200000,   LENGTH = 0x00000400 /*Device with 1MB*/
  ITCM_FLASH   (rx)  : ORIGIN = 0x00200400,   LENGTH = 0x00FFC000 /*Device with 1MB*/
  AXIM_VTABLE  (rx)  : ORIGIN = 0x08000000,   LENGTH = 0x00000400
  AXIM_FLASH   (rx)  : ORIGIN = 0x08000400,   LENGTH = 0x00FFC000
  OPTION_BYTES (r)   : ORIGIN = 0x1FFF0000,   LENGTH = 0x00000020
  DTCM_RAM     (rw)  : ORIGIN = 0x20000000,   LENGTH = 0x00020000
  SRAM_DATA    (rw)  : ORIGIN = 0x20020000,   LENGTH = 0x00040000
  SRAM_HEAP    (rw)  : ORIGIN = 0x20060000,   LENGTH = 0x00010000
  SRAM_STACK   (rw)  : ORIGIN = 0x20070000,   LENGTH = 0x0000C000
  SRAM_CODE    (xrw) : ORIGIN = 0x2007C000,   LENGTH = 0x00004000
  MEMORY_B1    (rx)  : ORIGIN = 0x60000000,   LENGTH = 0x00000000
  SDRAM        (rw)  : ORIGIN = 0xD0000000,   LENGTH = 0x00800000
}

/* Sections */
SECTIONS
{
	/* The startup code into "FLASH" Rom type memory */
  
  
    PROVIDE (_intvecs_base_address = 0x08000000);
	.intvecs (_intvecs_base_address) : AT (_intvecs_base_address) {  
    	KEEP(*(.intvecs)) /* Startup code */
	} > AXIM_VTABLE

    PROVIDE (_vtable_base_address = 0x00000000);
    .vtable (_vtable_base_address) : AT (_vtable_base_address) {
        KEEP (*(.vtable))
    } > ITCM_TABLE
    

	/* The program code and other data into "FLASH" Rom type memory */

    .text : {
        CREATE_OBJECT_SYMBOLS
        . = ALIGN(4);
        *(.text)
        *(.text.*)
	    *(.glue_7)         /* glue arm to thumb code */
	    *(.glue_7t)        /* glue thumb to arm code */
	    *(.eh_frame)
        . = ALIGN(0x4);
        KEEP (*(.ctors))
        . = ALIGN(0x4);
        KEEP (*(.dtors))
        __etext = .;
        _etext = __etext;
        etext = __etext;
    } > AXIM_FLASH    

  	.init :
  	{
    	. = ALIGN(4);
    	PROVIDE_HIDDEN (__init_start = .);
        KEEP (*(.init))
    	PROVIDE_HIDDEN (__init_end = .);
    	. = ALIGN(4);
  	} >AXIM_FLASH

  	.finit :
  	{
    	. = ALIGN(4);
    	PROVIDE_HIDDEN (__finit_start = .);
        KEEP (*(.fini*))
    	PROVIDE_HIDDEN (__finit_end = .);
    	. = ALIGN(4);
  	} >AXIM_FLASH

    .ARM.extab : {
    	. = ALIGN(4);
        *(.ARM.extab* .gnu.linkonce.armextab.*)
    	. = ALIGN(4);
    } > AXIM_FLASH

    .ARM.exidx : {
    	. = ALIGN(4);
        __exidx_start = .;
        *(.ARM.exidx* .gnu.linkonce.armexidx.*)
        __exidx_end = .;
    	. = ALIGN(4);
    } > AXIM_FLASH
    
	.preinit_array     :
	{
    	. = ALIGN(4);
    	PROVIDE_HIDDEN (__preinit_array_start = .);
    	KEEP (*(.preinit_array*))
    	PROVIDE_HIDDEN (__preinit_array_end = .);
    	. = ALIGN(4);
  	} >AXIM_FLASH

  	.init_array :
  	{
    	. = ALIGN(4);
    	PROVIDE_HIDDEN (__init_array_start = .);
    	KEEP (*(SORT(.init_array.*)))
    	KEEP (*(.init_array*))
    	PROVIDE_HIDDEN (__init_array_end = .);
    	. = ALIGN(4);
  	} >AXIM_FLASH

  	.fini_array :
  	{
    	. = ALIGN(4);
    	PROVIDE_HIDDEN (__fini_array_start = .);
    	KEEP (*(SORT(.fini_array.*)))
    	KEEP (*(.fini_array*))
    	PROVIDE_HIDDEN (__fini_array_end = .);
    	. = ALIGN(4);
  	} >AXIM_FLASH
    
    __itcmramcode_load__ = LOADADDR (.itcmramcode);
    .itcmramcode : {
        . = ALIGN(4);
        __itcmramcode_start__ = .;
        *(.itcmRamFunc)        /* .itcmRamFunc sections */
        *(.itcmRamFunc*)       /* .itcmRamFunc* sections */
        *(.itcmramcode)
        *(.itcmramcode*)
        . = ALIGN (4);
        __itcmramcode_end__ = .;
    } > ITCM_RAM AT> AXIM_FLASH
    
    __ramcode_load__ = LOADADDR (.ramcode);
    .ramcode : {
        . = ALIGN(4);
        __ramcode_start__ = .;
        *(.RamFunc)        /* .RamFunc sections */
        *(.RamFunc*)       /* .RamFunc* sections */
        *(.ramcode)
        *(.ramcode*)
        . = ALIGN (4);
        __ramcode_end__ = .;
    } > SRAM_CODE AT> AXIM_FLASH
  

  /* Constant data into "FLASH" Rom type memory */
	.rodata :
	{
   		. = ALIGN(4);
    	*(.rodata)         /* .rodata sections (constants, strings, etc.) */
    	*(.rodata*)        /* .rodata* sections (constants, strings, etc.) */
    	. = ALIGN(4);
	} >AXIM_FLASH


  /* Used by the startup to initialize data */

  /* Initialized data sections into "RAM" Ram type memory */
  	_sidata  = LOADADDR(.data);
  	__data_load__ = _sidata ;
	.data :
	{
    	. = ALIGN(4);    
    	__data_start__ = .;        /* create a global symbol at data start */
    	_sdata = __data_start__;        /* create a global symbol at data start */
    	*(.data)           /* .data sections */
    	*(.data*)          /* .data* sections */
    	. = ALIGN(4);
    	_edata = .;
    	__data_end__ = _edata;
	} >SRAM_DATA AT> AXIM_FLASH

  /* Uninitialized data section into "RAM" Ram type memory */
	. = ALIGN(4);
	.bss :
	{
    	/* This is used by the startup in order to initialize the .bss section */
   		_sbss = .;         /* define a global symbol at bss start */
    	__bss_start__ = _sbss;         /* define a global symbol at bss start */
        *(.shbss)
    	*(.bss)
    	*(.bss*)
    	*(COMMON)
    	. = ALIGN(4);
    	_ebss = .;         /* define a global symbol at bss end */
    	__bss_end__ = _ebss;
    } >SRAM_DATA

  /* User_heap_stack section, used to check that there is enough "RAM" Ram  type memory left */
  
_Min_Heap_Size = __heap_end__ - __heap_start__; /* required amount of heap */
  .heap :
  {
    . = ALIGN(8);
    __heap_start__ = .;
    end = __heap_start__;
    _end = end;
    __end = end;
    KEEP(*(.heap))
    . = ALIGN(8);
  } >SRAM_HEAP
  
__heap_end__ = ORIGIN(SRAM_HEAP) + LENGTH(SRAM_HEAP); /* end of "RAM" Ram type memory */
__HeapLimit = __heap_end__;

_Min_Stack_Size = __stack_end__ - _stack; /* required amount of stack */
    
    .stack : ALIGN(0x8) {
        _stack = .;
        __stack = .;
        KEEP(*(.stack))
    } > SRAM_STACK


_estack = ORIGIN(SRAM_STACK) + LENGTH(SRAM_STACK); /* end of "RAM" Ram type memory */
__stack_end__ = _estack;

  /* Remove information from the compiler libraries */
  /DISCARD/ :
  {
    libc.a ( * )
    libm.a ( * )
    libgcc.a ( * )
  }

  .ARM.attributes 0 : { *(.ARM.attributes) }
}
