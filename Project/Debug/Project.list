
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvecs      00000208  08000000  08000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .vtable       00000400  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00005f38  08000400  08000400  00020400  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .init         0000000c  08006338  08006338  00026338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .finit        00000010  08006344  08006344  00026344  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .ARM.extab    00000000  08006354  08006354  00040484  2**0
                  CONTENTS
  6 .ARM.exidx    00000008  08006354  08006354  00026354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  0800635c  0800635c  00040484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   00000004  0800635c  0800635c  0002635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000000  08006360  08006360  00040484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .itcmramcode  00000000  00000400  00000400  00040484  2**0
                  CONTENTS
 11 .ramcode      00001000  2007c000  08006360  0002c000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .rodata       00000c24  08007360  08007360  00037360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .data         00000484  20020000  08007f84  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000538  20020488  08008408  00040488  2**3
                  ALLOC
 15 .heap         00000000  20060000  20060000  00040484  2**0
                  CONTENTS
 16 .ARM.attributes 0000002e  00000000  00000000  00040484  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004264b  00000000  00000000  000404b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000d863  00000000  00000000  00082afd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00001ff0  00000000  00000000  00090360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002920  00000000  00000000  00092350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  000657de  00000000  00000000  00094c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0014d073  00000000  00000000  000fa44e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00213679  00000000  00000000  002474c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0045ab3a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000055fc  00000000  00000000  0045ab8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_loc    000231fd  00000000  00000000  00460188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000400 <__do_global_dtors_aux>:
 8000400:	b510      	push	{r4, lr}
 8000402:	4c05      	ldr	r4, [pc, #20]	; (8000418 <__do_global_dtors_aux+0x18>)
 8000404:	7823      	ldrb	r3, [r4, #0]
 8000406:	b933      	cbnz	r3, 8000416 <__do_global_dtors_aux+0x16>
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <__do_global_dtors_aux+0x1c>)
 800040a:	b113      	cbz	r3, 8000412 <__do_global_dtors_aux+0x12>
 800040c:	4804      	ldr	r0, [pc, #16]	; (8000420 <__do_global_dtors_aux+0x20>)
 800040e:	f3af 8000 	nop.w
 8000412:	2301      	movs	r3, #1
 8000414:	7023      	strb	r3, [r4, #0]
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20020488 	.word	0x20020488
 800041c:	00000000 	.word	0x00000000
 8000420:	08006338 	.word	0x08006338

08000424 <frame_dummy>:
 8000424:	b508      	push	{r3, lr}
 8000426:	4b03      	ldr	r3, [pc, #12]	; (8000434 <frame_dummy+0x10>)
 8000428:	b11b      	cbz	r3, 8000432 <frame_dummy+0xe>
 800042a:	4903      	ldr	r1, [pc, #12]	; (8000438 <frame_dummy+0x14>)
 800042c:	4803      	ldr	r0, [pc, #12]	; (800043c <frame_dummy+0x18>)
 800042e:	f3af 8000 	nop.w
 8000432:	bd08      	pop	{r3, pc}
 8000434:	00000000 	.word	0x00000000
 8000438:	2002048c 	.word	0x2002048c
 800043c:	08006338 	.word	0x08006338

08000440 <MCU__enDisableGlobalInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enDisableGlobalInterrupt
 	.type MCU__enDisableGlobalInterrupt, %function
MCU__enDisableGlobalInterrupt:
	mrs     r0, PRIMASK
 8000440:	f3ef 8010 	mrs	r0, PRIMASK
	cpsid   i
 8000444:	b672      	cpsid	i
	dsb
 8000446:	f3bf 8f4f 	dsb	sy
	isb
 800044a:	f3bf 8f6f 	isb	sy
	bx      lr
 800044e:	4770      	bx	lr

08000450 <MCU__enEnableGlobalInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enEnableGlobalInterrupt
 	.type MCU__enEnableGlobalInterrupt, %function
MCU__enEnableGlobalInterrupt:
	mrs     r0, PRIMASK
 8000450:	f3ef 8010 	mrs	r0, PRIMASK
	cpsie   i
 8000454:	b662      	cpsie	i
	dsb
 8000456:	f3bf 8f4f 	dsb	sy
	isb
 800045a:	f3bf 8f6f 	isb	sy
	bx      lr
 800045e:	4770      	bx	lr

08000460 <MCU__vSetGlobalInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__vSetGlobalInterrupt
 	.type MCU__vSetGlobalInterrupt, %function
MCU__vSetGlobalInterrupt:
	msr     PRIMASK, r0
 8000460:	f380 8810 	msr	PRIMASK, r0
	dsb
 8000464:	f3bf 8f4f 	dsb	sy
	isb
 8000468:	f3bf 8f6f 	isb	sy
	bx      lr
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <MCU__enSetGlobalInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enSetGlobalInterrupt
 	.type MCU__enSetGlobalInterrupt, %function
MCU__enSetGlobalInterrupt:
	push    {r1,r2}
 8000470:	b406      	push	{r1, r2}
	mrs     r1, PRIMASK
 8000472:	f3ef 8110 	mrs	r1, PRIMASK
	msr     PRIMASK, r0
 8000476:	f380 8810 	msr	PRIMASK, r0
	dsb
 800047a:	f3bf 8f4f 	dsb	sy
	isb
 800047e:	f3bf 8f6f 	isb	sy
	mov     r0, r1
 8000482:	4608      	mov	r0, r1
	pop     {r1,r2}
 8000484:	bc06      	pop	{r1, r2}
	bx      lr
 8000486:	4770      	bx	lr
 8000488:	f3af 8000 	nop.w
 800048c:	f3af 8000 	nop.w

08000490 <MCU__enGetGlobalInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enGetGlobalInterrupt
 	.type MCU__enGetGlobalInterrupt, %function
MCU__enGetGlobalInterrupt:
	mrs     r0, PRIMASK
 8000490:	f3ef 8010 	mrs	r0, PRIMASK
	bx      lr
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	f3af 8000 	nop.w
 800049c:	f3af 8000 	nop.w

080004a0 <MCU__vSetBasePriorityInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__vSetBasePriorityInterrupt
 	.type MCU__vSetBasePriorityInterrupt, %function
MCU__vSetBasePriorityInterrupt:
	push    {r1,r2}
 80004a0:	b406      	push	{r1, r2}
	and     r1, r0, #0x7
 80004a2:	f000 0107 	and.w	r1, r0, #7
	lsl     r1, #0x5
 80004a6:	ea4f 1141 	mov.w	r1, r1, lsl #5
	msr     BASEPRI, r1
 80004aa:	f381 8811 	msr	BASEPRI, r1
	dsb
 80004ae:	f3bf 8f4f 	dsb	sy
	isb
 80004b2:	f3bf 8f6f 	isb	sy
	pop     {r1,r2}
 80004b6:	bc06      	pop	{r1, r2}
	bx      lr
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	f3af 8000 	nop.w

080004c0 <MCU__enSetBasePriorityInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enSetBasePriorityInterrupt
 	.type MCU__enSetBasePriorityInterrupt, %function
MCU__enSetBasePriorityInterrupt:
	push    {r1,r2}
 80004c0:	b406      	push	{r1, r2}
	and     r1, r0, #0x7
 80004c2:	f000 0107 	and.w	r1, r0, #7
	lsl     r1, #0x5
 80004c6:	ea4f 1141 	mov.w	r1, r1, lsl #5
	mrs     r2, BASEPRI
 80004ca:	f3ef 8211 	mrs	r2, BASEPRI
	ubfx    r0, r2, #5, #3
 80004ce:	f3c2 1042 	ubfx	r0, r2, #5, #3
	msr     BASEPRI, r1
 80004d2:	f381 8811 	msr	BASEPRI, r1
	dsb
 80004d6:	f3bf 8f4f 	dsb	sy
	isb
 80004da:	f3bf 8f6f 	isb	sy
	pop     {r1,r2}
 80004de:	bc06      	pop	{r1, r2}
	bx      lr
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	f3af 8000 	nop.w
 80004e8:	f3af 8000 	nop.w
 80004ec:	f3af 8000 	nop.w

080004f0 <MCU__enGetBasePriorityInterrupt>:
 	.align 	4
    .thumb_func
	.global MCU__enGetBasePriorityInterrupt
 	.type MCU__enGetBasePriorityInterrupt, %function
MCU__enGetBasePriorityInterrupt:
	push    {r1,r2}
 80004f0:	b406      	push	{r1, r2}
	mrs     r1, BASEPRI
 80004f2:	f3ef 8111 	mrs	r1, BASEPRI
	lsr     r0, r1, #0x5
 80004f6:	ea4f 1051 	mov.w	r0, r1, lsr #5
	and     r0, #0x7
 80004fa:	f000 0007 	and.w	r0, r0, #7
	pop     {r1,r2}
 80004fe:	bc06      	pop	{r1, r2}
	bx      lr
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	f3af 8000 	nop.w
 8000508:	f3af 8000 	nop.w
 800050c:	f3af 8000 	nop.w

08000510 <MCU__enDisableGlobalFault>:
 	.align 	4
    .thumb_func
	.global MCU__enDisableGlobalFault
 	.type MCU__enDisableGlobalFault, %function
MCU__enDisableGlobalFault:
	mrs     r0, FAULTMASK
 8000510:	f3ef 8013 	mrs	r0, FAULTMASK
	cpsid   f
 8000514:	b671      	cpsid	f
	dsb
 8000516:	f3bf 8f4f 	dsb	sy
	isb
 800051a:	f3bf 8f6f 	isb	sy
	bx      lr
 800051e:	4770      	bx	lr

08000520 <MCU__enEnableGlobalFault>:
 	.align 	4
    .thumb_func
	.global MCU__enEnableGlobalFault
 	.type MCU__enEnableGlobalFault, %function
MCU__enEnableGlobalFault:
	mrs     r0, FAULTMASK
 8000520:	f3ef 8013 	mrs	r0, FAULTMASK
	cpsie   f
 8000524:	b661      	cpsie	f
	dsb
 8000526:	f3bf 8f4f 	dsb	sy
	isb
 800052a:	f3bf 8f6f 	isb	sy
	bx      lr
 800052e:	4770      	bx	lr

08000530 <MCU__enSetGlobalFault>:
 	.align 	4
    .thumb_func
	.global MCU__enSetGlobalFault
 	.type MCU__enSetGlobalFault, %function
MCU__enSetGlobalFault:
	push    {r1,r2}
 8000530:	b406      	push	{r1, r2}
	mrs     r1, FAULTMASK
 8000532:	f3ef 8113 	mrs	r1, FAULTMASK
	msr     FAULTMASK, r0
 8000536:	f380 8813 	msr	FAULTMASK, r0
	dsb
 800053a:	f3bf 8f4f 	dsb	sy
	isb
 800053e:	f3bf 8f6f 	isb	sy
	mov     r0, r1
 8000542:	4608      	mov	r0, r1
	pop     {r1,r2}
 8000544:	bc06      	pop	{r1, r2}
	bx      lr
 8000546:	4770      	bx	lr
 8000548:	f3af 8000 	nop.w
 800054c:	f3af 8000 	nop.w

08000550 <MCU__enGetGlobalFault>:
 	.align 	4
    .thumb_func
	.global MCU__enGetGlobalFault
 	.type MCU__enGetGlobalFault, %function
MCU__enGetGlobalFault:
	mrs     r0, FAULTMASK
 8000550:	f3ef 8013 	mrs	r0, FAULTMASK
	bx      lr
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
	...

08000560 <BusFault__vIRQVectorHandler>:
 	.align 	4
	.global BusFault__vIRQVectorHandler
 	.type BusFault__vIRQVectorHandler, %function
    .thumb_func
BusFault__vIRQVectorHandler:
    PUSH {R4-R7}
 8000560:	b4f0      	push	{r4, r5, r6, r7}
    ubfx    R4, LR, #2, #1
 8000562:	f3ce 0480 	ubfx	r4, lr, #2, #1
    cmp    R4, #0
 8000566:	2c00      	cmp	r4, #0
    beq    MainStackBus
 8000568:	d000      	beq.n	800056c <MainStackBus>
    b    ProcessStackBus
 800056a:	e013      	b.n	8000594 <ProcessStackBus>

0800056c <MainStackBus>:

    .global SCB_BusFault_puxContext
MainStackBus:
    mrs    R4, MSP
 800056c:	f3ef 8408 	mrs	r4, MSP
    ldr R6, = SCB_BusFault_puxContext
 8000570:	4e19      	ldr	r6, [pc, #100]	; (80005d8 <ProcessBus+0x1e>)
    ldr R5, [R4, #0X10]
 8000572:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 8000574:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x14]
 8000576:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 8000578:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x18]
 800057a:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 800057c:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0x1C]
 800057e:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 8000580:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x20]
 8000582:	6a25      	ldr	r5, [r4, #32]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 8000584:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x24]
 8000586:	6a65      	ldr	r5, [r4, #36]	; 0x24
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 8000588:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x28]
 800058a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 800058c:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x2C]
 800058e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 8000590:	61f5      	str	r5, [r6, #28]
    b    ProcessBus
 8000592:	e012      	b.n	80005ba <ProcessBus>

08000594 <ProcessStackBus>:

ProcessStackBus:
    mrs    R4, PSP
 8000594:	f3ef 8409 	mrs	r4, PSP
    ldr R6, = SCB_BusFault_puxContext
 8000598:	4e0f      	ldr	r6, [pc, #60]	; (80005d8 <ProcessBus+0x1e>)
    ldr R5, [R4, #0X0]
 800059a:	6825      	ldr	r5, [r4, #0]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 800059c:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x4]
 800059e:	6865      	ldr	r5, [r4, #4]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 80005a0:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x8]
 80005a2:	68a5      	ldr	r5, [r4, #8]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 80005a4:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0xC]
 80005a6:	68e5      	ldr	r5, [r4, #12]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 80005a8:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x10]
 80005aa:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 80005ac:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x14]
 80005ae:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 80005b0:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x18]
 80005b2:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 80005b4:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x1C]
 80005b6:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 80005b8:	61f5      	str	r5, [r6, #28]

080005ba <ProcessBus>:

ProcessBus:
    pop {R4-R7}
 80005ba:	bcf0      	pop	{r4, r5, r6, r7}
    push {R0,R1,R2,LR}
 80005bc:	b507      	push	{r0, r1, r2, lr}
    .global BusFault__vSendValues
    .global BusFault__vIRQVectorHandlerCustom
    .global BusFault__vSendValues
    ldr R2, = BusFault__vSendValues
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <ProcessBus+0x22>)
    blx R2
 80005c0:	4790      	blx	r2
    movw R0, #0xE000
 80005c2:	f24e 0000 	movw	r0, #57344	; 0xe000
    movt R0, #0xE000
 80005c6:	f2ce 0000 	movt	r0, #57344	; 0xe000
    ldr R1, = SCB_BusFault_puxContext
 80005ca:	4903      	ldr	r1, [pc, #12]	; (80005d8 <ProcessBus+0x1e>)
    ldr R2, = BusFault__vIRQVectorHandlerCustom
 80005cc:	4a04      	ldr	r2, [pc, #16]	; (80005e0 <ProcessBus+0x26>)
    blx R2
 80005ce:	4790      	blx	r2
    pop {R0,R1,R2,LR}
 80005d0:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
    BX LR
 80005d4:	4770      	bx	lr
 80005d6:	0000      	.short	0x0000
    ldr R6, = SCB_BusFault_puxContext
 80005d8:	200208b0 	.word	0x200208b0
    ldr R2, = BusFault__vSendValues
 80005dc:	08001d49 	.word	0x08001d49
    ldr R2, = BusFault__vIRQVectorHandlerCustom
 80005e0:	08001dd1 	.word	0x08001dd1
	...

080005f0 <HardFault__vIRQVectorHandler>:
	.global HardFault__vIRQVectorHandler
 	.type HardFault__vIRQVectorHandler, %function
    .thumb_func
HardFault__vIRQVectorHandler:

    PUSH {R4-R7}
 80005f0:	b4f0      	push	{r4, r5, r6, r7}
    ubfx    R4, LR, #2, #1
 80005f2:	f3ce 0480 	ubfx	r4, lr, #2, #1
    cmp    R4, #0
 80005f6:	2c00      	cmp	r4, #0
    beq    MainStackHard
 80005f8:	d000      	beq.n	80005fc <MainStackHard>
    b    ProcessStackHard
 80005fa:	e013      	b.n	8000624 <ProcessStackHard>

080005fc <MainStackHard>:

    .global SCB_HardFault_puxContext
MainStackHard:
    mrs    R4, MSP
 80005fc:	f3ef 8408 	mrs	r4, MSP
    ldr R6, = SCB_HardFault_puxContext
 8000600:	4e19      	ldr	r6, [pc, #100]	; (8000668 <ProcessHard+0x1e>)
    ldr R5, [R4, #0X10]
 8000602:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 8000604:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x14]
 8000606:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 8000608:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x18]
 800060a:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 800060c:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0x1C]
 800060e:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 8000610:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x20]
 8000612:	6a25      	ldr	r5, [r4, #32]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 8000614:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x24]
 8000616:	6a65      	ldr	r5, [r4, #36]	; 0x24
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 8000618:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x28]
 800061a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 800061c:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x2C]
 800061e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 8000620:	61f5      	str	r5, [r6, #28]
    b    ProcessHard
 8000622:	e012      	b.n	800064a <ProcessHard>

08000624 <ProcessStackHard>:

ProcessStackHard:
    mrs    R4, PSP
 8000624:	f3ef 8409 	mrs	r4, PSP
    ldr R6, = SCB_HardFault_puxContext
 8000628:	4e0f      	ldr	r6, [pc, #60]	; (8000668 <ProcessHard+0x1e>)
    ldr R5, [R4, #0X0]
 800062a:	6825      	ldr	r5, [r4, #0]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 800062c:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x4]
 800062e:	6865      	ldr	r5, [r4, #4]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 8000630:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x8]
 8000632:	68a5      	ldr	r5, [r4, #8]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 8000634:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0xC]
 8000636:	68e5      	ldr	r5, [r4, #12]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 8000638:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x10]
 800063a:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 800063c:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x14]
 800063e:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 8000640:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x18]
 8000642:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 8000644:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x1C]
 8000646:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 8000648:	61f5      	str	r5, [r6, #28]

0800064a <ProcessHard>:

ProcessHard:
    pop {R4-R7}
 800064a:	bcf0      	pop	{r4, r5, r6, r7}
    push {R0,R1,R2,LR}
 800064c:	b507      	push	{r0, r1, r2, lr}
    .global HardFault__vSendValues
    .global HardFault__vIRQVectorHandlerCustom
    ldr R2, = HardFault__vSendValues
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <ProcessHard+0x22>)
    blx R2
 8000650:	4790      	blx	r2
    movw R0, #0xE000
 8000652:	f24e 0000 	movw	r0, #57344	; 0xe000
    movt R0, #0xE000
 8000656:	f2ce 0000 	movt	r0, #57344	; 0xe000
    ldr R1, = SCB_HardFault_puxContext
 800065a:	4903      	ldr	r1, [pc, #12]	; (8000668 <ProcessHard+0x1e>)
    ldr R2, = HardFault__vIRQVectorHandlerCustom
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <ProcessHard+0x26>)
    blx R2
 800065e:	4790      	blx	r2
    pop {R0,R1,R2,LR}
 8000660:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
    BX LR
 8000664:	4770      	bx	lr
 8000666:	0000      	.short	0x0000
    ldr R6, = SCB_HardFault_puxContext
 8000668:	200208f0 	.word	0x200208f0
    ldr R2, = HardFault__vSendValues
 800066c:	08001f89 	.word	0x08001f89
    ldr R2, = HardFault__vIRQVectorHandlerCustom
 8000670:	08002011 	.word	0x08002011
	...

08000680 <MemoryFault__vIRQVectorHandler>:
	.global MemoryFault__vIRQVectorHandler
 	.type MemoryFault__vIRQVectorHandler, %function
    .thumb_func
MemoryFault__vIRQVectorHandler:

    PUSH {R4-R7}
 8000680:	b4f0      	push	{r4, r5, r6, r7}
    ubfx    R4, LR, #2, #1
 8000682:	f3ce 0480 	ubfx	r4, lr, #2, #1
    cmp    R4, #0
 8000686:	2c00      	cmp	r4, #0
    beq    MainStackMemory
 8000688:	d000      	beq.n	800068c <MainStackMemory>
    b    ProcessStackMemory
 800068a:	e013      	b.n	80006b4 <ProcessStackMemory>

0800068c <MainStackMemory>:

    .global SCB_MemoryFault_puxContext
MainStackMemory:
    mrs    R4, MSP
 800068c:	f3ef 8408 	mrs	r4, MSP
    ldr R6, = SCB_MemoryFault_puxContext
 8000690:	4e19      	ldr	r6, [pc, #100]	; (80006f8 <ProcessMemory+0x1e>)
    ldr R5, [R4, #0X10]
 8000692:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 8000694:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x14]
 8000696:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 8000698:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x18]
 800069a:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 800069c:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0x1C]
 800069e:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 80006a0:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x20]
 80006a2:	6a25      	ldr	r5, [r4, #32]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 80006a4:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x24]
 80006a6:	6a65      	ldr	r5, [r4, #36]	; 0x24
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 80006a8:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x28]
 80006aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 80006ac:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x2C]
 80006ae:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 80006b0:	61f5      	str	r5, [r6, #28]
    b    ProcessMemory
 80006b2:	e012      	b.n	80006da <ProcessMemory>

080006b4 <ProcessStackMemory>:

ProcessStackMemory:
    mrs    R4, PSP
 80006b4:	f3ef 8409 	mrs	r4, PSP
    ldr R6, = SCB_MemoryFault_puxContext
 80006b8:	4e0f      	ldr	r6, [pc, #60]	; (80006f8 <ProcessMemory+0x1e>)
    ldr R5, [R4, #0X0]
 80006ba:	6825      	ldr	r5, [r4, #0]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 80006bc:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x4]
 80006be:	6865      	ldr	r5, [r4, #4]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 80006c0:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x8]
 80006c2:	68a5      	ldr	r5, [r4, #8]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 80006c4:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0xC]
 80006c6:	68e5      	ldr	r5, [r4, #12]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 80006c8:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x10]
 80006ca:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 80006cc:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x14]
 80006ce:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 80006d0:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x18]
 80006d2:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 80006d4:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x1C]
 80006d6:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 80006d8:	61f5      	str	r5, [r6, #28]

080006da <ProcessMemory>:

ProcessMemory:
    pop {R4-R7}
 80006da:	bcf0      	pop	{r4, r5, r6, r7}
    push {R0,R1,R2,LR}
 80006dc:	b507      	push	{r0, r1, r2, lr}
    .global MemoryFault__vSendValues
    .global MemoryFault__vIRQVectorHandlerCustom
    ldr R2, = MemoryFault__vSendValues
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <ProcessMemory+0x22>)
    blx R2
 80006e0:	4790      	blx	r2
    movw R0, #0xE000
 80006e2:	f24e 0000 	movw	r0, #57344	; 0xe000
    movt R0, #0xE000
 80006e6:	f2ce 0000 	movt	r0, #57344	; 0xe000
    ldr R1, = SCB_MemoryFault_puxContext
 80006ea:	4903      	ldr	r1, [pc, #12]	; (80006f8 <ProcessMemory+0x1e>)
    ldr R2, = MemoryFault__vIRQVectorHandlerCustom
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <ProcessMemory+0x26>)
    blx R2
 80006ee:	4790      	blx	r2
    pop {R0,R1,R2,LR}
 80006f0:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
    BX LR
 80006f4:	4770      	bx	lr
 80006f6:	0000      	.short	0x0000
    ldr R6, = SCB_MemoryFault_puxContext
 80006f8:	20020930 	.word	0x20020930
    ldr R2, = MemoryFault__vSendValues
 80006fc:	080020ed 	.word	0x080020ed
    ldr R2, = MemoryFault__vIRQVectorHandlerCustom
 8000700:	08002175 	.word	0x08002175
	...

08000710 <SVCall__vIRQVectorHandler>:
 	.align 	4
	.global SVCall__vIRQVectorHandler
 	.type SVCall__vIRQVectorHandler, %function
    .thumb_func
SVCall__vIRQVectorHandler:
    push 	{R0,R1,R2,LR}
 8000710:	b507      	push	{r0, r1, r2, lr}
    ubfx    r0, LR, #2, #1
 8000712:	f3ce 0080 	ubfx	r0, lr, #2, #1
    cmp     r0, #0
 8000716:	2800      	cmp	r0, #0
    beq     MainStack
 8000718:	d000      	beq.n	800071c <MainStack>
    b    	ProcessStack
 800071a:	e003      	b.n	8000724 <ProcessStack>

0800071c <MainStack>:

MainStack:
    mrs		r0, MSP
 800071c:	f3ef 8008 	mrs	r0, MSP
    ldr		r1, [r0,#0x28]
 8000720:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b		Process
 8000722:	e002      	b.n	800072a <Process>

08000724 <ProcessStack>:

ProcessStack:
    mrs		r0, PSP
 8000724:	f3ef 8009 	mrs	r0, PSP
    ldr		r1, [r0,#0x18]
 8000728:	6981      	ldr	r1, [r0, #24]

0800072a <Process>:

Process:
    sub		r1, #2
 800072a:	f1a1 0102 	sub.w	r1, r1, #2
    ldrb	r0, [r1]
 800072e:	7808      	ldrb	r0, [r1, #0]
    and		r0, #0xFF
 8000730:	f000 00ff 	and.w	r0, r0, #255	; 0xff
    mov 	R1, R0
 8000734:	4601      	mov	r1, r0
    .global SCB_SVCall__pvfGetIRQSourceHandler
    movw 	R0, #0X0
 8000736:	f240 0000 	movw	r0, #0
    movt 	R0, #0x0
 800073a:	f2c0 0000 	movt	r0, #0
    ldr 	R2, = SCB_SVCall__pvfGetIRQSourceHandler
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <Process+0x2a>)
    blx 	R2
 8000740:	4790      	blx	r2
    mov 	R2, R0
 8000742:	4602      	mov	r2, r0
    movw 	R0, #0xE000
 8000744:	f24e 0000 	movw	r0, #57344	; 0xe000
    movt 	R0, #0xE000
 8000748:	f2ce 0000 	movt	r0, #57344	; 0xe000
    blx 	R2
 800074c:	4790      	blx	r2
    pop 	{R0,R1,R2,LR}
 800074e:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
    BX 		LR
 8000752:	4770      	bx	lr
    ldr 	R2, = SCB_SVCall__pvfGetIRQSourceHandler
 8000754:	08001add 	.word	0x08001add
	...

08000760 <UsageFault__vIRQVectorHandler>:
	.global UsageFault__vIRQVectorHandler
 	.type UsageFault__vIRQVectorHandler, %function
    .thumb_func
UsageFault__vIRQVectorHandler:

    PUSH {R4-R7}
 8000760:	b4f0      	push	{r4, r5, r6, r7}
    ubfx    R4, LR, #2, #1
 8000762:	f3ce 0480 	ubfx	r4, lr, #2, #1
    cmp    R4, #0
 8000766:	2c00      	cmp	r4, #0
    beq    MainStackUsage
 8000768:	d000      	beq.n	800076c <MainStackUsage>
    b    ProcessStackUsage
 800076a:	e013      	b.n	8000794 <ProcessStackUsage>

0800076c <MainStackUsage>:

    .global SCB_UsageFault_puxContext
MainStackUsage:
    mrs    R4, MSP
 800076c:	f3ef 8408 	mrs	r4, MSP
    ldr R6, = SCB_UsageFault_puxContext
 8000770:	4e19      	ldr	r6, [pc, #100]	; (80007d8 <ProcessUsage+0x1e>)
    ldr R5, [R4, #0X10]
 8000772:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 8000774:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x14]
 8000776:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 8000778:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x18]
 800077a:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 800077c:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0x1C]
 800077e:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 8000780:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x20]
 8000782:	6a25      	ldr	r5, [r4, #32]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 8000784:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x24]
 8000786:	6a65      	ldr	r5, [r4, #36]	; 0x24
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 8000788:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x28]
 800078a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 800078c:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x2C]
 800078e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 8000790:	61f5      	str	r5, [r6, #28]
    b    ProcessUsage
 8000792:	e012      	b.n	80007ba <ProcessUsage>

08000794 <ProcessStackUsage>:

ProcessStackUsage:
    mrs    R4, PSP
 8000794:	f3ef 8409 	mrs	r4, PSP
    ldr R6, = SCB_UsageFault_puxContext
 8000798:	4e0f      	ldr	r6, [pc, #60]	; (80007d8 <ProcessUsage+0x1e>)
    ldr R5, [R4, #0X0]
 800079a:	6825      	ldr	r5, [r4, #0]
    str R5, [R6, #0x0]    /*SCB_BusFault_puxContext[0] R4*/
 800079c:	6035      	str	r5, [r6, #0]
    ldr R5, [R4, #0x4]
 800079e:	6865      	ldr	r5, [r4, #4]
    str R5, [R6, #0x4]    /*SCB_BusFault_puxContext[1] R5*/
 80007a0:	6075      	str	r5, [r6, #4]
    ldr R5, [R4, #0x8]
 80007a2:	68a5      	ldr	r5, [r4, #8]
    str R5, [R6, #0x8]    /*SCB_BusFault_puxContext[2] R6*/
 80007a4:	60b5      	str	r5, [r6, #8]
    ldr R5, [R4, #0xC]
 80007a6:	68e5      	ldr	r5, [r4, #12]
    str R5, [R6, #0xC]    /*SCB_BusFault_puxContext[3] R3*/
 80007a8:	60f5      	str	r5, [r6, #12]
    ldr R5, [R4, #0x10]
 80007aa:	6925      	ldr	r5, [r4, #16]
    str R5, [R6, #0x10]    /*SCB_BusFault_puxContext[4] R52*/
 80007ac:	6135      	str	r5, [r6, #16]
    ldr R5, [R4, #0x14]
 80007ae:	6965      	ldr	r5, [r4, #20]
    str R5, [R6, #0x14]    /*SCB_BusFault_puxContext[5] LR*/
 80007b0:	6175      	str	r5, [r6, #20]
    ldr R5, [R4, #0x18]
 80007b2:	69a5      	ldr	r5, [r4, #24]
    str R5, [R6, #0x18]    /*SCB_BusFault_puxContext[6] PC*/
 80007b4:	61b5      	str	r5, [r6, #24]
    ldr R5, [R4, #0x1C]
 80007b6:	69e5      	ldr	r5, [r4, #28]
    str R5, [R6, #0x1C]    /*SCB_BusFault_puxContext[7] PSR*/
 80007b8:	61f5      	str	r5, [r6, #28]

080007ba <ProcessUsage>:

ProcessUsage:
    pop {R4-R7}
 80007ba:	bcf0      	pop	{r4, r5, r6, r7}
    push {R0,R1,R2,LR}
 80007bc:	b507      	push	{r0, r1, r2, lr}
    .global UsageFault__vSendValues
    .global UsageFault__vIRQVectorHandlerCustom
    ldr R2, = UsageFault__vSendValues
 80007be:	4a07      	ldr	r2, [pc, #28]	; (80007dc <ProcessUsage+0x22>)
    blx R2
 80007c0:	4790      	blx	r2
    movw R0, #0xE000
 80007c2:	f24e 0000 	movw	r0, #57344	; 0xe000
    movt R0, #0xE000
 80007c6:	f2ce 0000 	movt	r0, #57344	; 0xe000
    ldr R1, = SCB_UsageFault_puxContext
 80007ca:	4903      	ldr	r1, [pc, #12]	; (80007d8 <ProcessUsage+0x1e>)
    ldr R2, = UsageFault__vIRQVectorHandlerCustom
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <ProcessUsage+0x26>)
    blx R2
 80007ce:	4790      	blx	r2
    pop {R0,R1,R2,LR}
 80007d0:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}
    BX LR
 80007d4:	4770      	bx	lr
 80007d6:	0000      	.short	0x0000
    ldr R6, = SCB_UsageFault_puxContext
 80007d8:	20020970 	.word	0x20020970
    ldr R2, = UsageFault__vSendValues
 80007dc:	080022e9 	.word	0x080022e9
    ldr R2, = UsageFault__vIRQVectorHandlerCustom
 80007e0:	08002371 	.word	0x08002371
	...

080007f0 <MCU__uxSetFPUStatusControl>:
 	.align 	4
    .thumb_func
	.global MCU__uxSetFPUStatusControl
 	.type MCU__uxSetFPUStatusControl, %function
MCU__uxSetFPUStatusControl:
	push    {r1,r2}
 80007f0:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 80007f2:	eef1 1a10 	vmrs	r1, fpscr
	vmsr    FPSCR, r0
 80007f6:	eee1 0a10 	vmsr	fpscr, r0
	mov     r0, r1
 80007fa:	4608      	mov	r0, r1
	pop     {r1,r2}
 80007fc:	bc06      	pop	{r1, r2}
	bx      lr
 80007fe:	4770      	bx	lr

08000800 <MCU__vSetFPUStatusControl>:
 	.align 	4
    .thumb_func
	.global MCU__vSetFPUStatusControl
 	.type MCU__vSetFPUStatusControl, %function
MCU__vSetFPUStatusControl:
	vmsr    FPSCR, r0
 8000800:	eee1 0a10 	vmsr	fpscr, r0
	bx      lr
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	f3af 8000 	nop.w
 800080c:	f3af 8000 	nop.w

08000810 <MCU__uxGetFPUStatusControl>:
 	.align 	4
    .thumb_func
	.global MCU__uxGetFPUStatusControl
 	.type MCU__uxGetFPUStatusControl, %function
MCU__uxGetFPUStatusControl:
	vmrs    r0, FPSCR
 8000810:	eef1 0a10 	vmrs	r0, fpscr
	bx      lr
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	f3af 8000 	nop.w
 800081c:	f3af 8000 	nop.w

08000820 <MCU__uxSetFPUStatusControlMask>:
 	.align 	4
    .thumb_func
	.global MCU__uxSetFPUStatusControlMask
 	.type MCU__uxSetFPUStatusControlMask, %function
MCU__uxSetFPUStatusControlMask:
	push    {r1,r2}
 8000820:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000822:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, r1
 8000826:	460a      	mov	r2, r1
	orr     r1, r0
 8000828:	ea41 0100 	orr.w	r1, r1, r0
	vmsr    FPSCR, r1
 800082c:	eee1 1a10 	vmsr	fpscr, r1
	mov     r0, r2
 8000830:	4610      	mov	r0, r2
	pop     {r1,r2}
 8000832:	bc06      	pop	{r1, r2}
	bx      lr
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	f3af 8000 	nop.w
 800083c:	f3af 8000 	nop.w

08000840 <MCU__uxClearFPUStatusControlMask>:
 	.align 	4
    .thumb_func
	.global MCU__uxClearFPUStatusControlMask
 	.type MCU__uxClearFPUStatusControlMask, %function
MCU__uxClearFPUStatusControlMask:
	push    {r1,r2}
 8000840:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000842:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, r1
 8000846:	460a      	mov	r2, r1
	bic     r1, r0
 8000848:	ea21 0100 	bic.w	r1, r1, r0
	vmsr    FPSCR, r1
 800084c:	eee1 1a10 	vmsr	fpscr, r1
	mov     r0, r2
 8000850:	4610      	mov	r0, r2
	pop     {r1,r2}
 8000852:	bc06      	pop	{r1, r2}
	bx      lr
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	f3af 8000 	nop.w
 800085c:	f3af 8000 	nop.w

08000860 <MCU__vSetFPUStatusControlMask>:
 	.align 	4
    .thumb_func
	.global MCU__vSetFPUStatusControlMask
 	.type MCU__vSetFPUStatusControlMask, %function
MCU__vSetFPUStatusControlMask:
	push    {r1,r2}
 8000860:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000862:	eef1 1a10 	vmrs	r1, fpscr
	orr     r1, r0
 8000866:	ea41 0100 	orr.w	r1, r1, r0
	vmsr    FPSCR, r1
 800086a:	eee1 1a10 	vmsr	fpscr, r1
	pop     {r1,r2}
 800086e:	bc06      	pop	{r1, r2}
	bx      lr
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	f3af 8000 	nop.w
 8000878:	f3af 8000 	nop.w
 800087c:	f3af 8000 	nop.w

08000880 <MCU__vClearFPUStatusControlMask>:
 	.align 	4
    .thumb_func
	.global MCU__vClearFPUStatusControlMask
 	.type MCU__vClearFPUStatusControlMask, %function
MCU__vClearFPUStatusControlMask:
	push    {r1,r2}
 8000880:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000882:	eef1 1a10 	vmrs	r1, fpscr
	bic     r1, r0
 8000886:	ea21 0100 	bic.w	r1, r1, r0
	vmsr    FPSCR, r1
 800088a:	eee1 1a10 	vmsr	fpscr, r1
	pop     {r1,r2}
 800088e:	bc06      	pop	{r1, r2}
	bx      lr
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	f3af 8000 	nop.w
 8000898:	f3af 8000 	nop.w
 800089c:	f3af 8000 	nop.w

080008a0 <MCU__uxGetFPUStatusControlMask>:
 	.align 	4
    .thumb_func
	.global MCU__uxGetFPUStatusControlMask
 	.type MCU__uxGetFPUStatusControlMask, %function
MCU__uxGetFPUStatusControlMask:
	push    {r1,r2}
 80008a0:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 80008a2:	eef1 1a10 	vmrs	r1, fpscr
	and     r1, r0
 80008a6:	ea01 0100 	and.w	r1, r1, r0
	mov     r0, r1
 80008aa:	4608      	mov	r0, r1
	pop     {r1,r2}
 80008ac:	bc06      	pop	{r1, r2}
	bx      lr
 80008ae:	4770      	bx	lr

080008b0 <MCU__uxSetFPUStatusControlBit>:
 	.align 	4
    .thumb_func
	.global MCU__uxSetFPUStatusControlBit
 	.type MCU__uxSetFPUStatusControlBit, %function
MCU__uxSetFPUStatusControlBit:
	push    {r1-r4}
 80008b0:	b41e      	push	{r1, r2, r3, r4}
	vmrs    r1, FPSCR
 80008b2:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, r1
 80008b6:	460a      	mov	r2, r1
	lsr     r2, r0
 80008b8:	fa22 f200 	lsr.w	r2, r2, r0
	and     r2, #1
 80008bc:	f002 0201 	and.w	r2, r2, #1
	mov     r3, #1
 80008c0:	f04f 0301 	mov.w	r3, #1
	lsl     r3, r0
 80008c4:	fa03 f300 	lsl.w	r3, r3, r0
	orr     r1, r3
 80008c8:	ea41 0103 	orr.w	r1, r1, r3
	vmsr    FPSCR, r1
 80008cc:	eee1 1a10 	vmsr	fpscr, r1
	mov     r0, r2
 80008d0:	4610      	mov	r0, r2
	pop     {r1-r4}
 80008d2:	bc1e      	pop	{r1, r2, r3, r4}
	bx      lr
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	f3af 8000 	nop.w
 80008dc:	f3af 8000 	nop.w

080008e0 <MCU__uxClearFPUStatusControlBit>:
 	.align 	4
    .thumb_func
	.global MCU__uxClearFPUStatusControlBit
 	.type MCU__uxClearFPUStatusControlBit, %function
MCU__uxClearFPUStatusControlBit:
	push    {r1-r4}
 80008e0:	b41e      	push	{r1, r2, r3, r4}
	vmrs    r1, FPSCR
 80008e2:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, r1
 80008e6:	460a      	mov	r2, r1
	lsr     r2, r0
 80008e8:	fa22 f200 	lsr.w	r2, r2, r0
	and     r2, #1
 80008ec:	f002 0201 	and.w	r2, r2, #1
	mov     r3, #1
 80008f0:	f04f 0301 	mov.w	r3, #1
	lsl     r3, r0
 80008f4:	fa03 f300 	lsl.w	r3, r3, r0
	bic     r1, r3
 80008f8:	ea21 0103 	bic.w	r1, r1, r3
	vmsr    FPSCR, r1
 80008fc:	eee1 1a10 	vmsr	fpscr, r1
	mov     r0, r2
 8000900:	4610      	mov	r0, r2
	pop     {r1-r4}
 8000902:	bc1e      	pop	{r1, r2, r3, r4}
	bx      lr
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	f3af 8000 	nop.w
 800090c:	f3af 8000 	nop.w

08000910 <MCU__vSetFPUStatusControlBit>:
 	.align 	4
    .thumb_func
	.global MCU__vSetFPUStatusControlBit
 	.type MCU__vSetFPUStatusControlBit, %function
MCU__vSetFPUStatusControlBit:
	push    {r1,r2}
 8000910:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000912:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, #1
 8000916:	f04f 0201 	mov.w	r2, #1
	lsl     r2, r0
 800091a:	fa02 f200 	lsl.w	r2, r2, r0
	orr     r1, r2
 800091e:	ea41 0102 	orr.w	r1, r1, r2
	vmsr    FPSCR, r1
 8000922:	eee1 1a10 	vmsr	fpscr, r1
	pop     {r1,r2}
 8000926:	bc06      	pop	{r1, r2}
	bx      lr
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	f3af 8000 	nop.w

08000930 <MCU__vClearFPUStatusControlBit>:
 	.align 	4
    .thumb_func
	.global MCU__vClearFPUStatusControlBit
 	.type MCU__vClearFPUStatusControlBit, %function
MCU__vClearFPUStatusControlBit:
	push    {r1,r2}
 8000930:	b406      	push	{r1, r2}
	vmrs    r1, FPSCR
 8000932:	eef1 1a10 	vmrs	r1, fpscr
	mov     r2, #1
 8000936:	f04f 0201 	mov.w	r2, #1
	lsl     r2, r0
 800093a:	fa02 f200 	lsl.w	r2, r2, r0
	bic     r1, r2
 800093e:	ea21 0102 	bic.w	r1, r1, r2
	vmsr    FPSCR, r1
 8000942:	eee1 1a10 	vmsr	fpscr, r1
	pop     {r1,r2}
 8000946:	bc06      	pop	{r1, r2}
	bx      lr
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	f3af 8000 	nop.w

08000950 <MCU__uxGetFPUStatusControlBit>:
 	.align 	4
    .thumb_func
	.global MCU__uxGetFPUStatusControlBit
 	.type MCU__uxGetFPUStatusControlBit, %function
MCU__uxGetFPUStatusControlBit:
	vmrs    r1, FPSCR
 8000950:	eef1 1a10 	vmrs	r1, fpscr
	lsr     r1, r0
 8000954:	fa21 f100 	lsr.w	r1, r1, r0
	mov     r0, r1
 8000958:	4608      	mov	r0, r1
	bx      lr
 800095a:	4770      	bx	lr
 800095c:	0000      	movs	r0, r0
	...

08000960 <MCU__vSetFPUContextActive>:
 	.align 	4
	.global MCU__vSetFPUContextActive
 	.type MCU__vSetFPUContextActive, %function
    .thumb_func
MCU__vSetFPUContextActive:
	push    {r1,r2}
 8000960:	b406      	push	{r1, r2}
	mrs     r1, CONTROL
 8000962:	f3ef 8114 	mrs	r1, CONTROL
	ubfx    r2, r1, #2, #1
 8000966:	f3c1 0280 	ubfx	r2, r1, #2, #1
	bfi     r1, r0, #2, #1
 800096a:	f360 0182 	bfi	r1, r0, #2, #1
	msr     CONTROL, r1
 800096e:	f381 8814 	msr	CONTROL, r1
	dsb
 8000972:	f3bf 8f4f 	dsb	sy
	isb
 8000976:	f3bf 8f6f 	isb	sy
	pop     {r1,r2}
 800097a:	bc06      	pop	{r1, r2}
	bx      lr
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <MCU__enSetFPUContextActive>:
 	.align 	4
    .thumb_func
	.global MCU__enSetFPUContextActive
 	.type MCU__enSetFPUContextActive, %function
MCU__enSetFPUContextActive:
	push    {r1,r2}
 8000980:	b406      	push	{r1, r2}
	mrs     r1, CONTROL
 8000982:	f3ef 8114 	mrs	r1, CONTROL
	ubfx    r2, r1, #2, #1
 8000986:	f3c1 0280 	ubfx	r2, r1, #2, #1
	bfi     r1, r0, #2, #1
 800098a:	f360 0182 	bfi	r1, r0, #2, #1
	msr     CONTROL, r1
 800098e:	f381 8814 	msr	CONTROL, r1
	dsb
 8000992:	f3bf 8f4f 	dsb	sy
	isb
 8000996:	f3bf 8f6f 	isb	sy
	mov     r0, r2
 800099a:	4610      	mov	r0, r2
	pop     {r1,r2}
 800099c:	bc06      	pop	{r1, r2}
	bx      lr
 800099e:	4770      	bx	lr

080009a0 <MCU__enGetFPUContextActive>:
 	.align 	4
    .thumb_func
	.global MCU__enGetFPUContextActive
 	.type MCU__enGetFPUContextActive, %function
MCU__enGetFPUContextActive:
	push    {r1,r2}
 80009a0:	b406      	push	{r1, r2}
	mrs     r1, CONTROL
 80009a2:	f3ef 8114 	mrs	r1, CONTROL
	ubfx    r0, r1, #2, #1
 80009a6:	f3c1 0080 	ubfx	r0, r1, #2, #1
	pop     {r1,r2}
 80009aa:	bc06      	pop	{r1, r2}
	bx      lr
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <MCU__enSetStackActive>:
 	.align 	4
    .thumb_func
	.global MCU__enSetStackActive
 	.type MCU__enSetStackActive, %function
MCU__enSetStackActive:
	push    {r1,r2}
 80009b0:	b406      	push	{r1, r2}
    mrs     r1, CONTROL
 80009b2:	f3ef 8114 	mrs	r1, CONTROL
    ubfx    r2, r1, #1, #1
 80009b6:	f3c1 0240 	ubfx	r2, r1, #1, #1
    bfi     r1, r0, #1, #1
 80009ba:	f360 0141 	bfi	r1, r0, #1, #1
    msr     CONTROL, r1
 80009be:	f381 8814 	msr	CONTROL, r1
    dsb
 80009c2:	f3bf 8f4f 	dsb	sy
    isb
 80009c6:	f3bf 8f6f 	isb	sy
    mov     r0, r2
 80009ca:	4610      	mov	r0, r2
	pop     {r1,r2}
 80009cc:	bc06      	pop	{r1, r2}
    bx      lr
 80009ce:	4770      	bx	lr

080009d0 <MCU__enGetStackActive>:
 	.align 	4
    .thumb_func
	.global MCU__enGetStackActive
 	.type MCU__enGetStackActive, %function
MCU__enGetStackActive:
	push    {r1,r2}
 80009d0:	b406      	push	{r1, r2}
    mrs     r1, CONTROL
 80009d2:	f3ef 8114 	mrs	r1, CONTROL
    ubfx    r0, r1, #1, #1
 80009d6:	f3c1 0040 	ubfx	r0, r1, #1, #1
	pop     {r1,r2}
 80009da:	bc06      	pop	{r1, r2}
    bx      lr
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <MCU__vSetPSPValue>:
 	.align 	4
    .thumb_func
	.global MCU__vSetPSPValue
 	.type MCU__vSetPSPValue, %function
MCU__vSetPSPValue:
	msr PSP, r0
 80009e0:	f380 8809 	msr	PSP, r0
	dsb
 80009e4:	f3bf 8f4f 	dsb	sy
	isb
 80009e8:	f3bf 8f6f 	isb	sy
	bx      lr
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <MCU__uxGetPSPValue>:
 	.align 	4
    .thumb_func
	.global MCU__uxGetPSPValue
 	.type MCU__uxGetPSPValue, %function
MCU__uxGetPSPValue:
	mrs     r0, PSP
 80009f0:	f3ef 8009 	mrs	r0, PSP
	bx      lr
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	f3af 8000 	nop.w
 80009fc:	f3af 8000 	nop.w

08000a00 <MCU__vSetMSPValue>:
 	.align 	4
    .thumb_func
	.global MCU__vSetMSPValue
 	.type MCU__vSetMSPValue, %function
MCU__vSetMSPValue:
	msr     MSP, r0
 8000a00:	f380 8808 	msr	MSP, r0
	dsb
 8000a04:	f3bf 8f4f 	dsb	sy
	isb
 8000a08:	f3bf 8f6f 	isb	sy
	bx      lr
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <MCU__uxGetMSPValue>:
 	.align 	4
    .thumb_func
	.global MCU__uxGetMSPValue
 	.type MCU__uxGetMSPValue, %function
MCU__uxGetMSPValue:
	mrs     r0, MSP
 8000a10:	f3ef 8008 	mrs	r0, MSP
    bx      lr
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	f3af 8000 	nop.w
 8000a1c:	f3af 8000 	nop.w

08000a20 <MCU__enSetThreadLevel>:
 	.align 	4
    .thumb_func
	.global MCU__enSetThreadLevel
 	.type MCU__enSetThreadLevel, %function
MCU__enSetThreadLevel:
	push    {r1,r2}
 8000a20:	b406      	push	{r1, r2}
	mrs     r1, CONTROL
 8000a22:	f3ef 8114 	mrs	r1, CONTROL
  	ubfx    r2, r1, #0, #1
 8000a26:	f3c1 0200 	ubfx	r2, r1, #0, #1
  	bfi     r1, r0, #0, #1
 8000a2a:	f360 0100 	bfi	r1, r0, #0, #1
  	msr     CONTROL, r1
 8000a2e:	f381 8814 	msr	CONTROL, r1
  	dsb
 8000a32:	f3bf 8f4f 	dsb	sy
  	isb
 8000a36:	f3bf 8f6f 	isb	sy
  	mov     r0, r2
 8000a3a:	4610      	mov	r0, r2
	pop     {r1,r2}
 8000a3c:	bc06      	pop	{r1, r2}
  	bx      lr
 8000a3e:	4770      	bx	lr

08000a40 <MCU__enGetThreadLevel>:
 	.align 	4
    .thumb_func
	.global MCU__enGetThreadLevel
 	.type MCU__enGetThreadLevel, %function
MCU__enGetThreadLevel:
	push    {r1,r2}
 8000a40:	b406      	push	{r1, r2}
	mrs     r1, CONTROL
 8000a42:	f3ef 8114 	mrs	r1, CONTROL
	ubfx    r0, r1, #0, #1
 8000a46:	f3c1 0000 	ubfx	r0, r1, #0, #1
	pop     {r1,r2}
 8000a4a:	bc06      	pop	{r1, r2}
	bx      lr
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_drsub>:
 8000a50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000a54:	e002      	b.n	8000a5c <__adddf3>
 8000a56:	bf00      	nop

08000a58 <__aeabi_dsub>:
 8000a58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000a5c <__adddf3>:
 8000a5c:	b530      	push	{r4, r5, lr}
 8000a5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000a62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000a66:	ea94 0f05 	teq	r4, r5
 8000a6a:	bf08      	it	eq
 8000a6c:	ea90 0f02 	teqeq	r0, r2
 8000a70:	bf1f      	itttt	ne
 8000a72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000a76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000a7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000a7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a82:	f000 80e2 	beq.w	8000c4a <__adddf3+0x1ee>
 8000a86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000a8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000a8e:	bfb8      	it	lt
 8000a90:	426d      	neglt	r5, r5
 8000a92:	dd0c      	ble.n	8000aae <__adddf3+0x52>
 8000a94:	442c      	add	r4, r5
 8000a96:	ea80 0202 	eor.w	r2, r0, r2
 8000a9a:	ea81 0303 	eor.w	r3, r1, r3
 8000a9e:	ea82 0000 	eor.w	r0, r2, r0
 8000aa2:	ea83 0101 	eor.w	r1, r3, r1
 8000aa6:	ea80 0202 	eor.w	r2, r0, r2
 8000aaa:	ea81 0303 	eor.w	r3, r1, r3
 8000aae:	2d36      	cmp	r5, #54	; 0x36
 8000ab0:	bf88      	it	hi
 8000ab2:	bd30      	pophi	{r4, r5, pc}
 8000ab4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000abc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000ac0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000ac4:	d002      	beq.n	8000acc <__adddf3+0x70>
 8000ac6:	4240      	negs	r0, r0
 8000ac8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000acc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000ad0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ad4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000ad8:	d002      	beq.n	8000ae0 <__adddf3+0x84>
 8000ada:	4252      	negs	r2, r2
 8000adc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae0:	ea94 0f05 	teq	r4, r5
 8000ae4:	f000 80a7 	beq.w	8000c36 <__adddf3+0x1da>
 8000ae8:	f1a4 0401 	sub.w	r4, r4, #1
 8000aec:	f1d5 0e20 	rsbs	lr, r5, #32
 8000af0:	db0d      	blt.n	8000b0e <__adddf3+0xb2>
 8000af2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000af6:	fa22 f205 	lsr.w	r2, r2, r5
 8000afa:	1880      	adds	r0, r0, r2
 8000afc:	f141 0100 	adc.w	r1, r1, #0
 8000b00:	fa03 f20e 	lsl.w	r2, r3, lr
 8000b04:	1880      	adds	r0, r0, r2
 8000b06:	fa43 f305 	asr.w	r3, r3, r5
 8000b0a:	4159      	adcs	r1, r3
 8000b0c:	e00e      	b.n	8000b2c <__adddf3+0xd0>
 8000b0e:	f1a5 0520 	sub.w	r5, r5, #32
 8000b12:	f10e 0e20 	add.w	lr, lr, #32
 8000b16:	2a01      	cmp	r2, #1
 8000b18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000b1c:	bf28      	it	cs
 8000b1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000b22:	fa43 f305 	asr.w	r3, r3, r5
 8000b26:	18c0      	adds	r0, r0, r3
 8000b28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000b2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000b30:	d507      	bpl.n	8000b42 <__adddf3+0xe6>
 8000b32:	f04f 0e00 	mov.w	lr, #0
 8000b36:	f1dc 0c00 	rsbs	ip, ip, #0
 8000b3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000b3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000b42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000b46:	d31b      	bcc.n	8000b80 <__adddf3+0x124>
 8000b48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000b4c:	d30c      	bcc.n	8000b68 <__adddf3+0x10c>
 8000b4e:	0849      	lsrs	r1, r1, #1
 8000b50:	ea5f 0030 	movs.w	r0, r0, rrx
 8000b54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000b58:	f104 0401 	add.w	r4, r4, #1
 8000b5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000b60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000b64:	f080 809a 	bcs.w	8000c9c <__adddf3+0x240>
 8000b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b72:	f150 0000 	adcs.w	r0, r0, #0
 8000b76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b7a:	ea41 0105 	orr.w	r1, r1, r5
 8000b7e:	bd30      	pop	{r4, r5, pc}
 8000b80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000b84:	4140      	adcs	r0, r0
 8000b86:	eb41 0101 	adc.w	r1, r1, r1
 8000b8a:	3c01      	subs	r4, #1
 8000b8c:	bf28      	it	cs
 8000b8e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000b92:	d2e9      	bcs.n	8000b68 <__adddf3+0x10c>
 8000b94:	f091 0f00 	teq	r1, #0
 8000b98:	bf04      	itt	eq
 8000b9a:	4601      	moveq	r1, r0
 8000b9c:	2000      	moveq	r0, #0
 8000b9e:	fab1 f381 	clz	r3, r1
 8000ba2:	bf08      	it	eq
 8000ba4:	3320      	addeq	r3, #32
 8000ba6:	f1a3 030b 	sub.w	r3, r3, #11
 8000baa:	f1b3 0220 	subs.w	r2, r3, #32
 8000bae:	da0c      	bge.n	8000bca <__adddf3+0x16e>
 8000bb0:	320c      	adds	r2, #12
 8000bb2:	dd08      	ble.n	8000bc6 <__adddf3+0x16a>
 8000bb4:	f102 0c14 	add.w	ip, r2, #20
 8000bb8:	f1c2 020c 	rsb	r2, r2, #12
 8000bbc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000bc0:	fa21 f102 	lsr.w	r1, r1, r2
 8000bc4:	e00c      	b.n	8000be0 <__adddf3+0x184>
 8000bc6:	f102 0214 	add.w	r2, r2, #20
 8000bca:	bfd8      	it	le
 8000bcc:	f1c2 0c20 	rsble	ip, r2, #32
 8000bd0:	fa01 f102 	lsl.w	r1, r1, r2
 8000bd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd8:	bfdc      	itt	le
 8000bda:	ea41 010c 	orrle.w	r1, r1, ip
 8000bde:	4090      	lslle	r0, r2
 8000be0:	1ae4      	subs	r4, r4, r3
 8000be2:	bfa2      	ittt	ge
 8000be4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000be8:	4329      	orrge	r1, r5
 8000bea:	bd30      	popge	{r4, r5, pc}
 8000bec:	ea6f 0404 	mvn.w	r4, r4
 8000bf0:	3c1f      	subs	r4, #31
 8000bf2:	da1c      	bge.n	8000c2e <__adddf3+0x1d2>
 8000bf4:	340c      	adds	r4, #12
 8000bf6:	dc0e      	bgt.n	8000c16 <__adddf3+0x1ba>
 8000bf8:	f104 0414 	add.w	r4, r4, #20
 8000bfc:	f1c4 0220 	rsb	r2, r4, #32
 8000c00:	fa20 f004 	lsr.w	r0, r0, r4
 8000c04:	fa01 f302 	lsl.w	r3, r1, r2
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	fa21 f304 	lsr.w	r3, r1, r4
 8000c10:	ea45 0103 	orr.w	r1, r5, r3
 8000c14:	bd30      	pop	{r4, r5, pc}
 8000c16:	f1c4 040c 	rsb	r4, r4, #12
 8000c1a:	f1c4 0220 	rsb	r2, r4, #32
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	fa01 f304 	lsl.w	r3, r1, r4
 8000c26:	ea40 0003 	orr.w	r0, r0, r3
 8000c2a:	4629      	mov	r1, r5
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	fa21 f004 	lsr.w	r0, r1, r4
 8000c32:	4629      	mov	r1, r5
 8000c34:	bd30      	pop	{r4, r5, pc}
 8000c36:	f094 0f00 	teq	r4, #0
 8000c3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000c3e:	bf06      	itte	eq
 8000c40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000c44:	3401      	addeq	r4, #1
 8000c46:	3d01      	subne	r5, #1
 8000c48:	e74e      	b.n	8000ae8 <__adddf3+0x8c>
 8000c4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c4e:	bf18      	it	ne
 8000c50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000c54:	d029      	beq.n	8000caa <__adddf3+0x24e>
 8000c56:	ea94 0f05 	teq	r4, r5
 8000c5a:	bf08      	it	eq
 8000c5c:	ea90 0f02 	teqeq	r0, r2
 8000c60:	d005      	beq.n	8000c6e <__adddf3+0x212>
 8000c62:	ea54 0c00 	orrs.w	ip, r4, r0
 8000c66:	bf04      	itt	eq
 8000c68:	4619      	moveq	r1, r3
 8000c6a:	4610      	moveq	r0, r2
 8000c6c:	bd30      	pop	{r4, r5, pc}
 8000c6e:	ea91 0f03 	teq	r1, r3
 8000c72:	bf1e      	ittt	ne
 8000c74:	2100      	movne	r1, #0
 8000c76:	2000      	movne	r0, #0
 8000c78:	bd30      	popne	{r4, r5, pc}
 8000c7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000c7e:	d105      	bne.n	8000c8c <__adddf3+0x230>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	4149      	adcs	r1, r1
 8000c84:	bf28      	it	cs
 8000c86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000c8a:	bd30      	pop	{r4, r5, pc}
 8000c8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000c90:	bf3c      	itt	cc
 8000c92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000c96:	bd30      	popcc	{r4, r5, pc}
 8000c98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000c9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000ca4:	f04f 0000 	mov.w	r0, #0
 8000ca8:	bd30      	pop	{r4, r5, pc}
 8000caa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000cae:	bf1a      	itte	ne
 8000cb0:	4619      	movne	r1, r3
 8000cb2:	4610      	movne	r0, r2
 8000cb4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000cb8:	bf1c      	itt	ne
 8000cba:	460b      	movne	r3, r1
 8000cbc:	4602      	movne	r2, r0
 8000cbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cc2:	bf06      	itte	eq
 8000cc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000cc8:	ea91 0f03 	teqeq	r1, r3
 8000ccc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000cd0:	bd30      	pop	{r4, r5, pc}
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_ui2d>:
 8000cd4:	f090 0f00 	teq	r0, #0
 8000cd8:	bf04      	itt	eq
 8000cda:	2100      	moveq	r1, #0
 8000cdc:	4770      	bxeq	lr
 8000cde:	b530      	push	{r4, r5, lr}
 8000ce0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000ce4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000ce8:	f04f 0500 	mov.w	r5, #0
 8000cec:	f04f 0100 	mov.w	r1, #0
 8000cf0:	e750      	b.n	8000b94 <__adddf3+0x138>
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_i2d>:
 8000cf4:	f090 0f00 	teq	r0, #0
 8000cf8:	bf04      	itt	eq
 8000cfa:	2100      	moveq	r1, #0
 8000cfc:	4770      	bxeq	lr
 8000cfe:	b530      	push	{r4, r5, lr}
 8000d00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000d0c:	bf48      	it	mi
 8000d0e:	4240      	negmi	r0, r0
 8000d10:	f04f 0100 	mov.w	r1, #0
 8000d14:	e73e      	b.n	8000b94 <__adddf3+0x138>
 8000d16:	bf00      	nop

08000d18 <__aeabi_f2d>:
 8000d18:	0042      	lsls	r2, r0, #1
 8000d1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000d1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000d26:	bf1f      	itttt	ne
 8000d28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000d2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000d30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000d34:	4770      	bxne	lr
 8000d36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000d3a:	bf08      	it	eq
 8000d3c:	4770      	bxeq	lr
 8000d3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000d42:	bf04      	itt	eq
 8000d44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000d48:	4770      	bxeq	lr
 8000d4a:	b530      	push	{r4, r5, lr}
 8000d4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000d50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000d54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000d58:	e71c      	b.n	8000b94 <__adddf3+0x138>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_ul2d>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	b530      	push	{r4, r5, lr}
 8000d66:	f04f 0500 	mov.w	r5, #0
 8000d6a:	e00a      	b.n	8000d82 <__aeabi_l2d+0x16>

08000d6c <__aeabi_l2d>:
 8000d6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	b530      	push	{r4, r5, lr}
 8000d76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000d7a:	d502      	bpl.n	8000d82 <__aeabi_l2d+0x16>
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000d86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000d8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000d8e:	f43f aed8 	beq.w	8000b42 <__adddf3+0xe6>
 8000d92:	f04f 0203 	mov.w	r2, #3
 8000d96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000d9a:	bf18      	it	ne
 8000d9c:	3203      	addne	r2, #3
 8000d9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000da2:	bf18      	it	ne
 8000da4:	3203      	addne	r2, #3
 8000da6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000daa:	f1c2 0320 	rsb	r3, r2, #32
 8000dae:	fa00 fc03 	lsl.w	ip, r0, r3
 8000db2:	fa20 f002 	lsr.w	r0, r0, r2
 8000db6:	fa01 fe03 	lsl.w	lr, r1, r3
 8000dba:	ea40 000e 	orr.w	r0, r0, lr
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	4414      	add	r4, r2
 8000dc4:	e6bd      	b.n	8000b42 <__adddf3+0xe6>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_ldivmod>:
 8000dc8:	b97b      	cbnz	r3, 8000dea <__aeabi_ldivmod+0x22>
 8000dca:	b972      	cbnz	r2, 8000dea <__aeabi_ldivmod+0x22>
 8000dcc:	2900      	cmp	r1, #0
 8000dce:	bfbe      	ittt	lt
 8000dd0:	2000      	movlt	r0, #0
 8000dd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dd6:	e006      	blt.n	8000de6 <__aeabi_ldivmod+0x1e>
 8000dd8:	bf08      	it	eq
 8000dda:	2800      	cmpeq	r0, #0
 8000ddc:	bf1c      	itt	ne
 8000dde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000de2:	f04f 30ff 	movne.w	r0, #4294967295
 8000de6:	f000 b9f7 	b.w	80011d8 <__aeabi_idiv0>
 8000dea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000df2:	2900      	cmp	r1, #0
 8000df4:	db09      	blt.n	8000e0a <__aeabi_ldivmod+0x42>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db1a      	blt.n	8000e30 <__aeabi_ldivmod+0x68>
 8000dfa:	f000 f885 	bl	8000f08 <__udivmoddi4>
 8000dfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e06:	b004      	add	sp, #16
 8000e08:	4770      	bx	lr
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db1b      	blt.n	8000e4c <__aeabi_ldivmod+0x84>
 8000e14:	f000 f878 	bl	8000f08 <__udivmoddi4>
 8000e18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e20:	b004      	add	sp, #16
 8000e22:	4240      	negs	r0, r0
 8000e24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e28:	4252      	negs	r2, r2
 8000e2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e2e:	4770      	bx	lr
 8000e30:	4252      	negs	r2, r2
 8000e32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e36:	f000 f867 	bl	8000f08 <__udivmoddi4>
 8000e3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e42:	b004      	add	sp, #16
 8000e44:	4240      	negs	r0, r0
 8000e46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4a:	4770      	bx	lr
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	f000 f859 	bl	8000f08 <__udivmoddi4>
 8000e56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e5e:	b004      	add	sp, #16
 8000e60:	4252      	negs	r2, r2
 8000e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_uldivmod>:
 8000e68:	b953      	cbnz	r3, 8000e80 <__aeabi_uldivmod+0x18>
 8000e6a:	b94a      	cbnz	r2, 8000e80 <__aeabi_uldivmod+0x18>
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	bf08      	it	eq
 8000e70:	2800      	cmpeq	r0, #0
 8000e72:	bf1c      	itt	ne
 8000e74:	f04f 31ff 	movne.w	r1, #4294967295
 8000e78:	f04f 30ff 	movne.w	r0, #4294967295
 8000e7c:	f000 b9ac 	b.w	80011d8 <__aeabi_idiv0>
 8000e80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e88:	f000 f83e 	bl	8000f08 <__udivmoddi4>
 8000e8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e94:	b004      	add	sp, #16
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_d2lz>:
 8000e98:	b508      	push	{r3, lr}
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	ec43 2b17 	vmov	d7, r2, r3
 8000ea2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d403      	bmi.n	8000eb4 <__aeabi_d2lz+0x1c>
 8000eac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000eb0:	f000 b80a 	b.w	8000ec8 <__aeabi_d2ulz>
 8000eb4:	eeb1 7b47 	vneg.f64	d7, d7
 8000eb8:	ec51 0b17 	vmov	r0, r1, d7
 8000ebc:	f000 f804 	bl	8000ec8 <__aeabi_d2ulz>
 8000ec0:	4240      	negs	r0, r0
 8000ec2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ec6:	bd08      	pop	{r3, pc}

08000ec8 <__aeabi_d2ulz>:
 8000ec8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000ef8 <__aeabi_d2ulz+0x30>
 8000ecc:	ec41 0b17 	vmov	d7, r0, r1
 8000ed0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000f00 <__aeabi_d2ulz+0x38>
 8000ed4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ed8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000edc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000ee0:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000ee4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee8:	ee16 1a10 	vmov	r1, s12
 8000eec:	ee17 0a90 	vmov	r0, s15
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	00000000 	.word	0x00000000
 8000efc:	3df00000 	.word	0x3df00000
 8000f00:	00000000 	.word	0x00000000
 8000f04:	41f00000 	.word	0x41f00000

08000f08 <__udivmoddi4>:
 8000f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f0c:	9d08      	ldr	r5, [sp, #32]
 8000f0e:	4604      	mov	r4, r0
 8000f10:	468e      	mov	lr, r1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d14d      	bne.n	8000fb2 <__udivmoddi4+0xaa>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	4694      	mov	ip, r2
 8000f1a:	d969      	bls.n	8000ff0 <__udivmoddi4+0xe8>
 8000f1c:	fab2 f282 	clz	r2, r2
 8000f20:	b152      	cbz	r2, 8000f38 <__udivmoddi4+0x30>
 8000f22:	fa01 f302 	lsl.w	r3, r1, r2
 8000f26:	f1c2 0120 	rsb	r1, r2, #32
 8000f2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000f2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f32:	ea41 0e03 	orr.w	lr, r1, r3
 8000f36:	4094      	lsls	r4, r2
 8000f38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f3c:	0c21      	lsrs	r1, r4, #16
 8000f3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000f42:	fa1f f78c 	uxth.w	r7, ip
 8000f46:	fb08 e316 	mls	r3, r8, r6, lr
 8000f4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f4e:	fb06 f107 	mul.w	r1, r6, r7
 8000f52:	4299      	cmp	r1, r3
 8000f54:	d90a      	bls.n	8000f6c <__udivmoddi4+0x64>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f5e:	f080 811f 	bcs.w	80011a0 <__udivmoddi4+0x298>
 8000f62:	4299      	cmp	r1, r3
 8000f64:	f240 811c 	bls.w	80011a0 <__udivmoddi4+0x298>
 8000f68:	3e02      	subs	r6, #2
 8000f6a:	4463      	add	r3, ip
 8000f6c:	1a5b      	subs	r3, r3, r1
 8000f6e:	b2a4      	uxth	r4, r4
 8000f70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f74:	fb08 3310 	mls	r3, r8, r0, r3
 8000f78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f7c:	fb00 f707 	mul.w	r7, r0, r7
 8000f80:	42a7      	cmp	r7, r4
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x92>
 8000f84:	eb1c 0404 	adds.w	r4, ip, r4
 8000f88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f8c:	f080 810a 	bcs.w	80011a4 <__udivmoddi4+0x29c>
 8000f90:	42a7      	cmp	r7, r4
 8000f92:	f240 8107 	bls.w	80011a4 <__udivmoddi4+0x29c>
 8000f96:	4464      	add	r4, ip
 8000f98:	3802      	subs	r0, #2
 8000f9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f9e:	1be4      	subs	r4, r4, r7
 8000fa0:	2600      	movs	r6, #0
 8000fa2:	b11d      	cbz	r5, 8000fac <__udivmoddi4+0xa4>
 8000fa4:	40d4      	lsrs	r4, r2
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e9c5 4300 	strd	r4, r3, [r5]
 8000fac:	4631      	mov	r1, r6
 8000fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	d909      	bls.n	8000fca <__udivmoddi4+0xc2>
 8000fb6:	2d00      	cmp	r5, #0
 8000fb8:	f000 80ef 	beq.w	800119a <__udivmoddi4+0x292>
 8000fbc:	2600      	movs	r6, #0
 8000fbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	4631      	mov	r1, r6
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	fab3 f683 	clz	r6, r3
 8000fce:	2e00      	cmp	r6, #0
 8000fd0:	d14a      	bne.n	8001068 <__udivmoddi4+0x160>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	d302      	bcc.n	8000fdc <__udivmoddi4+0xd4>
 8000fd6:	4282      	cmp	r2, r0
 8000fd8:	f200 80f9 	bhi.w	80011ce <__udivmoddi4+0x2c6>
 8000fdc:	1a84      	subs	r4, r0, r2
 8000fde:	eb61 0303 	sbc.w	r3, r1, r3
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	2d00      	cmp	r5, #0
 8000fe8:	d0e0      	beq.n	8000fac <__udivmoddi4+0xa4>
 8000fea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fee:	e7dd      	b.n	8000fac <__udivmoddi4+0xa4>
 8000ff0:	b902      	cbnz	r2, 8000ff4 <__udivmoddi4+0xec>
 8000ff2:	deff      	udf	#255	; 0xff
 8000ff4:	fab2 f282 	clz	r2, r2
 8000ff8:	2a00      	cmp	r2, #0
 8000ffa:	f040 8092 	bne.w	8001122 <__udivmoddi4+0x21a>
 8000ffe:	eba1 010c 	sub.w	r1, r1, ip
 8001002:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001006:	fa1f fe8c 	uxth.w	lr, ip
 800100a:	2601      	movs	r6, #1
 800100c:	0c20      	lsrs	r0, r4, #16
 800100e:	fbb1 f3f7 	udiv	r3, r1, r7
 8001012:	fb07 1113 	mls	r1, r7, r3, r1
 8001016:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800101a:	fb0e f003 	mul.w	r0, lr, r3
 800101e:	4288      	cmp	r0, r1
 8001020:	d908      	bls.n	8001034 <__udivmoddi4+0x12c>
 8001022:	eb1c 0101 	adds.w	r1, ip, r1
 8001026:	f103 38ff 	add.w	r8, r3, #4294967295
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0x12a>
 800102c:	4288      	cmp	r0, r1
 800102e:	f200 80cb 	bhi.w	80011c8 <__udivmoddi4+0x2c0>
 8001032:	4643      	mov	r3, r8
 8001034:	1a09      	subs	r1, r1, r0
 8001036:	b2a4      	uxth	r4, r4
 8001038:	fbb1 f0f7 	udiv	r0, r1, r7
 800103c:	fb07 1110 	mls	r1, r7, r0, r1
 8001040:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001044:	fb0e fe00 	mul.w	lr, lr, r0
 8001048:	45a6      	cmp	lr, r4
 800104a:	d908      	bls.n	800105e <__udivmoddi4+0x156>
 800104c:	eb1c 0404 	adds.w	r4, ip, r4
 8001050:	f100 31ff 	add.w	r1, r0, #4294967295
 8001054:	d202      	bcs.n	800105c <__udivmoddi4+0x154>
 8001056:	45a6      	cmp	lr, r4
 8001058:	f200 80bb 	bhi.w	80011d2 <__udivmoddi4+0x2ca>
 800105c:	4608      	mov	r0, r1
 800105e:	eba4 040e 	sub.w	r4, r4, lr
 8001062:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001066:	e79c      	b.n	8000fa2 <__udivmoddi4+0x9a>
 8001068:	f1c6 0720 	rsb	r7, r6, #32
 800106c:	40b3      	lsls	r3, r6
 800106e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001072:	ea4c 0c03 	orr.w	ip, ip, r3
 8001076:	fa20 f407 	lsr.w	r4, r0, r7
 800107a:	fa01 f306 	lsl.w	r3, r1, r6
 800107e:	431c      	orrs	r4, r3
 8001080:	40f9      	lsrs	r1, r7
 8001082:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001086:	fa00 f306 	lsl.w	r3, r0, r6
 800108a:	fbb1 f8f9 	udiv	r8, r1, r9
 800108e:	0c20      	lsrs	r0, r4, #16
 8001090:	fa1f fe8c 	uxth.w	lr, ip
 8001094:	fb09 1118 	mls	r1, r9, r8, r1
 8001098:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800109c:	fb08 f00e 	mul.w	r0, r8, lr
 80010a0:	4288      	cmp	r0, r1
 80010a2:	fa02 f206 	lsl.w	r2, r2, r6
 80010a6:	d90b      	bls.n	80010c0 <__udivmoddi4+0x1b8>
 80010a8:	eb1c 0101 	adds.w	r1, ip, r1
 80010ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80010b0:	f080 8088 	bcs.w	80011c4 <__udivmoddi4+0x2bc>
 80010b4:	4288      	cmp	r0, r1
 80010b6:	f240 8085 	bls.w	80011c4 <__udivmoddi4+0x2bc>
 80010ba:	f1a8 0802 	sub.w	r8, r8, #2
 80010be:	4461      	add	r1, ip
 80010c0:	1a09      	subs	r1, r1, r0
 80010c2:	b2a4      	uxth	r4, r4
 80010c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80010c8:	fb09 1110 	mls	r1, r9, r0, r1
 80010cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80010d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80010d4:	458e      	cmp	lr, r1
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x1e2>
 80010d8:	eb1c 0101 	adds.w	r1, ip, r1
 80010dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80010e0:	d26c      	bcs.n	80011bc <__udivmoddi4+0x2b4>
 80010e2:	458e      	cmp	lr, r1
 80010e4:	d96a      	bls.n	80011bc <__udivmoddi4+0x2b4>
 80010e6:	3802      	subs	r0, #2
 80010e8:	4461      	add	r1, ip
 80010ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010ee:	fba0 9402 	umull	r9, r4, r0, r2
 80010f2:	eba1 010e 	sub.w	r1, r1, lr
 80010f6:	42a1      	cmp	r1, r4
 80010f8:	46c8      	mov	r8, r9
 80010fa:	46a6      	mov	lr, r4
 80010fc:	d356      	bcc.n	80011ac <__udivmoddi4+0x2a4>
 80010fe:	d053      	beq.n	80011a8 <__udivmoddi4+0x2a0>
 8001100:	b15d      	cbz	r5, 800111a <__udivmoddi4+0x212>
 8001102:	ebb3 0208 	subs.w	r2, r3, r8
 8001106:	eb61 010e 	sbc.w	r1, r1, lr
 800110a:	fa01 f707 	lsl.w	r7, r1, r7
 800110e:	fa22 f306 	lsr.w	r3, r2, r6
 8001112:	40f1      	lsrs	r1, r6
 8001114:	431f      	orrs	r7, r3
 8001116:	e9c5 7100 	strd	r7, r1, [r5]
 800111a:	2600      	movs	r6, #0
 800111c:	4631      	mov	r1, r6
 800111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001122:	f1c2 0320 	rsb	r3, r2, #32
 8001126:	40d8      	lsrs	r0, r3
 8001128:	fa0c fc02 	lsl.w	ip, ip, r2
 800112c:	fa21 f303 	lsr.w	r3, r1, r3
 8001130:	4091      	lsls	r1, r2
 8001132:	4301      	orrs	r1, r0
 8001134:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001138:	fa1f fe8c 	uxth.w	lr, ip
 800113c:	fbb3 f0f7 	udiv	r0, r3, r7
 8001140:	fb07 3610 	mls	r6, r7, r0, r3
 8001144:	0c0b      	lsrs	r3, r1, #16
 8001146:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800114a:	fb00 f60e 	mul.w	r6, r0, lr
 800114e:	429e      	cmp	r6, r3
 8001150:	fa04 f402 	lsl.w	r4, r4, r2
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x260>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 38ff 	add.w	r8, r0, #4294967295
 800115e:	d22f      	bcs.n	80011c0 <__udivmoddi4+0x2b8>
 8001160:	429e      	cmp	r6, r3
 8001162:	d92d      	bls.n	80011c0 <__udivmoddi4+0x2b8>
 8001164:	3802      	subs	r0, #2
 8001166:	4463      	add	r3, ip
 8001168:	1b9b      	subs	r3, r3, r6
 800116a:	b289      	uxth	r1, r1
 800116c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001170:	fb07 3316 	mls	r3, r7, r6, r3
 8001174:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001178:	fb06 f30e 	mul.w	r3, r6, lr
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0x28a>
 8001180:	eb1c 0101 	adds.w	r1, ip, r1
 8001184:	f106 38ff 	add.w	r8, r6, #4294967295
 8001188:	d216      	bcs.n	80011b8 <__udivmoddi4+0x2b0>
 800118a:	428b      	cmp	r3, r1
 800118c:	d914      	bls.n	80011b8 <__udivmoddi4+0x2b0>
 800118e:	3e02      	subs	r6, #2
 8001190:	4461      	add	r1, ip
 8001192:	1ac9      	subs	r1, r1, r3
 8001194:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001198:	e738      	b.n	800100c <__udivmoddi4+0x104>
 800119a:	462e      	mov	r6, r5
 800119c:	4628      	mov	r0, r5
 800119e:	e705      	b.n	8000fac <__udivmoddi4+0xa4>
 80011a0:	4606      	mov	r6, r0
 80011a2:	e6e3      	b.n	8000f6c <__udivmoddi4+0x64>
 80011a4:	4618      	mov	r0, r3
 80011a6:	e6f8      	b.n	8000f9a <__udivmoddi4+0x92>
 80011a8:	454b      	cmp	r3, r9
 80011aa:	d2a9      	bcs.n	8001100 <__udivmoddi4+0x1f8>
 80011ac:	ebb9 0802 	subs.w	r8, r9, r2
 80011b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80011b4:	3801      	subs	r0, #1
 80011b6:	e7a3      	b.n	8001100 <__udivmoddi4+0x1f8>
 80011b8:	4646      	mov	r6, r8
 80011ba:	e7ea      	b.n	8001192 <__udivmoddi4+0x28a>
 80011bc:	4620      	mov	r0, r4
 80011be:	e794      	b.n	80010ea <__udivmoddi4+0x1e2>
 80011c0:	4640      	mov	r0, r8
 80011c2:	e7d1      	b.n	8001168 <__udivmoddi4+0x260>
 80011c4:	46d0      	mov	r8, sl
 80011c6:	e77b      	b.n	80010c0 <__udivmoddi4+0x1b8>
 80011c8:	3b02      	subs	r3, #2
 80011ca:	4461      	add	r1, ip
 80011cc:	e732      	b.n	8001034 <__udivmoddi4+0x12c>
 80011ce:	4630      	mov	r0, r6
 80011d0:	e709      	b.n	8000fe6 <__udivmoddi4+0xde>
 80011d2:	4464      	add	r4, ip
 80011d4:	3802      	subs	r0, #2
 80011d6:	e742      	b.n	800105e <__udivmoddi4+0x156>

080011d8 <__aeabi_idiv0>:
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <main>:
 */

#include <stdint.h>

int main(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
    /* Loop forever */
	for(;;);
 80011e0:	e7fe      	b.n	80011e0 <main+0x4>
	...

080011e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <_sbrk+0x5c>)
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <_sbrk+0x60>)
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (0U ==  (uintptr_t) __sbrk_heap_end)
 80011f8:	4b13      	ldr	r3, [pc, #76]	; (8001248 <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d102      	bne.n	8001206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <_sbrk+0x64>)
 8001202:	4a12      	ldr	r2, [pc, #72]	; (800124c <_sbrk+0x68>)
 8001204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <_sbrk+0x64>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	d207      	bcs.n	8001224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001214:	f004 ff4a 	bl	80060ac <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    return ((void *)-1);
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e009      	b.n	8001238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <_sbrk+0x64>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_sbrk+0x64>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4413      	add	r3, r2
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <_sbrk+0x64>)
 8001234:	6013      	str	r3, [r2, #0]

  return ((void *)prev_heap_end);
 8001236:	68fb      	ldr	r3, [r7, #12]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2007c000 	.word	0x2007c000
 8001244:	0000c000 	.word	0x0000c000
 8001248:	200204a4 	.word	0x200204a4
 800124c:	20060000 	.word	0x20060000

08001250 <ResetISR>:
/* application.*/
/**/
/*******************************************************************************/
void
ResetISR(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
    UBase_t *pui32SrcRamCode = (UBase_t*) 0UL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
    UBase_t *pui32DestRamCode = (UBase_t*) 0UL;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
    UBase_t *pui32SrcData = (UBase_t*) 0UL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
    UBase_t *pui32DestData = (UBase_t*) 0UL;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
    UBase_t *pui32DestBss = (UBase_t*) 0UL;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]


    {__asm volatile(" cpsid i");}
 800126a:	b672      	cpsid	i
    /**/
    /* Copy the ramcode segment initializers from flash to SRAM.*/
    /**/
    pui32SrcRamCode = &__ramcode_load__;
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <ResetISR+0xb8>)
 800126e:	617b      	str	r3, [r7, #20]
    pui32DestRamCode = &__ramcode_start__;
 8001270:	4b26      	ldr	r3, [pc, #152]	; (800130c <ResetISR+0xbc>)
 8001272:	613b      	str	r3, [r7, #16]
    while(pui32DestRamCode <= &__ramcode_end__)
 8001274:	e009      	b.n	800128a <ResetISR+0x3a>
    {
        *pui32DestRamCode = *pui32SrcRamCode;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]
        pui32SrcRamCode += 1UL;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3304      	adds	r3, #4
 8001282:	617b      	str	r3, [r7, #20]
        pui32DestRamCode += 1UL;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	3304      	adds	r3, #4
 8001288:	613b      	str	r3, [r7, #16]
    while(pui32DestRamCode <= &__ramcode_end__)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4a20      	ldr	r2, [pc, #128]	; (8001310 <ResetISR+0xc0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d9f1      	bls.n	8001276 <ResetISR+0x26>
    }

    /**/
    /* Copy the ramcode segment initializers from flash to SRAM.*/
    /**/
    pui32SrcData = (UBase_t*) &__data_load__;
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <ResetISR+0xc4>)
 8001294:	60fb      	str	r3, [r7, #12]
    pui32DestData = (UBase_t*) &__data_start__;
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <ResetISR+0xc8>)
 8001298:	60bb      	str	r3, [r7, #8]
    while(pui32DestData <= &__data_end__)
 800129a:	e009      	b.n	80012b0 <ResetISR+0x60>
    {
        *pui32DestData = *pui32SrcData;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	601a      	str	r2, [r3, #0]
        pui32SrcData += 1UL;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3304      	adds	r3, #4
 80012a8:	60fb      	str	r3, [r7, #12]
        pui32DestData += 1UL;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3304      	adds	r3, #4
 80012ae:	60bb      	str	r3, [r7, #8]
    while(pui32DestData <= &__data_end__)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4a1a      	ldr	r2, [pc, #104]	; (800131c <ResetISR+0xcc>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d9f1      	bls.n	800129c <ResetISR+0x4c>


    /**/
    /* Copy the ramcode segment initializers from flash to SRAM.*/
    /**/
    pui32DestBss = (UBase_t*) &__bss_start__;
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <ResetISR+0xd0>)
 80012ba:	607b      	str	r3, [r7, #4]
    while(pui32DestBss <= &__bss_end__)
 80012bc:	e005      	b.n	80012ca <ResetISR+0x7a>
    {
        *pui32DestBss = 0UL;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
        pui32DestBss += 1UL;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3304      	adds	r3, #4
 80012c8:	607b      	str	r3, [r7, #4]
    while(pui32DestBss <= &__bss_end__)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <ResetISR+0xd4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d9f5      	bls.n	80012be <ResetISR+0x6e>
    /* case where main() uses float32_ting-point and the function prologue saves*/
    /* float32_ting-point registers (which will fault if float32_ting-point is not*/
    /* enabled).  Any configuration of the float32_ting-point unit using DriverLib*/
    /* APIs must be done here prior to the float32_ting-point unit being enabled.*/

    FPU__enInit(FPU_enMODULE_0);
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f95e 	bl	8001594 <FPU__enInit>
    NVIC__enDisableAllInterrupts(NVIC_enMODULE_0);
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 f9cd 	bl	8001678 <NVIC__enDisableAllInterrupts>
    SCB__enInit(SCB_enMODULE_0);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f826 	bl	8001330 <SCB__enInit>
    FLASH__enInit(FLASH_enMODULE_0);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f000 f927 	bl	8001538 <FLASH__enInit>
    FLASH__enSetPrefetchMode(FLASH_enMODULE_0, FLASH_enPREFETCH_MODE_DUAL);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f005 f813 	bl	8006318 <__FLASH__enSetPrefetchMode_veneer>
    FLASH__enEnablePrefetch(FLASH_enMODULE_0);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f005 f80c 	bl	8006310 <__FLASH__enEnablePrefetch_veneer>
    /**/
    /* Call the application's entry point.*/
    /**/


    {__asm volatile(" cpsid i");}
 80012f8:	b672      	cpsid	i

    main();
 80012fa:	f7ff ff6f 	bl	80011dc <main>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	08006360 	.word	0x08006360
 800130c:	2007c000 	.word	0x2007c000
 8001310:	2007d000 	.word	0x2007d000
 8001314:	08007f84 	.word	0x08007f84
 8001318:	20020000 	.word	0x20020000
 800131c:	20020484 	.word	0x20020484
 8001320:	20020488 	.word	0x20020488
 8001324:	200209c0 	.word	0x200209c0

08001328 <IntDefaultHandler>:


static void
IntDefaultHandler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
    /**/
    /* Go into an infinite loop.*/
    /**/
    while(1U)
 800132c:	e7fe      	b.n	800132c <IntDefaultHandler+0x4>
	...

08001330 <SCB__enInit>:
#include <xApplication_MCU/Core/SCB/xHeader/SCB_VectorTable.h>
#include <xApplication_MCU/Core/SCB/xHeader/SCB_RegisterIRQVector.h>
#include <xApplication_MCU/Core/SCB/Intrinsics/xHeader/SCB_Dependencies.h>

SCB_nERROR SCB__enInit(SCB_nMODULE enModuleArg)
{
 8001330:	b510      	push	{r4, lr}
    SCB_nERROR enErrorReg;
    SCB_pvfIRQVectorHandler_t* pfnVectorInRam;

    enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SCB_enMODULE_MAX);
 8001332:	2101      	movs	r1, #1
{
 8001334:	4604      	mov	r4, r0
    enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SCB_enMODULE_MAX);
 8001336:	f000 f90f 	bl	8001558 <MCU__enCheckParams>
    if(SCB_enERROR_OK == enErrorReg)
 800133a:	b100      	cbz	r0, 800133e <SCB__enInit+0xe>
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = SCB__enSetPriorityGroup(enModuleArg, SCB_enPRIGROUP_XXX);
    }
    return (enErrorReg);
}
 800133c:	bd10      	pop	{r4, pc}
        pfnVectorInRam =  SCB__pfnGetVectorTableRam();
 800133e:	f000 f8a9 	bl	8001494 <SCB__pfnGetVectorTableRam>
 8001342:	4601      	mov	r1, r0
        enErrorReg = SCB__enSetVectorTable(enModuleArg, (UBase_t) pfnVectorInRam);
 8001344:	4620      	mov	r0, r4
 8001346:	f000 f8a9 	bl	800149c <SCB__enSetVectorTable>
    if(SCB_enERROR_OK == enErrorReg)
 800134a:	2800      	cmp	r0, #0
 800134c:	d1f6      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_HARDFAULT, &HardFault__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 800134e:	4603      	mov	r3, r0
 8001350:	4a28      	ldr	r2, [pc, #160]	; (80013f4 <SCB__enInit+0xc4>)
 8001352:	2103      	movs	r1, #3
 8001354:	4620      	mov	r0, r4
 8001356:	f000 f85b 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 800135a:	2800      	cmp	r0, #0
 800135c:	d1ee      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_BUSFAULT, &BusFault__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 800135e:	4603      	mov	r3, r0
 8001360:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <SCB__enInit+0xc8>)
 8001362:	2105      	movs	r1, #5
 8001364:	4620      	mov	r0, r4
 8001366:	f000 f853 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 800136a:	2800      	cmp	r0, #0
 800136c:	d1e6      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_MEMMANAGE, &MemoryFault__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 800136e:	4603      	mov	r3, r0
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <SCB__enInit+0xcc>)
 8001372:	2104      	movs	r1, #4
 8001374:	4620      	mov	r0, r4
 8001376:	f000 f84b 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 800137a:	2800      	cmp	r0, #0
 800137c:	d1de      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_USAGEFAULT, &UsageFault__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 800137e:	4603      	mov	r3, r0
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <SCB__enInit+0xd0>)
 8001382:	2106      	movs	r1, #6
 8001384:	4620      	mov	r0, r4
 8001386:	f000 f843 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 800138a:	2800      	cmp	r0, #0
 800138c:	d1d6      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enEnableAllExceptions(enModuleArg);
 800138e:	4620      	mov	r0, r4
 8001390:	f000 f9a4 	bl	80016dc <SCB__enEnableAllExceptions>
    if(SCB_enERROR_OK == enErrorReg)
 8001394:	2800      	cmp	r0, #0
 8001396:	d1d1      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enEnableAllTraps(enModuleArg);
 8001398:	4620      	mov	r0, r4
 800139a:	f000 fa11 	bl	80017c0 <SCB__enEnableAllTraps>
    if(SCB_enERROR_OK == enErrorReg)
 800139e:	2800      	cmp	r0, #0
 80013a0:	d1cc      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enSetStackAligment(enModuleArg, SCB_enALIGN_8BYTE);
 80013a2:	2101      	movs	r1, #1
 80013a4:	4620      	mov	r0, r4
 80013a6:	f000 fa63 	bl	8001870 <SCB__enSetStackAligment>
    if(SCB_enERROR_OK == enErrorReg)
 80013aa:	2800      	cmp	r0, #0
 80013ac:	d1c6      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_NMI, &NMI__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <SCB__enInit+0xd4>)
 80013b2:	2102      	movs	r1, #2
 80013b4:	4620      	mov	r0, r4
 80013b6:	f000 f82b 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 80013ba:	2800      	cmp	r0, #0
 80013bc:	d1be      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_PENDSV, &PendSV__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 80013be:	2300      	movs	r3, #0
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <SCB__enInit+0xd8>)
 80013c2:	210e      	movs	r1, #14
 80013c4:	4620      	mov	r0, r4
 80013c6:	f000 f823 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d1b6      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enRegisterIRQVectorHandler(enModuleArg, SCB_enVECISR_SVCALL, &SVCall__vIRQVectorHandler, (SCB_pvfIRQVectorHandler_t*) 0UL);
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <SCB__enInit+0xdc>)
 80013d2:	210b      	movs	r1, #11
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 f81b 	bl	8001410 <SCB__enRegisterIRQVectorHandler>
    if(SCB_enERROR_OK == enErrorReg)
 80013da:	2800      	cmp	r0, #0
 80013dc:	d1ae      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enEnableUnprivilegedSWTrigger(enModuleArg);
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 fa2e 	bl	8001840 <SCB__enEnableUnprivilegedSWTrigger>
    if(SCB_enERROR_OK == enErrorReg)
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d1a9      	bne.n	800133c <SCB__enInit+0xc>
        enErrorReg = SCB__enSetPriorityGroup(enModuleArg, SCB_enPRIGROUP_XXX);
 80013e8:	4601      	mov	r1, r0
 80013ea:	4620      	mov	r0, r4
}
 80013ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = SCB__enSetPriorityGroup(enModuleArg, SCB_enPRIGROUP_XXX);
 80013f0:	f000 ba04 	b.w	80017fc <SCB__enSetPriorityGroup>
 80013f4:	080005f1 	.word	0x080005f1
 80013f8:	08000561 	.word	0x08000561
 80013fc:	08000681 	.word	0x08000681
 8001400:	08000761 	.word	0x08000761
 8001404:	08001939 	.word	0x08001939
 8001408:	08001a7d 	.word	0x08001a7d
 800140c:	08000711 	.word	0x08000711

08001410 <SCB__enRegisterIRQVectorHandler>:

SCB_nERROR SCB__enRegisterIRQVectorHandler(SCB_nMODULE enModuleArg,
                                           SCB_nVECISR enVectorArg,
                                           SCB_pvfIRQVectorHandler_t pfIrqVectorHandlerArg,
                                           SCB_pvfIRQVectorHandler_t* pfIrqVectorHandlerExternArg)
{
 8001410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001414:	460e      	mov	r6, r1
 8001416:	b082      	sub	sp, #8
    UBase_t uxBaseVectorReg;
    uintptr_t uptrIrqVectorHandlerReg;
    SCB_nERROR enErrorReg;
    MCU_nSTATE enInterruptStateReg;

    uxFlashSizeInBytesReg = 0UL;
 8001418:	2400      	movs	r4, #0
{
 800141a:	4607      	mov	r7, r0
    uxVectorReg = 0UL;
    uxBaseVectorReg = 0UL;
    uptrIrqVectorHandlerReg = 0UL;
    enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enVectorArg, (UBase_t) SCB_enVECISR_MAX);
 800141c:	2182      	movs	r1, #130	; 0x82
 800141e:	4630      	mov	r0, r6
{
 8001420:	4615      	mov	r5, r2
 8001422:	4698      	mov	r8, r3
    uxBaseVectorReg = 0UL;
 8001424:	e9cd 4400 	strd	r4, r4, [sp]
    enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enVectorArg, (UBase_t) SCB_enVECISR_MAX);
 8001428:	f000 f896 	bl	8001558 <MCU__enCheckParams>
    if(SCB_enERROR_OK == enErrorReg)
 800142c:	4604      	mov	r4, r0
 800142e:	b9c8      	cbnz	r0, 8001464 <SCB__enRegisterIRQVectorHandler+0x54>
    {
        if(0UL != (uintptr_t) pfIrqVectorHandlerArg)
 8001430:	b9e5      	cbnz	r5, 800146c <SCB__enRegisterIRQVectorHandler+0x5c>
            uptrIrqVectorHandlerReg |= 1UL;
        }
    }
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = SCB__enGetVectorOffset(enModuleArg, &uxBaseVectorReg);
 8001432:	a901      	add	r1, sp, #4
 8001434:	4638      	mov	r0, r7
 8001436:	f000 fa49 	bl	80018cc <SCB__enGetVectorOffset>
    }
    if(SCB_enERROR_OK == enErrorReg)
 800143a:	4604      	mov	r4, r0
 800143c:	b990      	cbnz	r0, 8001464 <SCB__enRegisterIRQVectorHandler+0x54>
    {
        enErrorReg = (SCB_nERROR) FLASH__enGetSizeInBytes(FLASH_enMODULE_0, &uxFlashSizeInBytesReg);
 800143e:	4669      	mov	r1, sp
 8001440:	f004 ff5e 	bl	8006300 <__FLASH__enGetSizeInBytes_veneer>
    }
    if(SCB_enERROR_OK == enErrorReg)
 8001444:	4604      	mov	r4, r0
 8001446:	b968      	cbnz	r0, 8001464 <SCB__enRegisterIRQVectorHandler+0x54>
    {
        uxVectorReg = (UBase_t) enVectorArg;
        uxVectorReg <<= 2UL;
        uxBaseVectorReg += uxVectorReg;
        if(uxFlashSizeInBytesReg > uxBaseVectorReg)
 8001448:	e9dd 1200 	ldrd	r1, r2, [sp]
        uxBaseVectorReg += uxVectorReg;
 800144c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
        if(uxFlashSizeInBytesReg > uxBaseVectorReg)
 8001450:	428b      	cmp	r3, r1
        uxBaseVectorReg += uxVectorReg;
 8001452:	9301      	str	r3, [sp, #4]
        if(uxFlashSizeInBytesReg > uxBaseVectorReg)
 8001454:	d30d      	bcc.n	8001472 <SCB__enRegisterIRQVectorHandler+0x62>
            MCU__vSetGlobalInterrupt(enInterruptStateReg);
        }
        else
        {
            puxBaseVectorReg = (UBase_t*) uxBaseVectorReg;
            *puxBaseVectorReg = (UBase_t) uptrIrqVectorHandlerReg;
 8001456:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
        }
    }
    if(SCB_enERROR_OK == enErrorReg)
    {
        if(0UL != (UBase_t) pfIrqVectorHandlerExternArg)
 800145a:	f1b8 0f00 	cmp.w	r8, #0
 800145e:	d001      	beq.n	8001464 <SCB__enRegisterIRQVectorHandler+0x54>
        {
            *pfIrqVectorHandlerExternArg = (SCB_pvfIRQVectorHandler_t) uptrIrqVectorHandlerReg;
 8001460:	f8c8 5000 	str.w	r5, [r8]
        }
    }
    return (enErrorReg);
}
 8001464:	4620      	mov	r0, r4
 8001466:	b002      	add	sp, #8
 8001468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            uptrIrqVectorHandlerReg |= 1UL;
 800146c:	f045 0501 	orr.w	r5, r5, #1
 8001470:	e7df      	b.n	8001432 <SCB__enRegisterIRQVectorHandler+0x22>
            enInterruptStateReg = MCU__enDisableGlobalInterrupt();
 8001472:	f7fe ffe5 	bl	8000440 <MCU__enDisableGlobalInterrupt>
            enErrorReg = (SCB_nERROR) FLASH__enWriteWorld(FLASH_enMODULE_0, uptrIrqVectorHandlerReg, uxBaseVectorReg);
 8001476:	9a01      	ldr	r2, [sp, #4]
            enInterruptStateReg = MCU__enDisableGlobalInterrupt();
 8001478:	4607      	mov	r7, r0
            enErrorReg = (SCB_nERROR) FLASH__enWriteWorld(FLASH_enMODULE_0, uptrIrqVectorHandlerReg, uxBaseVectorReg);
 800147a:	4629      	mov	r1, r5
 800147c:	4620      	mov	r0, r4
 800147e:	f004 ff4f 	bl	8006320 <__FLASH__enWriteWorld_veneer>
 8001482:	4606      	mov	r6, r0
            MCU__vSetGlobalInterrupt(enInterruptStateReg);
 8001484:	4638      	mov	r0, r7
 8001486:	f7fe ffeb 	bl	8000460 <MCU__vSetGlobalInterrupt>
    if(SCB_enERROR_OK == enErrorReg)
 800148a:	2e00      	cmp	r6, #0
 800148c:	d0e5      	beq.n	800145a <SCB__enRegisterIRQVectorHandler+0x4a>
 800148e:	4634      	mov	r4, r6
 8001490:	e7e8      	b.n	8001464 <SCB__enRegisterIRQVectorHandler+0x54>
 8001492:	bf00      	nop

08001494 <SCB__pfnGetVectorTableRam>:
SCB_pvfIRQVectorHandler_t SCB__pfnVectors[SCB_VECTOR_TABLE_SIZE] = {0UL};

SCB_pvfIRQVectorHandler_t* SCB__pfnGetVectorTableRam(void)
{
    return (SCB__pfnVectors);
}
 8001494:	4800      	ldr	r0, [pc, #0]	; (8001498 <SCB__pfnGetVectorTableRam+0x4>)
 8001496:	4770      	bx	lr
 8001498:	00000000 	.word	0x00000000

0800149c <SCB__enSetVectorTable>:

SCB_nERROR SCB__enSetVectorTable(SCB_nMODULE enModuleArg, UBase_t uxOffsetArg)
{
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	b082      	sub	sp, #8
    UBase_t uxFlashSize;
    MCU_nSTATE enInterruptStateReg;
    SCB_nERROR enErrorReg;

    uxOffsetArg &= SCB_VTOR_R_TBLOFF_MASK;
    uxTableAddress = 0UL;
 80014a0:	2200      	movs	r2, #0
{
 80014a2:	460e      	mov	r6, r1
 80014a4:	4604      	mov	r4, r0
    uxFlashSize = 0UL;
    enErrorReg = SCB__enGetVectorOffset(enModuleArg, &uxTableAddress);
 80014a6:	4669      	mov	r1, sp
    uxFlashSize = 0UL;
 80014a8:	e9cd 2200 	strd	r2, r2, [sp]
    enErrorReg = SCB__enGetVectorOffset(enModuleArg, &uxTableAddress);
 80014ac:	f000 fa0e 	bl	80018cc <SCB__enGetVectorOffset>
    if(SCB_enERROR_OK == enErrorReg)
 80014b0:	4603      	mov	r3, r0
 80014b2:	b110      	cbz	r0, 80014ba <SCB__enSetVectorTable+0x1e>
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = SCB__enSetVectorOffset(enModuleArg, uxOffsetArg);
    }
    return (enErrorReg);
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	b002      	add	sp, #8
 80014b8:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = (SCB_nERROR) FLASH__enGetSize(FLASH_enMODULE_0 ,&uxFlashSize);
 80014ba:	a901      	add	r1, sp, #4
 80014bc:	f004 ff24 	bl	8006308 <__FLASH__enGetSize_veneer>
    if(SCB_enERROR_OK == enErrorReg)
 80014c0:	4603      	mov	r3, r0
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d1f6      	bne.n	80014b4 <SCB__enSetVectorTable+0x18>
    uxOffsetArg &= SCB_VTOR_R_TBLOFF_MASK;
 80014c6:	4d1b      	ldr	r5, [pc, #108]	; (8001534 <SCB__enSetVectorTable+0x98>)
        if(uxFlashSize > uxOffsetArg)
 80014c8:	9b01      	ldr	r3, [sp, #4]
    uxOffsetArg &= SCB_VTOR_R_TBLOFF_MASK;
 80014ca:	4035      	ands	r5, r6
        if(uxFlashSize > uxOffsetArg)
 80014cc:	42ab      	cmp	r3, r5
 80014ce:	d81b      	bhi.n	8001508 <SCB__enSetVectorTable+0x6c>
            puxTable = (const UBase_t*) uxTableAddress;
 80014d0:	9800      	ldr	r0, [sp, #0]
 80014d2:	0742      	lsls	r2, r0, #29
 80014d4:	4603      	mov	r3, r0
            for(uxCount = 0UL; uxCount < SCB_VECTOR_TABLE_SIZE; uxCount++ )
 80014d6:	d121      	bne.n	800151c <SCB__enSetVectorTable+0x80>
 80014d8:	1d01      	adds	r1, r0, #4
 80014da:	42a9      	cmp	r1, r5
 80014dc:	d01e      	beq.n	800151c <SCB__enSetVectorTable+0x80>
 80014de:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80014e2:	eba5 0c03 	sub.w	ip, r5, r3
                *puxRam = *puxTable;
 80014e6:	eb0c 0203 	add.w	r2, ip, r3
 80014ea:	3308      	adds	r3, #8
 80014ec:	ed13 7b02 	vldr	d7, [r3, #-8]
 80014f0:	4283      	cmp	r3, r0
 80014f2:	ed82 7b00 	vstr	d7, [r2]
            for(uxCount = 0UL; uxCount < SCB_VECTOR_TABLE_SIZE; uxCount++ )
 80014f6:	d1f6      	bne.n	80014e6 <SCB__enSetVectorTable+0x4a>
        enErrorReg = SCB__enSetVectorOffset(enModuleArg, uxOffsetArg);
 80014f8:	4629      	mov	r1, r5
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 f9c8 	bl	8001890 <SCB__enSetVectorOffset>
 8001500:	4603      	mov	r3, r0
}
 8001502:	4618      	mov	r0, r3
 8001504:	b002      	add	sp, #8
 8001506:	bd70      	pop	{r4, r5, r6, pc}
            enInterruptStateReg = MCU__enDisableGlobalInterrupt();
 8001508:	f7fe ff9a 	bl	8000440 <MCU__enDisableGlobalInterrupt>
            MCU__vSetGlobalInterrupt(enInterruptStateReg);
 800150c:	f7fe ffa8 	bl	8000460 <MCU__vSetGlobalInterrupt>
        enErrorReg = SCB__enSetVectorOffset(enModuleArg, uxOffsetArg);
 8001510:	4629      	mov	r1, r5
 8001512:	4620      	mov	r0, r4
 8001514:	f000 f9bc 	bl	8001890 <SCB__enSetVectorOffset>
 8001518:	4603      	mov	r3, r0
 800151a:	e7f2      	b.n	8001502 <SCB__enSetVectorTable+0x66>
 800151c:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 8001520:	eba5 0c00 	sub.w	ip, r5, r0
                *puxRam = *puxTable;
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	f843 200c 	str.w	r2, [r3, ip]
                puxTable += 1U;
 800152a:	3304      	adds	r3, #4
            for(uxCount = 0UL; uxCount < SCB_VECTOR_TABLE_SIZE; uxCount++ )
 800152c:	4299      	cmp	r1, r3
 800152e:	d1f9      	bne.n	8001524 <SCB__enSetVectorTable+0x88>
 8001530:	e7e2      	b.n	80014f8 <SCB__enSetVectorTable+0x5c>
 8001532:	bf00      	nop
 8001534:	fffffc00 	.word	0xfffffc00

08001538 <FLASH__enInit>:

#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>
#include <xApplication_MCU/FLASH/Interrupt/FLASH_Interrupt.h>

FLASH_nERROR FLASH__enInit (FLASH_nMODULE enModuleArg)
{
 8001538:	b510      	push	{r4, lr}
    FLASH_nERROR enErrorReg;
    FLASH_pvfIRQVectorHandler_t pfIrqVectorHandler;

    enErrorReg = (FLASH_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
 800153a:	2101      	movs	r1, #1
{
 800153c:	4604      	mov	r4, r0
    enErrorReg = (FLASH_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
 800153e:	f000 f80b 	bl	8001558 <MCU__enCheckParams>
    if(FLASH_enERROR_OK == enErrorReg)
 8001542:	b100      	cbz	r0, 8001546 <FLASH__enInit+0xe>
        pfIrqVectorHandler = FLASH__pvfGetIRQVectorHandler(enModuleArg);
        enErrorReg = FLASH__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandler);
    }
    return (enErrorReg);

}
 8001544:	bd10      	pop	{r4, pc}
        pfIrqVectorHandler = FLASH__pvfGetIRQVectorHandler(enModuleArg);
 8001546:	4620      	mov	r0, r4
 8001548:	f000 fae4 	bl	8001b14 <FLASH__pvfGetIRQVectorHandler>
 800154c:	4601      	mov	r1, r0
        enErrorReg = FLASH__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandler);
 800154e:	4620      	mov	r0, r4
}
 8001550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = FLASH__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandler);
 8001554:	f000 baca 	b.w	8001aec <FLASH__enRegisterIRQVectorHandler>

08001558 <MCU__enCheckParams>:
    else
    {
        enErrorReg = MCU_enERROR_OK;
    }
    return (enErrorReg);
}
 8001558:	4281      	cmp	r1, r0
 800155a:	bf94      	ite	ls
 800155c:	2003      	movls	r0, #3
 800155e:	2000      	movhi	r0, #0
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <MCU__enReadRegister>:
    UBase_t uxRegisterMask;
    MCU_nERROR enErrorReg;
    UBase_t uxRegisterShift;

    enErrorReg = MCU_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8001564:	b170      	cbz	r0, 8001584 <MCU__enReadRegister+0x20>
 8001566:	4603      	mov	r3, r0
    {
        uxRegisterMask = pstRegisterDataArg->uxMask;
        uxRegisterShift = pstRegisterDataArg->uxShift;
        uptrRegisterAddress = pstRegisterDataArg->uptrAddress;

        puxRegisterAddress = (volatile UBase_t*) uptrRegisterAddress;
 8001568:	68c0      	ldr	r0, [r0, #12]
{
 800156a:	b410      	push	{r4}
        uxRegisterShift = pstRegisterDataArg->uxShift;
 800156c:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
        uxRegisterValue = *puxRegisterAddress;
 8001570:	6802      	ldr	r2, [r0, #0]
        if(MCU_MASK_BASE != uxRegisterMask)
 8001572:	1c48      	adds	r0, r1, #1
 8001574:	d001      	beq.n	800157a <MCU__enReadRegister+0x16>
        {
            uxRegisterValue >>= uxRegisterShift;
 8001576:	40e2      	lsrs	r2, r4
            uxRegisterValue &= uxRegisterMask;
 8001578:	400a      	ands	r2, r1
    enErrorReg = MCU_enERROR_OK;
 800157a:	2000      	movs	r0, #0
        }
        pstRegisterDataArg->uxValue = (UBase_t) uxRegisterValue;
    }

    return (enErrorReg);
}
 800157c:	f85d 4b04 	ldr.w	r4, [sp], #4
        pstRegisterDataArg->uxValue = (UBase_t) uxRegisterValue;
 8001580:	601a      	str	r2, [r3, #0]
}
 8001582:	4770      	bx	lr
        enErrorReg = MCU_enERROR_POINTER;
 8001584:	2001      	movs	r0, #1
}
 8001586:	4770      	bx	lr

08001588 <MCU__uxReadRegister>:
    volatile UBase_t* puxPeripheral = 0UL;

    uxPeripheralBase += uxOffsetRegister;
    puxPeripheral = (volatile UBase_t*) (uxPeripheralBase);

    uxFeatureValue = *puxPeripheral;
 8001588:	5840      	ldr	r0, [r0, r1]

    if(MCU_MASK_32 != uxMaskFeature)
 800158a:	1c51      	adds	r1, r2, #1
 800158c:	d001      	beq.n	8001592 <MCU__uxReadRegister+0xa>
    {
        uxFeatureValue >>= uxBitFeature;
 800158e:	40d8      	lsrs	r0, r3
        uxFeatureValue &= uxMaskFeature;
 8001590:	4010      	ands	r0, r2
    }
    return (uxFeatureValue);
}
 8001592:	4770      	bx	lr

08001594 <FPU__enInit>:
#include <xDriver_MCU/Core/FPU/App/xHeader/FPU_Init.h>

#include <xDriver_MCU/Core/FPU/Driver/FPU_Driver.h>

FPU_nERROR FPU__enInit(FPU_nMODULE enModuleArg)
{
 8001594:	b538      	push	{r3, r4, r5, lr}
    FPU_nERROR enErrorReg;
    enErrorReg = FPU__enSetAccessType(enModuleArg, FPU_enACCESS_FULL);
 8001596:	2103      	movs	r1, #3
{
 8001598:	4605      	mov	r5, r0
    enErrorReg = FPU__enSetAccessType(enModuleArg, FPU_enACCESS_FULL);
 800159a:	f000 f825 	bl	80015e8 <FPU__enSetAccessType>
    if(FPU_enERROR_OK == enErrorReg)
 800159e:	4604      	mov	r4, r0
 80015a0:	b108      	cbz	r0, 80015a6 <FPU__enInit+0x12>
        FPU__vSetHalfPrecision(enModuleArg, FPU_enHALF_PRECISION_IEEE);
        FPU__vSetNAN(enModuleArg, FPU_enNAN_PROPAGATE);
        FPU__vSetRoundingMode(enModuleArg, FPU_enROUNDING_NEAREST);
    }
    return (enErrorReg);
}
 80015a2:	4620      	mov	r0, r4
 80015a4:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = FPU__enSetAutoPreservationState(enModuleArg, FPU_enSTATE_ENA);
 80015a6:	2101      	movs	r1, #1
 80015a8:	4628      	mov	r0, r5
 80015aa:	f000 f835 	bl	8001618 <FPU__enSetAutoPreservationState>
    if(FPU_enERROR_OK == enErrorReg)
 80015ae:	4604      	mov	r4, r0
 80015b0:	2800      	cmp	r0, #0
 80015b2:	d1f6      	bne.n	80015a2 <FPU__enInit+0xe>
        enErrorReg = FPU__enSetLazyPreservationState(enModuleArg, FPU_enSTATE_ENA);
 80015b4:	2101      	movs	r1, #1
 80015b6:	4628      	mov	r0, r5
 80015b8:	f000 f842 	bl	8001640 <FPU__enSetLazyPreservationState>
    if(FPU_enERROR_OK == enErrorReg)
 80015bc:	4604      	mov	r4, r0
 80015be:	2800      	cmp	r0, #0
 80015c0:	d1ef      	bne.n	80015a2 <FPU__enInit+0xe>
        FPU__vSetMode(enModuleArg, FPU_enMODE_DENORMAL);
 80015c2:	4601      	mov	r1, r0
 80015c4:	4628      	mov	r0, r5
 80015c6:	f000 f84b 	bl	8001660 <FPU__vSetMode>
        FPU__vSetHalfPrecision(enModuleArg, FPU_enHALF_PRECISION_IEEE);
 80015ca:	4621      	mov	r1, r4
 80015cc:	4628      	mov	r0, r5
 80015ce:	f000 f833 	bl	8001638 <FPU__vSetHalfPrecision>
        FPU__vSetNAN(enModuleArg, FPU_enNAN_PROPAGATE);
 80015d2:	4621      	mov	r1, r4
 80015d4:	4628      	mov	r0, r5
 80015d6:	f000 f847 	bl	8001668 <FPU__vSetNAN>
        FPU__vSetRoundingMode(enModuleArg, FPU_enROUNDING_NEAREST);
 80015da:	4628      	mov	r0, r5
 80015dc:	4621      	mov	r1, r4
 80015de:	f000 f847 	bl	8001670 <FPU__vSetRoundingMode>
}
 80015e2:	4620      	mov	r0, r4
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bf00      	nop

080015e8 <FPU__enSetAccessType>:
    uxAccessMask = FPU_CPACR_CP11_MASK;
    uxAccessMask <<= FPU_CPACR_R_CP11_BIT - FPU_CPACR_R_CP10_BIT;
    uxAccessMask |= FPU_CPACR_CP10_MASK;

    uxAccess = (UBase_t) enAccessTypeArg;
    uxAccess &= FPU_CPACR_CP11_MASK;
 80015e8:	f001 0303 	and.w	r3, r1, #3
    uxAccess <<= FPU_CPACR_R_CP11_BIT - FPU_CPACR_R_CP10_BIT;
    uxAccess |= uxAccess1;

    stRegister.uxShift = FPU_CPACR_R_CP10_BIT;
    stRegister.uxMask = (UBase_t) uxAccessMask;
    stRegister.uptrAddress = FPU_CPACR_OFFSET;
 80015ec:	f640 5288 	movw	r2, #3464	; 0xd88
{
 80015f0:	b530      	push	{r4, r5, lr}
 80015f2:	b085      	sub	sp, #20
    uxAccess |= uxAccess1;
 80015f4:	ea43 0383 	orr.w	r3, r3, r3, lsl #2
    stRegister.uxShift = FPU_CPACR_R_CP10_BIT;
 80015f8:	2514      	movs	r5, #20
    stRegister.uxMask = (UBase_t) uxAccessMask;
 80015fa:	240f      	movs	r4, #15
    stRegister.uxValue = (UBase_t) uxAccess;
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 80015fc:	4669      	mov	r1, sp
    stRegister.uptrAddress = FPU_CPACR_OFFSET;
 80015fe:	9203      	str	r2, [sp, #12]
    stRegister.uxValue = (UBase_t) uxAccess;
 8001600:	9300      	str	r3, [sp, #0]
    stRegister.uxMask = (UBase_t) uxAccessMask;
 8001602:	e9cd 4501 	strd	r4, r5, [sp, #4]
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 8001606:	f000 fb3d 	bl	8001c84 <FPU__enWriteRegister>
    MCU__vBlocking();
 800160a:	f3bf 8f4f 	dsb	sy
 800160e:	f3bf 8f6f 	isb	sy

    return (enErrorReg);
}
 8001612:	b005      	add	sp, #20
 8001614:	bd30      	pop	{r4, r5, pc}
 8001616:	bf00      	nop

08001618 <FPU__enSetAutoPreservationState>:
#include <xDriver_MCU/Core/FPU/Peripheral/FPU_Peripheral.h>
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

FPU_nERROR FPU__enSetAutoPreservationState(FPU_nMODULE enModuleArg,
                                           FPU_nSTATE enStateArg)
{
 8001618:	b510      	push	{r4, lr}
 800161a:	b084      	sub	sp, #16
    FPU_Register_t stRegister;
    FPU_nERROR enErrorReg;

    stRegister.uxShift = FPU_CCR_R_ASPEN_BIT;
    stRegister.uxMask = FPU_CCR_ASPEN_MASK;
 800161c:	2201      	movs	r2, #1
    stRegister.uptrAddress = FPU_CCR_OFFSET;
 800161e:	f640 7334 	movw	r3, #3892	; 0xf34
    stRegister.uxShift = FPU_CCR_R_ASPEN_BIT;
 8001622:	241f      	movs	r4, #31
    stRegister.uxValue = (UBase_t) enStateArg;
 8001624:	9100      	str	r1, [sp, #0]
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 8001626:	4669      	mov	r1, sp
    stRegister.uxShift = FPU_CCR_R_ASPEN_BIT;
 8001628:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = FPU_CCR_ASPEN_MASK;
 800162a:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = FPU_CCR_OFFSET;
 800162c:	9303      	str	r3, [sp, #12]
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 800162e:	f000 fb29 	bl	8001c84 <FPU__enWriteRegister>

    return (enErrorReg);
}
 8001632:	b004      	add	sp, #16
 8001634:	bd10      	pop	{r4, pc}
 8001636:	bf00      	nop

08001638 <FPU__vSetHalfPrecision>:
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

void FPU__vSetHalfPrecision(FPU_nMODULE enModuleArg,
                                   FPU_nHALF_PRECISION enHalfPrecisionArg)
{
    MCU__vFPUStatusControlMask(FPU_DSCR_R_AHP_MASK, (UBase_t) enHalfPrecisionArg);
 8001638:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800163c:	f000 bafe 	b.w	8001c3c <MCU__vFPUStatusControlMask>

08001640 <FPU__enSetLazyPreservationState>:
#include <xDriver_MCU/Core/FPU/Peripheral/FPU_Peripheral.h>
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

FPU_nERROR FPU__enSetLazyPreservationState(FPU_nMODULE enModuleArg,
                                           FPU_nSTATE enStateArg)
{
 8001640:	b510      	push	{r4, lr}
 8001642:	b084      	sub	sp, #16
    FPU_Register_t stRegister;
    FPU_nERROR enErrorReg;

    stRegister.uxShift = FPU_CCR_R_LSPEN_BIT;
    stRegister.uxMask = FPU_CCR_LSPEN_MASK;
 8001644:	2201      	movs	r2, #1
    stRegister.uptrAddress = FPU_CCR_OFFSET;
 8001646:	f640 7334 	movw	r3, #3892	; 0xf34
    stRegister.uxShift = FPU_CCR_R_LSPEN_BIT;
 800164a:	241e      	movs	r4, #30
    stRegister.uxValue = (UBase_t) enStateArg;
 800164c:	9100      	str	r1, [sp, #0]
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 800164e:	4669      	mov	r1, sp
    stRegister.uxShift = FPU_CCR_R_LSPEN_BIT;
 8001650:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = FPU_CCR_LSPEN_MASK;
 8001652:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = FPU_CCR_OFFSET;
 8001654:	9303      	str	r3, [sp, #12]
    enErrorReg = FPU__enWriteRegister(enModuleArg, &stRegister);
 8001656:	f000 fb15 	bl	8001c84 <FPU__enWriteRegister>

    return (enErrorReg);
}
 800165a:	b004      	add	sp, #16
 800165c:	bd10      	pop	{r4, pc}
 800165e:	bf00      	nop

08001660 <FPU__vSetMode>:
#include <xDriver_MCU/Core/FPU/Peripheral/FPU_Peripheral.h>
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

void FPU__vSetMode(FPU_nMODULE enModuleArg, FPU_nMODE enModeArg)
{
    MCU__vFPUStatusControlMask(FPU_DSCR_R_FZ_MASK, (UBase_t) enModeArg);
 8001660:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001664:	f000 baea 	b.w	8001c3c <MCU__vFPUStatusControlMask>

08001668 <FPU__vSetNAN>:
#include <xDriver_MCU/Core/FPU/Peripheral/FPU_Peripheral.h>
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

void FPU__vSetNAN(FPU_nMODULE enModuleArg, FPU_nNAN enNANArg)
{
    MCU__vFPUStatusControlMask(FPU_DSCR_R_DN_MASK, (UBase_t) enNANArg);
 8001668:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800166c:	f000 bae6 	b.w	8001c3c <MCU__vFPUStatusControlMask>

08001670 <FPU__vSetRoundingMode>:
#include <xDriver_MCU/Core/FPU/Driver/Intrinsics/Primitives/FPU_Primitives.h>

void FPU__vSetRoundingMode(FPU_nMODULE enModuleArg,
                                   FPU_nROUNDING enRoundingArg)
{
    MCU__vFPUStatusControlMask(FPU_DSCR_R_RMODE_MASK, (UBase_t) enRoundingArg);
 8001670:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8001674:	f000 bae2 	b.w	8001c3c <MCU__vFPUStatusControlMask>

08001678 <NVIC__enDisableAllInterrupts>:
#include <xDriver_MCU/Core/NVIC/Driver/xHeader/NVIC_DeInitInterrupts.h>

#include <xDriver_MCU/Core/NVIC/Driver/xHeader/NVIC_Enable.h>

NVIC_nERROR NVIC__enDisableAllInterrupts(NVIC_nMODULE enModuleArg)
{
 8001678:	b538      	push	{r3, r4, r5, lr}

    NVIC_nERROR enErrorReg;
    UBase_t uxVectorNum;

    for(uxVectorNum = 0U; uxVectorNum < (UBase_t) NVIC_enVECTOR_MAX; uxVectorNum++)
 800167a:	2400      	movs	r4, #0
{
 800167c:	4605      	mov	r5, r0
 800167e:	e001      	b.n	8001684 <NVIC__enDisableAllInterrupts+0xc>
    for(uxVectorNum = 0U; uxVectorNum < (UBase_t) NVIC_enVECTOR_MAX; uxVectorNum++)
 8001680:	2c72      	cmp	r4, #114	; 0x72
 8001682:	d006      	beq.n	8001692 <NVIC__enDisableAllInterrupts+0x1a>
    {
        enErrorReg = NVIC__enDisableVector(enModuleArg, (NVIC_nVECTOR) uxVectorNum);
 8001684:	4621      	mov	r1, r4
 8001686:	4628      	mov	r0, r5
    for(uxVectorNum = 0U; uxVectorNum < (UBase_t) NVIC_enVECTOR_MAX; uxVectorNum++)
 8001688:	3401      	adds	r4, #1
        enErrorReg = NVIC__enDisableVector(enModuleArg, (NVIC_nVECTOR) uxVectorNum);
 800168a:	f000 f803 	bl	8001694 <NVIC__enDisableVector>
        if(NVIC_enERROR_OK != enErrorReg)
 800168e:	2800      	cmp	r0, #0
 8001690:	d0f6      	beq.n	8001680 <NVIC__enDisableAllInterrupts+0x8>
            break;
        }
    }

    return (enErrorReg);
}
 8001692:	bd38      	pop	{r3, r4, r5, pc}

08001694 <NVIC__enDisableVector>:
NVIC_nERROR NVIC__enSetVectorState(NVIC_nMODULE enModuleArg, NVIC_nVECTOR enVectorArg, NVIC_nSTATE enStateArg)
{
    NVIC_nERROR enErrorReg;
    if(NVIC_enSTATE_DIS == enStateArg)
    {
        enErrorReg = NVIC__enSetWriteValue(enModuleArg, enVectorArg, NVIC_ICER_OFFSET, (UBase_t) NVIC_enSTATE_ENA);
 8001694:	2301      	movs	r3, #1
 8001696:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800169a:	f000 b801 	b.w	80016a0 <NVIC__enSetWriteValue>
 800169e:	bf00      	nop

080016a0 <NVIC__enSetWriteValue>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/Core/NVIC/Peripheral/NVIC_Peripheral.h>
#include <xDriver_MCU/Core/NVIC/Driver/Intrinsics/Primitives/NVIC_Primitives.h>

NVIC_nERROR NVIC__enSetWriteValue(NVIC_nMODULE enModuleArg, NVIC_nVECTOR enVectorArg, uintptr_t uptrRegisterOffsetArg, UBase_t uxValueArg)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	460c      	mov	r4, r1
 80016a4:	b085      	sub	sp, #20
 80016a6:	4606      	mov	r6, r0
    NVIC_Register_t stRegister;
    NVIC_nERROR enErrorReg;
    UBase_t uxVectorBit;
    UBase_t uxVectorIndex;

    enErrorReg = (NVIC_nERROR) MCU__enCheckParams((UBase_t) enVectorArg, (UBase_t) NVIC_enVECTOR_MAX);
 80016a8:	2172      	movs	r1, #114	; 0x72
 80016aa:	4620      	mov	r0, r4
{
 80016ac:	4617      	mov	r7, r2
 80016ae:	461d      	mov	r5, r3
    enErrorReg = (NVIC_nERROR) MCU__enCheckParams((UBase_t) enVectorArg, (UBase_t) NVIC_enVECTOR_MAX);
 80016b0:	f7ff ff52 	bl	8001558 <MCU__enCheckParams>
    if(NVIC_enERROR_OK == enErrorReg)
 80016b4:	b108      	cbz	r0, 80016ba <NVIC__enSetWriteValue+0x1a>
        stRegister.uptrAddress = (UBase_t) uptrRegisterOffsetArg;
        stRegister.uxValue = uxValueArg;
        enErrorReg = NVIC__enWriteRegister(enModuleArg, &stRegister);
    }
    return (enErrorReg);
}
 80016b6:	b005      	add	sp, #20
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uxVectorIndex >>= 5UL;
 80016ba:	0962      	lsrs	r2, r4, #5
        stRegister.uxMask = 0x1UL;
 80016bc:	2301      	movs	r3, #1
        uxVectorBit %= 32UL;
 80016be:	f004 041f 	and.w	r4, r4, #31
        enErrorReg = NVIC__enWriteRegister(enModuleArg, &stRegister);
 80016c2:	4669      	mov	r1, sp
        uptrRegisterOffsetArg += uxVectorIndex;
 80016c4:	eb07 0282 	add.w	r2, r7, r2, lsl #2
        enErrorReg = NVIC__enWriteRegister(enModuleArg, &stRegister);
 80016c8:	4630      	mov	r0, r6
        stRegister.uxValue = uxValueArg;
 80016ca:	9500      	str	r5, [sp, #0]
        stRegister.uxShift = (UBase_t) uxVectorBit;
 80016cc:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = (UBase_t) uptrRegisterOffsetArg;
 80016ce:	9203      	str	r2, [sp, #12]
        stRegister.uxMask = 0x1UL;
 80016d0:	9301      	str	r3, [sp, #4]
        enErrorReg = NVIC__enWriteRegister(enModuleArg, &stRegister);
 80016d2:	f000 faf3 	bl	8001cbc <NVIC__enWriteRegister>
}
 80016d6:	b005      	add	sp, #20
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	bf00      	nop

080016dc <SCB__enEnableAllExceptions>:
 * 19 jun. 2020     vyldram    1.0         initial Version@endverbatim
 */
#include <xDriver_MCU/Core/SCB/Driver/Exception/SCB_Exception.h>

SCB_nERROR SCB__enEnableAllExceptions(SCB_nMODULE enModuleArg)
{
 80016dc:	b510      	push	{r4, lr}
 80016de:	4604      	mov	r4, r0
    SCB_nERROR enErrorReg;
    enErrorReg = SCB_UsageFault__enEnable(enModuleArg);
 80016e0:	f000 f826 	bl	8001730 <SCB_UsageFault__enEnable>
    if(SCB_enERROR_OK == enErrorReg)
 80016e4:	b100      	cbz	r0, 80016e8 <SCB__enEnableAllExceptions+0xc>
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = SCB_MemoryFault__enEnable(enModuleArg);
    }
    return (enErrorReg);
}
 80016e6:	bd10      	pop	{r4, pc}
        enErrorReg = SCB_BusFault__enEnable(enModuleArg);
 80016e8:	4620      	mov	r0, r4
 80016ea:	f000 fb05 	bl	8001cf8 <SCB_BusFault__enEnable>
    if(SCB_enERROR_OK == enErrorReg)
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d1f9      	bne.n	80016e6 <SCB__enEnableAllExceptions+0xa>
        enErrorReg = SCB_MemoryFault__enEnable(enModuleArg);
 80016f2:	4620      	mov	r0, r4
}
 80016f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = SCB_MemoryFault__enEnable(enModuleArg);
 80016f8:	f000 b802 	b.w	8001700 <SCB_MemoryFault__enEnable>
 80016fc:	0000      	movs	r0, r0
	...

08001700 <SCB_MemoryFault__enEnable>:
    return (enErrorReg);
}


SCB_nERROR SCB_MemoryFault__enEnable(SCB_nMODULE enModuleArg)
{
 8001700:	b500      	push	{lr}
 8001702:	b085      	sub	sp, #20
    stRegister.uxValue = (UBase_t) enStateArg;
 8001704:	2210      	movs	r2, #16
 8001706:	f640 5324 	movw	r3, #3364	; 0xd24
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 800170a:	4669      	mov	r1, sp
    stRegister.uxValue = (UBase_t) enStateArg;
 800170c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001728 <SCB_MemoryFault__enEnable+0x28>
 8001710:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001714:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001718:	f000 f83a 	bl	8001790 <SCB__enWriteRegister>
    SCB_nERROR enErrorReg;
    enErrorReg = SCB_MemoryFault__enSetState(enModuleArg, SCB_enSTATE_ENA);
    return (enErrorReg);
}
 800171c:	b005      	add	sp, #20
 800171e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	00000001 	.word	0x00000001
 800172c:	00000001 	.word	0x00000001

08001730 <SCB_UsageFault__enEnable>:
    return (enErrorReg);
}


SCB_nERROR SCB_UsageFault__enEnable(SCB_nMODULE enModuleArg)
{
 8001730:	b500      	push	{lr}
 8001732:	b085      	sub	sp, #20
    stRegister.uxValue = (UBase_t) enStateArg;
 8001734:	2212      	movs	r2, #18
 8001736:	f640 5324 	movw	r3, #3364	; 0xd24
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 800173a:	4669      	mov	r1, sp
    stRegister.uxValue = (UBase_t) enStateArg;
 800173c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001758 <SCB_UsageFault__enEnable+0x28>
 8001740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001744:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001748:	f000 f822 	bl	8001790 <SCB__enWriteRegister>
    SCB_nERROR enErrorReg;
    enErrorReg = SCB_UsageFault__enSetState(enModuleArg, SCB_enSTATE_ENA);
    return (enErrorReg);
}
 800174c:	b005      	add	sp, #20
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001752:	bf00      	nop
 8001754:	f3af 8000 	nop.w
 8001758:	00000001 	.word	0x00000001
 800175c:	00000001 	.word	0x00000001

08001760 <SCB__enReadRegister>:
SCB_nERROR SCB__enReadRegister(SCB_nMODULE enModuleArg, SCB_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    SCB_nERROR enErrorReg;
    enErrorReg = SCB_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8001760:	b199      	cbz	r1, 800178a <SCB__enReadRegister+0x2a>
{
 8001762:	b538      	push	{r3, r4, r5, lr}
 8001764:	460c      	mov	r4, r1
    {
        enErrorReg = SCB_enERROR_POINTER;
    }
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SCB_enMODULE_MAX);
 8001766:	2101      	movs	r1, #1
 8001768:	4605      	mov	r5, r0
 800176a:	f7ff fef5 	bl	8001558 <MCU__enCheckParams>
    }
    if(SCB_enERROR_OK == enErrorReg)
 800176e:	b958      	cbnz	r0, 8001788 <SCB__enReadRegister+0x28>
    {
        uptrModuleBase = SCB__uptrBlockBaseAddress(enModuleArg);
 8001770:	4628      	mov	r0, r5
 8001772:	f000 f8c3 	bl	80018fc <SCB__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8001776:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = SCB__uptrBlockBaseAddress(enModuleArg);
 8001778:	4602      	mov	r2, r0
        enErrorReg = (SCB_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 800177a:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 800177c:	4413      	add	r3, r2
 800177e:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 8001780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (SCB_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 8001784:	f7ff beee 	b.w	8001564 <MCU__enReadRegister>
}
 8001788:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = SCB_enERROR_POINTER;
 800178a:	2001      	movs	r0, #1
}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <SCB__enWriteRegister>:
{
    uintptr_t uptrModuleBase;
    SCB_nERROR enErrorReg;

    enErrorReg = SCB_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8001790:	b199      	cbz	r1, 80017ba <SCB__enWriteRegister+0x2a>
{
 8001792:	b538      	push	{r3, r4, r5, lr}
 8001794:	460c      	mov	r4, r1
    {
        enErrorReg = SCB_enERROR_POINTER;
    }
    if(SCB_enERROR_OK == enErrorReg)
    {
        enErrorReg = (SCB_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SCB_enMODULE_MAX);
 8001796:	2101      	movs	r1, #1
 8001798:	4605      	mov	r5, r0
 800179a:	f7ff fedd 	bl	8001558 <MCU__enCheckParams>
    }
    if(SCB_enERROR_OK == enErrorReg)
 800179e:	b958      	cbnz	r0, 80017b8 <SCB__enWriteRegister+0x28>
    {
        uptrModuleBase = SCB__uptrBlockBaseAddress(enModuleArg);
 80017a0:	4628      	mov	r0, r5
 80017a2:	f000 f8ab 	bl	80018fc <SCB__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 80017a6:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = SCB__uptrBlockBaseAddress(enModuleArg);
 80017a8:	4602      	mov	r2, r0
        enErrorReg = (SCB_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 80017aa:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 80017ac:	4413      	add	r3, r2
 80017ae:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 80017b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (SCB_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 80017b4:	f000 ba4c 	b.w	8001c50 <MCU__enWriteRegister>
}
 80017b8:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = SCB_enERROR_POINTER;
 80017ba:	2001      	movs	r0, #1
}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop

080017c0 <SCB__enEnableAllTraps>:

    return (enErrorReg);
}

SCB_nERROR SCB__enEnableAllTraps(SCB_nMODULE enModuleArg)
{
 80017c0:	b510      	push	{r4, lr}
    enErrorReg = SCB__enSetDivisionTrapEnableState(enModuleArg, enStateArg);
 80017c2:	2101      	movs	r1, #1
{
 80017c4:	4604      	mov	r4, r0
    enErrorReg = SCB__enSetDivisionTrapEnableState(enModuleArg, enStateArg);
 80017c6:	f000 faaf 	bl	8001d28 <SCB__enSetDivisionTrapEnableState>
    if(SCB_enERROR_OK == enErrorReg)
 80017ca:	b100      	cbz	r0, 80017ce <SCB__enEnableAllTraps+0xe>
    SCB_nERROR enErrorReg;
    enErrorReg = SCB__enSetAllTrapsEnableState(enModuleArg, SCB_enSTATE_ENA);
    return (enErrorReg);
}
 80017cc:	bd10      	pop	{r4, pc}
        enErrorReg = SCB__enSetUnalignTrapEnableState(enModuleArg, enStateArg);
 80017ce:	4620      	mov	r0, r4
 80017d0:	2101      	movs	r1, #1
}
 80017d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = SCB__enSetUnalignTrapEnableState(enModuleArg, enStateArg);
 80017d6:	f000 b801 	b.w	80017dc <SCB__enSetUnalignTrapEnableState>
 80017da:	bf00      	nop

080017dc <SCB__enSetUnalignTrapEnableState>:

#include <xDriver_MCU/Core/SCB/Peripheral/SCB_Peripheral.h>
#include <xDriver_MCU/Core/SCB/Driver/Intrinsics/Primitives/SCB_Primitives.h>

SCB_nERROR SCB__enSetUnalignTrapEnableState(SCB_nMODULE enModuleArg, SCB_nSTATE enStateArg)
{
 80017dc:	b510      	push	{r4, lr}
 80017de:	b084      	sub	sp, #16
    SCB_Register_t stRegister;
    SCB_nERROR enErrorReg;

    stRegister.uxShift = SCB_CCR_R_UNALIGN_TRP_BIT;
    stRegister.uxMask = SCB_CCR_UNALIGN_TRP_MASK;
 80017e0:	2201      	movs	r2, #1
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 80017e2:	f640 5314 	movw	r3, #3348	; 0xd14
    stRegister.uxShift = SCB_CCR_R_UNALIGN_TRP_BIT;
 80017e6:	2403      	movs	r4, #3
    stRegister.uxValue = (UBase_t) enStateArg;
 80017e8:	9100      	str	r1, [sp, #0]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 80017ea:	4669      	mov	r1, sp
    stRegister.uxShift = SCB_CCR_R_UNALIGN_TRP_BIT;
 80017ec:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = SCB_CCR_UNALIGN_TRP_MASK;
 80017ee:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 80017f0:	9303      	str	r3, [sp, #12]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 80017f2:	f7ff ffcd 	bl	8001790 <SCB__enWriteRegister>

    return (enErrorReg);
}
 80017f6:	b004      	add	sp, #16
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	bf00      	nop

080017fc <SCB__enSetPriorityGroup>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/Core/SCB/Peripheral/SCB_Peripheral.h>
#include <xDriver_MCU/Core/SCB/Driver/Intrinsics/Primitives/SCB_Primitives.h>

SCB_nERROR SCB__enSetPriorityGroup(SCB_nMODULE enModuleArg, SCB_nPRIGROUP enGroupArg)
{
 80017fc:	460a      	mov	r2, r1
    SCB_Register_t stRegister;
    UBase_t uxValueReg;
    SCB_nERROR enErrorReg;

    enErrorReg = (SCB_nERROR) MCU__enCheckParams( (UBase_t) enGroupArg, (UBase_t) SCB_enPRIGROUP_MAX);
 80017fe:	2104      	movs	r1, #4
{
 8001800:	b510      	push	{r4, lr}
 8001802:	4604      	mov	r4, r0
 8001804:	b084      	sub	sp, #16
    enErrorReg = (SCB_nERROR) MCU__enCheckParams( (UBase_t) enGroupArg, (UBase_t) SCB_enPRIGROUP_MAX);
 8001806:	4610      	mov	r0, r2
 8001808:	f7ff fea6 	bl	8001558 <MCU__enCheckParams>
    if(SCB_enERROR_OK == enErrorReg)
 800180c:	b108      	cbz	r0, 8001812 <SCB__enSetPriorityGroup+0x16>
        enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
        MCU__vDataSyncBarrier();
    }

    return (enErrorReg);
}
 800180e:	b004      	add	sp, #16
 8001810:	bd10      	pop	{r4, pc}
        stRegister.uxValue = 0U;
 8001812:	2000      	movs	r0, #0
 8001814:	4908      	ldr	r1, [pc, #32]	; (8001838 <SCB__enSetPriorityGroup+0x3c>)
 8001816:	2200      	movs	r2, #0
 8001818:	f640 530c 	movw	r3, #3340	; 0xd0c
 800181c:	e9cd 0100 	strd	r0, r1, [sp]
 8001820:	e9cd 2302 	strd	r2, r3, [sp, #8]
        MCU__vDataSyncBarrier();
 8001824:	f3bf 8f4f 	dsb	sy
        enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001828:	4669      	mov	r1, sp
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff ffb0 	bl	8001790 <SCB__enWriteRegister>
        MCU__vDataSyncBarrier();
 8001830:	f3bf 8f4f 	dsb	sy
}
 8001834:	b004      	add	sp, #16
 8001836:	bd10      	pop	{r4, pc}
 8001838:	ffff0700 	.word	0xffff0700
 800183c:	00000000 	.word	0x00000000

08001840 <SCB__enEnableUnprivilegedSWTrigger>:

    return (enErrorReg);
}

SCB_nERROR SCB__enEnableUnprivilegedSWTrigger(SCB_nMODULE enModuleArg)
{
 8001840:	b500      	push	{lr}
 8001842:	b085      	sub	sp, #20
    stRegister.uxValue = (UBase_t) enStateArg;
 8001844:	2201      	movs	r2, #1
 8001846:	f640 5314 	movw	r3, #3348	; 0xd14
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 800184a:	4669      	mov	r1, sp
    stRegister.uxValue = (UBase_t) enStateArg;
 800184c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001868 <SCB__enEnableUnprivilegedSWTrigger+0x28>
 8001850:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001854:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001858:	f7ff ff9a 	bl	8001790 <SCB__enWriteRegister>
    SCB_nERROR enErrorReg;
    enErrorReg = SCB__enSetUnprivilegedSWTriggerEnableState(enModuleArg, SCB_enSTATE_ENA);
    return (enErrorReg);
}
 800185c:	b005      	add	sp, #20
 800185e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001862:	bf00      	nop
 8001864:	f3af 8000 	nop.w
 8001868:	00000001 	.word	0x00000001
 800186c:	00000001 	.word	0x00000001

08001870 <SCB__enSetStackAligment>:

#include <xDriver_MCU/Core/SCB/Peripheral/SCB_Peripheral.h>
#include <xDriver_MCU/Core/SCB/Driver/Intrinsics/Primitives/SCB_Primitives.h>

SCB_nERROR SCB__enSetStackAligment(SCB_nMODULE enModuleArg, SCB_nALIGN enAlignArg)
{
 8001870:	b510      	push	{r4, lr}
 8001872:	b084      	sub	sp, #16
    SCB_Register_t stRegister;
    SCB_nERROR enErrorReg;

    stRegister.uxShift = SCB_CCR_R_STKALIGN_BIT;
    stRegister.uxMask = SCB_CCR_STKALIGN_MASK;
 8001874:	2201      	movs	r2, #1
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 8001876:	f640 5314 	movw	r3, #3348	; 0xd14
    stRegister.uxShift = SCB_CCR_R_STKALIGN_BIT;
 800187a:	2409      	movs	r4, #9
    stRegister.uxValue = (UBase_t) enAlignArg;
 800187c:	9100      	str	r1, [sp, #0]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 800187e:	4669      	mov	r1, sp
    stRegister.uxShift = SCB_CCR_R_STKALIGN_BIT;
 8001880:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = SCB_CCR_STKALIGN_MASK;
 8001882:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 8001884:	9303      	str	r3, [sp, #12]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001886:	f7ff ff83 	bl	8001790 <SCB__enWriteRegister>

    return (enErrorReg);
}
 800188a:	b004      	add	sp, #16
 800188c:	bd10      	pop	{r4, pc}
 800188e:	bf00      	nop

08001890 <SCB__enSetVectorOffset>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/Core/SCB/Peripheral/SCB_Peripheral.h>
#include <xDriver_MCU/Core/SCB/Driver/Intrinsics/Primitives/SCB_Primitives.h>

SCB_nERROR SCB__enSetVectorOffset(SCB_nMODULE enModuleArg, UBase_t uxOffsetArg)
{
 8001890:	b530      	push	{r4, r5, lr}
    SCB_Register_t stRegister;
    SCB_nERROR enErrorReg;
    MCU_nSTATE enInterruptState;

    stRegister.uxShift = 0UL;
    stRegister.uxMask = SCB_VTOR_R_TBLOFF_MASK;
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <SCB__enSetVectorOffset+0x38>)
{
 8001894:	b085      	sub	sp, #20
    stRegister.uptrAddress = SCB_VTOR_OFFSET;
 8001896:	f640 5308 	movw	r3, #3336	; 0xd08
{
 800189a:	4604      	mov	r4, r0
    stRegister.uxShift = 0UL;
 800189c:	2500      	movs	r5, #0
    stRegister.uxValue = uxOffsetArg;
 800189e:	9100      	str	r1, [sp, #0]
    stRegister.uptrAddress = SCB_VTOR_OFFSET;
 80018a0:	9303      	str	r3, [sp, #12]
    stRegister.uxMask = SCB_VTOR_R_TBLOFF_MASK;
 80018a2:	e9cd 2501 	strd	r2, r5, [sp, #4]
    enInterruptState = MCU__enDisableGlobalInterrupt();
 80018a6:	f7fe fdcb 	bl	8000440 <MCU__enDisableGlobalInterrupt>
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 80018aa:	4669      	mov	r1, sp
    enInterruptState = MCU__enDisableGlobalInterrupt();
 80018ac:	4605      	mov	r5, r0
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 80018ae:	4620      	mov	r0, r4
 80018b0:	f7ff ff6e 	bl	8001790 <SCB__enWriteRegister>
 80018b4:	4604      	mov	r4, r0
    MCU__vDataSyncBarrier();
 80018b6:	f3bf 8f4f 	dsb	sy
    MCU__vSetGlobalInterrupt(enInterruptState);
 80018ba:	4628      	mov	r0, r5
 80018bc:	f7fe fdd0 	bl	8000460 <MCU__vSetGlobalInterrupt>

    return (enErrorReg);
}
 80018c0:	4620      	mov	r0, r4
 80018c2:	b005      	add	sp, #20
 80018c4:	bd30      	pop	{r4, r5, pc}
 80018c6:	bf00      	nop
 80018c8:	fffffc00 	.word	0xfffffc00

080018cc <SCB__enGetVectorOffset>:
{
    SCB_Register_t stRegister;
    SCB_nERROR enErrorReg;

    enErrorReg = SCB_enERROR_OK;
    if(0UL == (uintptr_t) puxOffsetArg)
 80018cc:	b189      	cbz	r1, 80018f2 <SCB__enGetVectorOffset+0x26>
        enErrorReg = SCB_enERROR_POINTER;
    }
    if(SCB_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = 0UL;
        stRegister.uxMask = SCB_VTOR_R_TBLOFF_MASK;
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SCB__enGetVectorOffset+0x2c>)
        stRegister.uptrAddress = SCB_VTOR_OFFSET;
 80018d0:	f640 5308 	movw	r3, #3336	; 0xd08
{
 80018d4:	b510      	push	{r4, lr}
 80018d6:	460c      	mov	r4, r1
 80018d8:	b084      	sub	sp, #16
        stRegister.uxShift = 0UL;
 80018da:	2100      	movs	r1, #0
        stRegister.uptrAddress = SCB_VTOR_OFFSET;
 80018dc:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = SCB_VTOR_R_TBLOFF_MASK;
 80018de:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SCB__enReadRegister(enModuleArg, &stRegister);
 80018e2:	4669      	mov	r1, sp
 80018e4:	f7ff ff3c 	bl	8001760 <SCB__enReadRegister>
    }
    if(SCB_enERROR_OK == enErrorReg)
 80018e8:	b908      	cbnz	r0, 80018ee <SCB__enGetVectorOffset+0x22>
    {
        *puxOffsetArg = stRegister.uxValue;
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
 80018ee:	b004      	add	sp, #16
 80018f0:	bd10      	pop	{r4, pc}
        enErrorReg = SCB_enERROR_POINTER;
 80018f2:	2001      	movs	r0, #1
}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	fffffc00 	.word	0xfffffc00

080018fc <SCB__uptrBlockBaseAddress>:
    uintptr_t SCB_BLOCK_BASE[(UBase_t) SCB_enMODULE_MAX] =
    {
     SCB_BASE
    };
    return (SCB_BLOCK_BASE[(UBase_t) enModuleArg]);
}
 80018fc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	0000      	movs	r0, r0
	...

08001908 <FLASH__enClearPrefetchBuffer>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/FLASH/Driver/Intrinsics/FLASH_Intrinsics.h>
#include <xDriver_MCU/FLASH/Peripheral/FLASH_Peripheral.h>

FLASH_nERROR FLASH__enClearPrefetchBuffer(FLASH_nMODULE enModuleArg)
{
 8001908:	b500      	push	{lr}
 800190a:	b085      	sub	sp, #20
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_CONF_R_CLRTV_BIT;
    stRegister.uxMask = FLASH_CONF_CLRTV_MASK;
    stRegister.uptrAddress = FLASH_CONF_OFFSET;
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
 800190c:	2214      	movs	r2, #20
 800190e:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
 8001912:	4669      	mov	r1, sp
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
 8001914:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001930 <FLASH__enClearPrefetchBuffer+0x28>
 8001918:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800191c:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
 8001920:	f004 fd02 	bl	8006328 <__FLASH__enWriteRegister_veneer>
    return (enErrorReg);
}
 8001924:	b005      	add	sp, #20
 8001926:	f85d fb04 	ldr.w	pc, [sp], #4
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	00000001 	.word	0x00000001
 8001934:	00000001 	.word	0x00000001

08001938 <NMI__vIRQVectorHandler>:
void NMI__vIRQVectorHandler(void)
{
    volatile UBase_t uxRegNMI;
    SCB_pvfIRQSourceHandler_t pvfCallback;

    uxRegNMI = SYSCTL_NMIC_R;
 8001938:	4a4d      	ldr	r2, [pc, #308]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)

    if(0UL == ((UBase_t) SCB_enNMI_ALL & uxRegNMI))
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <NMI__vIRQVectorHandler+0x13c>)
    uxRegNMI = SYSCTL_NMIC_R;
 800193c:	6e51      	ldr	r1, [r2, #100]	; 0x64
{
 800193e:	b510      	push	{r4, lr}
 8001940:	b082      	sub	sp, #8
    uxRegNMI = SYSCTL_NMIC_R;
 8001942:	9101      	str	r1, [sp, #4]
    if(0UL == ((UBase_t) SCB_enNMI_ALL & uxRegNMI))
 8001944:	9801      	ldr	r0, [sp, #4]
 8001946:	4018      	ands	r0, r3
 8001948:	f000 8086 	beq.w	8001a58 <NMI__vIRQVectorHandler+0x120>
        pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_SW);
        pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_SW);
    }
    else
    {
        if(0UL != ((UBase_t) SCB_enNMI_MOSC_FAILURE & uxRegNMI))
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	03db      	lsls	r3, r3, #15
 8001950:	d50f      	bpl.n	8001972 <NMI__vIRQVectorHandler+0x3a>
        {
            do
            {
                SYSCTL_NMIC_R &= ~ (UBase_t) SCB_enNMI_MOSC_FAILURE;
 8001952:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001958:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_MOSC_FAILURE & SYSCTL_NMIC_R));
 800195a:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800195c:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8001960:	d1f7      	bne.n	8001952 <NMI__vIRQVectorHandler+0x1a>

            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_MOSC_FAILURE);
 8001962:	2105      	movs	r1, #5
 8001964:	f000 f8b0 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_MOSC_FAILURE);
 8001968:	2105      	movs	r1, #5
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_MOSC_FAILURE);
 800196a:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_MOSC_FAILURE);
 800196c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001970:	4798      	blx	r3
        }
        if(0UL != ((UBase_t) SCB_enNMI_TAMPER & uxRegNMI))
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	059c      	lsls	r4, r3, #22
 8001976:	d510      	bpl.n	800199a <NMI__vIRQVectorHandler+0x62>
        {
            do
            {
                SYSCTL_NMIC_R &= ~(UBase_t) SCB_enNMI_TAMPER;
 8001978:	4a3d      	ldr	r2, [pc, #244]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)
 800197a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800197c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001980:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_TAMPER & SYSCTL_NMIC_R));
 8001982:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001984:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8001988:	d1f7      	bne.n	800197a <NMI__vIRQVectorHandler+0x42>

            /**
             * TODO: Check if TAMPER requires to be cleared in HIB module
             */
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_TAMPER);
 800198a:	2104      	movs	r1, #4
 800198c:	f000 f89c 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_TAMPER);
 8001990:	2104      	movs	r1, #4
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_TAMPER);
 8001992:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_TAMPER);
 8001994:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001998:	4798      	blx	r3
        }
        if(0UL != ((UBase_t) SCB_enNMI_WDT1 & uxRegNMI))
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	0698      	lsls	r0, r3, #26
 800199e:	d516      	bpl.n	80019ce <NMI__vIRQVectorHandler+0x96>
        {
            do
            {
                SYSCTL_NMIC_R &= ~(UBase_t) SCB_enNMI_WDT1;
 80019a0:	4a33      	ldr	r2, [pc, #204]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)
 80019a2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80019a4:	f023 0320 	bic.w	r3, r3, #32
 80019a8:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_WDT1 & SYSCTL_NMIC_R));
 80019aa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80019ac:	f013 0320 	ands.w	r3, r3, #32
 80019b0:	d1f7      	bne.n	80019a2 <NMI__vIRQVectorHandler+0x6a>

            WDT1_ICR_R = 0UL;
 80019b2:	4a31      	ldr	r2, [pc, #196]	; (8001a78 <NMI__vIRQVectorHandler+0x140>)
 80019b4:	60d3      	str	r3, [r2, #12]
            UBase_t uxRegWrite1;
            do
            {
                uxRegWrite1 = WDT1_CTL_R;
 80019b6:	6893      	ldr	r3, [r2, #8]
                uxRegWrite1 &= WDT_CTL_R_WRC_MASK;
            }while(WDT_CTL_R_WRC_PROGRESS == uxRegWrite1);
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	dafc      	bge.n	80019b6 <NMI__vIRQVectorHandler+0x7e>

            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_WDT1);
 80019bc:	2103      	movs	r1, #3
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f882 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_WDT1);
 80019c4:	2103      	movs	r1, #3
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_WDT1);
 80019c6:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_WDT1);
 80019c8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80019cc:	4798      	blx	r3
        }
        if(0UL != ((UBase_t) SCB_enNMI_WDT0 & uxRegNMI))
 80019ce:	9b01      	ldr	r3, [sp, #4]
 80019d0:	0719      	lsls	r1, r3, #28
 80019d2:	d513      	bpl.n	80019fc <NMI__vIRQVectorHandler+0xc4>
        {
            do
            {
                SYSCTL_NMIC_R &= ~(UBase_t) SCB_enNMI_WDT0;
 80019d4:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)
 80019d6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80019d8:	f023 0308 	bic.w	r3, r3, #8
 80019dc:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_WDT0 & SYSCTL_NMIC_R));
 80019de:	6e50      	ldr	r0, [r2, #100]	; 0x64
 80019e0:	f010 0008 	ands.w	r0, r0, #8
 80019e4:	d1f7      	bne.n	80019d6 <NMI__vIRQVectorHandler+0x9e>

            WDT0_ICR_R = 0UL;
 80019e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_WDT0);
 80019ea:	2102      	movs	r1, #2
            WDT0_ICR_R = 0UL;
 80019ec:	60d8      	str	r0, [r3, #12]
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_WDT0);
 80019ee:	f000 f86b 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_WDT0);
 80019f2:	2102      	movs	r1, #2
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_WDT0);
 80019f4:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_WDT0);
 80019f6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80019fa:	4798      	blx	r3
        }
        if(0UL != ((UBase_t) SCB_enNMI_POWER & uxRegNMI))
 80019fc:	9b01      	ldr	r3, [sp, #4]
 80019fe:	075a      	lsls	r2, r3, #29
 8001a00:	d510      	bpl.n	8001a24 <NMI__vIRQVectorHandler+0xec>
        {
            do
            {
                SYSCTL_NMIC_R &= ~(UBase_t) SCB_enNMI_POWER;
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)
 8001a04:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001a06:	f023 0304 	bic.w	r3, r3, #4
 8001a0a:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_POWER & SYSCTL_NMIC_R));
 8001a0c:	6e50      	ldr	r0, [r2, #100]	; 0x64
 8001a0e:	f010 0004 	ands.w	r0, r0, #4
 8001a12:	d1f7      	bne.n	8001a04 <NMI__vIRQVectorHandler+0xcc>

            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_POWER);
 8001a14:	2101      	movs	r1, #1
 8001a16:	f000 f857 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_POWER);
 8001a1a:	2101      	movs	r1, #1
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_POWER);
 8001a1c:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_POWER);
 8001a1e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001a22:	4798      	blx	r3
        }
        if(0UL != ((UBase_t) SCB_enNMI_EXTERNAL & uxRegNMI))
 8001a24:	9b01      	ldr	r3, [sp, #4]
 8001a26:	07db      	lsls	r3, r3, #31
 8001a28:	d514      	bpl.n	8001a54 <NMI__vIRQVectorHandler+0x11c>
        {
            do
            {
                SYSCTL_NMIC_R &= ~(UBase_t) SCB_enNMI_EXTERNAL;
 8001a2a:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <NMI__vIRQVectorHandler+0x138>)
 8001a2c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001a2e:	f023 0301 	bic.w	r3, r3, #1
 8001a32:	6653      	str	r3, [r2, #100]	; 0x64
            }while(0UL != ((UBase_t) SCB_enNMI_EXTERNAL & SYSCTL_NMIC_R));
 8001a34:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001a36:	f014 0401 	ands.w	r4, r4, #1
 8001a3a:	d1f7      	bne.n	8001a2c <NMI__vIRQVectorHandler+0xf4>

            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_EXTERNAL);
 8001a3c:	4621      	mov	r1, r4
 8001a3e:	4620      	mov	r0, r4
 8001a40:	f000 f842 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_EXTERNAL);
 8001a44:	4621      	mov	r1, r4
            pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_EXTERNAL);
 8001a46:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_EXTERNAL);
 8001a48:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
        }
    }
}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_EXTERNAL);
 8001a52:	4718      	bx	r3
}
 8001a54:	b002      	add	sp, #8
 8001a56:	bd10      	pop	{r4, pc}
        pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_SW);
 8001a58:	2106      	movs	r1, #6
 8001a5a:	f000 f835 	bl	8001ac8 <SCB_NMI__pvfGetIRQSourceHandler>
        pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_SW);
 8001a5e:	2106      	movs	r1, #6
        pvfCallback = SCB_NMI__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enNMI_BIT_SW);
 8001a60:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_EXTERNAL);
 8001a62:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 8001a66:	b002      	add	sp, #8
 8001a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enNMI_BIT_EXTERNAL);
 8001a6c:	4718      	bx	r3
 8001a6e:	bf00      	nop
 8001a70:	400fe000 	.word	0x400fe000
 8001a74:	0001022d 	.word	0x0001022d
 8001a78:	40010000 	.word	0x40010000

08001a7c <PendSV__vIRQVectorHandler>:
#include <xApplication_MCU/Core/SCB/Intrinsics/xHeader/SCB_Dependencies.h>

void PendSV__vIRQVectorHandler(void)
{
    /*context switch, lower priority*/
    while(1UL){}
 8001a7c:	e7fe      	b.n	8001a7c <PendSV__vIRQVectorHandler>
 8001a7e:	bf00      	nop

08001a80 <SCB_BusFault__pvfGetIRQSourceHandler>:


SCB_pvfIRQSourceHandler_t SCB_BusFault__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, SCB_nBUS_BIT enFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_BusFault_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enFaultBit];
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <SCB_BusFault__pvfGetIRQSourceHandler+0xc>)
 8001a82:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    return (pvfFunctionReg);
}
 8001a86:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a8a:	4770      	bx	lr
 8001a8c:	20020000 	.word	0x20020000

08001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>:
}

SCB_pvfIRQSourceHandler_t SCB_UsageFault__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, SCB_nUSAGE_BIT enFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_UsageFault_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enFaultBit];
 8001a90:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001a94:	4b02      	ldr	r3, [pc, #8]	; (8001aa0 <SCB_UsageFault__pvfGetIRQSourceHandler+0x10>)
 8001a96:	4408      	add	r0, r1
    return (pvfFunctionReg);
}
 8001a98:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20020060 	.word	0x20020060

08001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>:
}

SCB_pvfIRQSourceHandler_t SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, SCB_nMEMORY_BIT enFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_MemoryFault_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enFaultBit];
 8001aa4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001aa8:	4b02      	ldr	r3, [pc, #8]	; (8001ab4 <SCB_MemoryFault__pvfGetIRQSourceHandler+0x10>)
 8001aaa:	4408      	add	r0, r1
    return (pvfFunctionReg);
}
 8001aac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20020028 	.word	0x20020028

08001ab8 <SCB_HardFault__pvfGetIRQSourceHandler>:
}

SCB_pvfIRQSourceHandler_t SCB_HardFault__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, SCB_nHARD_BIT enFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_HardFault_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enFaultBit];
 8001ab8:	4b02      	ldr	r3, [pc, #8]	; (8001ac4 <SCB_HardFault__pvfGetIRQSourceHandler+0xc>)
 8001aba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    return (pvfFunctionReg);
}
 8001abe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ac2:	4770      	bx	lr
 8001ac4:	20020020 	.word	0x20020020

08001ac8 <SCB_NMI__pvfGetIRQSourceHandler>:
}

SCB_pvfIRQSourceHandler_t SCB_NMI__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, SCB_nNMI_BIT enFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_NMI_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enFaultBit];
 8001ac8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001acc:	4b02      	ldr	r3, [pc, #8]	; (8001ad8 <SCB_NMI__pvfGetIRQSourceHandler+0x10>)
 8001ace:	4408      	add	r0, r1
    return (pvfFunctionReg);
}
 8001ad0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20020044 	.word	0x20020044

08001adc <SCB_SVCall__pvfGetIRQSourceHandler>:
}

SCB_pvfIRQSourceHandler_t SCB_SVCall__pvfGetIRQSourceHandler(SCB_nMODULE enModuleArg, UBase_t uxFaultBit)
{
    SCB_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = SCB_SVCall_vIRQSourceHandler[(UBase_t) enModuleArg][uxFaultBit];
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <SCB_SVCall__pvfGetIRQSourceHandler+0xc>)
 8001ade:	eb01 2000 	add.w	r0, r1, r0, lsl #8
    return (pvfFunctionReg);
}
 8001ae2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001ae6:	4770      	bx	lr
 8001ae8:	200204b0 	.word	0x200204b0

08001aec <FLASH__enRegisterIRQVectorHandler>:

#include <xApplication_MCU/FLASH/Interrupt/InterruptRoutine/FLASH_InterruptRoutine.h>
#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>

FLASH_nERROR FLASH__enRegisterIRQVectorHandler(FLASH_nMODULE enModuleArg, FLASH_pvfIRQVectorHandler_t pfIrqVectorHandlerArg)
{
 8001aec:	b570      	push	{r4, r5, r6, lr}
 8001aee:	460d      	mov	r5, r1
    };
    SCB_nVECISR enVectorReg;
    FLASH_nERROR enErrorReg;
    FLASH_pvfIRQVectorHandler_t* pvfVectorHandlerReg;

    enErrorReg = (FLASH_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
 8001af0:	2101      	movs	r1, #1
{
 8001af2:	4606      	mov	r6, r0
    enErrorReg = (FLASH_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
 8001af4:	f7ff fd30 	bl	8001558 <MCU__enCheckParams>
    if(FLASH_enERROR_OK == enErrorReg)
 8001af8:	b100      	cbz	r0, 8001afc <FLASH__enRegisterIRQVectorHandler+0x10>
        pvfVectorHandlerReg = FLASH__pvfGetIRQVectorHandlerPointer(enModuleArg);
        enErrorReg = (FLASH_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
    }
    return (enErrorReg);

}
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
        pvfVectorHandlerReg = FLASH__pvfGetIRQVectorHandlerPointer(enModuleArg);
 8001afc:	4604      	mov	r4, r0
 8001afe:	4630      	mov	r0, r6
 8001b00:	f000 f80e 	bl	8001b20 <FLASH__pvfGetIRQVectorHandlerPointer>
        enErrorReg = (FLASH_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8001b04:	462a      	mov	r2, r5
        pvfVectorHandlerReg = FLASH__pvfGetIRQVectorHandlerPointer(enModuleArg);
 8001b06:	4603      	mov	r3, r0
        enErrorReg = (FLASH_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8001b08:	212d      	movs	r1, #45	; 0x2d
 8001b0a:	4620      	mov	r0, r4
}
 8001b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        enErrorReg = (FLASH_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8001b10:	f7ff bc7e 	b.w	8001410 <SCB__enRegisterIRQVectorHandler>

08001b14 <FLASH__pvfGetIRQVectorHandler>:
};

FLASH_pvfIRQVectorHandler_t FLASH__pvfGetIRQVectorHandler(FLASH_nMODULE enModuleArg)
{
    FLASH_pvfIRQVectorHandler_t pvfVectorReg;
    pvfVectorReg = FLASH_pvIRQVectorHandler[(UBase_t) enModuleArg];
 8001b14:	4b01      	ldr	r3, [pc, #4]	; (8001b1c <FLASH__pvfGetIRQVectorHandler+0x8>)
    return (pvfVectorReg);
}
 8001b16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001b1a:	4770      	bx	lr
 8001b1c:	2002007c 	.word	0x2002007c

08001b20 <FLASH__pvfGetIRQVectorHandlerPointer>:

FLASH_pvfIRQVectorHandler_t* FLASH__pvfGetIRQVectorHandlerPointer(FLASH_nMODULE enModuleArg)
{
    FLASH_pvfIRQVectorHandler_t* pvfVectorReg;
    pvfVectorReg = &FLASH_pvIRQVectorHandler[(UBase_t) enModuleArg];
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <FLASH__pvfGetIRQVectorHandlerPointer+0x8>)
    return (pvfVectorReg);
}
 8001b22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b26:	4770      	bx	lr
 8001b28:	2002007c 	.word	0x2002007c

08001b2c <FLASH__vIRQVectorHandler>:
#include <xApplication_MCU/FLASH/Interrupt/InterruptRoutine/xHeader/FLASH_InterruptRoutine_Vector.h>

#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>

void FLASH__vIRQVectorHandler(void)
{
 8001b2c:	b570      	push	{r4, r5, r6, lr}
    UBase_t uxReg;
    FLASH_pvfIRQSourceHandler_t pvfCallback;

    uxReg = FLASH_MISC_R;
 8001b2e:	4e42      	ldr	r6, [pc, #264]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)

    if(0UL == ((UBase_t) FLASH_enINTMASK_ALL & uxReg))
 8001b30:	f642 6107 	movw	r1, #11783	; 0x2e07
    uxReg = FLASH_MISC_R;
 8001b34:	6974      	ldr	r4, [r6, #20]
    if(0UL == ((UBase_t) FLASH_enINTMASK_ALL & uxReg))
 8001b36:	ea14 0501 	ands.w	r5, r4, r1
 8001b3a:	d072      	beq.n	8001c22 <FLASH__vIRQVectorHandler+0xf6>
        pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_SW);
        pvfCallback(FLASH_BASE, (void*) 0UL);
    }
    else
    {
        if((UBase_t) FLASH_enINTMASK_ACCESS & uxReg)
 8001b3c:	07e3      	lsls	r3, r4, #31
 8001b3e:	d463      	bmi.n	8001c08 <FLASH__vIRQVectorHandler+0xdc>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ACCESS;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ACCESS);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ACCESS);
        }
        if((UBase_t) FLASH_enINTMASK_PROGRAMMING & uxReg)
 8001b40:	07a6      	lsls	r6, r4, #30
 8001b42:	d453      	bmi.n	8001bec <FLASH__vIRQVectorHandler+0xc0>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAMMING;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAMMING);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAMMING);
        }
        if((UBase_t) FLASH_enINTMASK_EEPROM & uxReg)
 8001b44:	0765      	lsls	r5, r4, #29
 8001b46:	d443      	bmi.n	8001bd0 <FLASH__vIRQVectorHandler+0xa4>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_EEPROM;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_EEPROM);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_EEPROM);
        }
        if((UBase_t) FLASH_enINTMASK_PUMP_VOL & uxReg)
 8001b48:	05a0      	lsls	r0, r4, #22
 8001b4a:	d432      	bmi.n	8001bb2 <FLASH__vIRQVectorHandler+0x86>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PUMP_VOL;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PUMP_VOL);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PUMP_VOL);
        }
        if((UBase_t) FLASH_enINTMASK_INVALID_DATA & uxReg)
 8001b4c:	0561      	lsls	r1, r4, #21
 8001b4e:	d421      	bmi.n	8001b94 <FLASH__vIRQVectorHandler+0x68>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_INVALID_DATA;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_INVALID_DATA);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_INVALID_DATA);
        }
        if((UBase_t) FLASH_enINTMASK_ERRASE_ERROR & uxReg)
 8001b50:	0522      	lsls	r2, r4, #20
 8001b52:	d410      	bmi.n	8001b76 <FLASH__vIRQVectorHandler+0x4a>
        {
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ERRASE_ERROR;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ERRASE_ERROR);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ERRASE_ERROR);
        }
        if((UBase_t) FLASH_enINTMASK_PROGRAM_ERROR & uxReg)
 8001b54:	04a3      	lsls	r3, r4, #18
 8001b56:	d400      	bmi.n	8001b5a <FLASH__vIRQVectorHandler+0x2e>
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAM_ERROR;
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAM_ERROR);
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAM_ERROR);
        }
    }
}
 8001b58:	bd70      	pop	{r4, r5, r6, pc}
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAM_ERROR;
 8001b5a:	4c37      	ldr	r4, [pc, #220]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAM_ERROR);
 8001b60:	2106      	movs	r1, #6
 8001b62:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAM_ERROR;
 8001b64:	6163      	str	r3, [r4, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAM_ERROR);
 8001b66:	f004 fbe3 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAM_ERROR);
 8001b6a:	2106      	movs	r1, #6
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAM_ERROR);
 8001b6c:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAM_ERROR);
 8001b6e:	4620      	mov	r0, r4
}
 8001b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAM_ERROR);
 8001b74:	4718      	bx	r3
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ERRASE_ERROR;
 8001b76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b7a:	4d2f      	ldr	r5, [pc, #188]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ERRASE_ERROR);
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ERRASE_ERROR;
 8001b80:	616b      	str	r3, [r5, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ERRASE_ERROR);
 8001b82:	f004 fbd5 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ERRASE_ERROR);
 8001b86:	2105      	movs	r1, #5
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ERRASE_ERROR);
 8001b88:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ERRASE_ERROR);
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_PROGRAM_ERROR & uxReg)
 8001b8e:	04a3      	lsls	r3, r4, #18
 8001b90:	d5e2      	bpl.n	8001b58 <FLASH__vIRQVectorHandler+0x2c>
 8001b92:	e7e2      	b.n	8001b5a <FLASH__vIRQVectorHandler+0x2e>
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_INVALID_DATA;
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	4d27      	ldr	r5, [pc, #156]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_INVALID_DATA);
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_INVALID_DATA;
 8001b9e:	616b      	str	r3, [r5, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_INVALID_DATA);
 8001ba0:	f004 fbc6 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_INVALID_DATA);
 8001ba4:	2104      	movs	r1, #4
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_INVALID_DATA);
 8001ba6:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_INVALID_DATA);
 8001ba8:	4628      	mov	r0, r5
 8001baa:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_ERRASE_ERROR & uxReg)
 8001bac:	0522      	lsls	r2, r4, #20
 8001bae:	d5d1      	bpl.n	8001b54 <FLASH__vIRQVectorHandler+0x28>
 8001bb0:	e7e1      	b.n	8001b76 <FLASH__vIRQVectorHandler+0x4a>
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PUMP_VOL;
 8001bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb6:	4d20      	ldr	r5, [pc, #128]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PUMP_VOL);
 8001bb8:	2103      	movs	r1, #3
 8001bba:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PUMP_VOL;
 8001bbc:	616b      	str	r3, [r5, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PUMP_VOL);
 8001bbe:	f004 fbb7 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PUMP_VOL);
 8001bc2:	2103      	movs	r1, #3
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PUMP_VOL);
 8001bc4:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PUMP_VOL);
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_INVALID_DATA & uxReg)
 8001bca:	0561      	lsls	r1, r4, #21
 8001bcc:	d5c0      	bpl.n	8001b50 <FLASH__vIRQVectorHandler+0x24>
 8001bce:	e7e1      	b.n	8001b94 <FLASH__vIRQVectorHandler+0x68>
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_EEPROM;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	4d19      	ldr	r5, [pc, #100]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_EEPROM);
 8001bd4:	2102      	movs	r1, #2
 8001bd6:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_EEPROM;
 8001bd8:	616b      	str	r3, [r5, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_EEPROM);
 8001bda:	f004 fba9 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_EEPROM);
 8001bde:	2102      	movs	r1, #2
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_EEPROM);
 8001be0:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_EEPROM);
 8001be2:	4628      	mov	r0, r5
 8001be4:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_PUMP_VOL & uxReg)
 8001be6:	05a0      	lsls	r0, r4, #22
 8001be8:	d5b0      	bpl.n	8001b4c <FLASH__vIRQVectorHandler+0x20>
 8001bea:	e7e2      	b.n	8001bb2 <FLASH__vIRQVectorHandler+0x86>
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAMMING;
 8001bec:	4d12      	ldr	r5, [pc, #72]	; (8001c38 <FLASH__vIRQVectorHandler+0x10c>)
 8001bee:	2302      	movs	r3, #2
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAMMING);
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	2000      	movs	r0, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_PROGRAMMING;
 8001bf4:	616b      	str	r3, [r5, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAMMING);
 8001bf6:	f004 fb9b 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAMMING);
 8001bfa:	2101      	movs	r1, #1
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_PROGRAMMING);
 8001bfc:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_PROGRAMMING);
 8001bfe:	4628      	mov	r0, r5
 8001c00:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_EEPROM & uxReg)
 8001c02:	0765      	lsls	r5, r4, #29
 8001c04:	d5a0      	bpl.n	8001b48 <FLASH__vIRQVectorHandler+0x1c>
 8001c06:	e7e3      	b.n	8001bd0 <FLASH__vIRQVectorHandler+0xa4>
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ACCESS);
 8001c08:	2100      	movs	r1, #0
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ACCESS;
 8001c0a:	2301      	movs	r3, #1
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ACCESS);
 8001c0c:	4608      	mov	r0, r1
            FLASH_MISC_R = (UBase_t) FLASH_enINTMASK_ACCESS;
 8001c0e:	6173      	str	r3, [r6, #20]
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ACCESS);
 8001c10:	f004 fb8e 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ACCESS);
 8001c14:	2100      	movs	r1, #0
            pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_ACCESS);
 8001c16:	4603      	mov	r3, r0
            pvfCallback(FLASH_BASE, (void*) FLASH_enINT_ACCESS);
 8001c18:	4630      	mov	r0, r6
 8001c1a:	4798      	blx	r3
        if((UBase_t) FLASH_enINTMASK_PROGRAMMING & uxReg)
 8001c1c:	07a6      	lsls	r6, r4, #30
 8001c1e:	d591      	bpl.n	8001b44 <FLASH__vIRQVectorHandler+0x18>
 8001c20:	e7e4      	b.n	8001bec <FLASH__vIRQVectorHandler+0xc0>
        pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_SW);
 8001c22:	2107      	movs	r1, #7
 8001c24:	4628      	mov	r0, r5
 8001c26:	f004 fb83 	bl	8006330 <__FLASH__pvfGetIRQSourceHandler_veneer>
        pvfCallback(FLASH_BASE, (void*) 0UL);
 8001c2a:	4629      	mov	r1, r5
        pvfCallback = FLASH__pvfGetIRQSourceHandler(FLASH_enMODULE_0, FLASH_enINT_SW);
 8001c2c:	4603      	mov	r3, r0
        pvfCallback(FLASH_BASE, (void*) 0UL);
 8001c2e:	4630      	mov	r0, r6
}
 8001c30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(FLASH_BASE, (void*) 0UL);
 8001c34:	4718      	bx	r3
 8001c36:	bf00      	nop
 8001c38:	400fd000 	.word	0x400fd000

08001c3c <MCU__vFPUStatusControlMask>:
    return (uxValueReg);
}

void MCU__vFPUStatusControlMask(UBase_t uxBitMaskArg, UBase_t uxValueArg)
{
    if(0U == uxValueArg)
 8001c3c:	b909      	cbnz	r1, 8001c42 <MCU__vFPUStatusControlMask+0x6>
    {
        MCU__uxClearFPUStatusControlMask(uxBitMaskArg);
 8001c3e:	f7fe bdff 	b.w	8000840 <MCU__uxClearFPUStatusControlMask>
    }
    else
    {
        MCU__uxSetFPUStatusControlMask(uxBitMaskArg);
 8001c42:	f7fe bded 	b.w	8000820 <MCU__uxSetFPUStatusControlMask>
 8001c46:	bf00      	nop

08001c48 <MCU_vIRQSourceHandler_Dummy>:
void MCU_vIRQSourceHandler_Dummy(uintptr_t uptrModuleArg, void* pvArgument)
{
    (void) uptrModuleArg;
    (void) pvArgument;

    while(1UL){}
 8001c48:	e7fe      	b.n	8001c48 <MCU_vIRQSourceHandler_Dummy>
 8001c4a:	bf00      	nop

08001c4c <MCU_vIRQSourceHandler_DummyNonBlocking>:

void MCU_vIRQSourceHandler_DummyNonBlocking(uintptr_t uptrModuleArg, void* pvArgument)
{
    (void) uptrModuleArg;
    (void) pvArgument;
}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop

08001c50 <MCU__enWriteRegister>:
    MCU_nSTATE enStatus;
    MCU_nERROR enErrorReg;
    UBase_t uxRegisterShift;

    enErrorReg = MCU_enERROR_OK;
    if(0U == (uintptr_t) pstRegisterDataArg)
 8001c50:	b1a8      	cbz	r0, 8001c7e <MCU__enWriteRegister+0x2e>
{
 8001c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        enErrorReg = MCU_enERROR_POINTER;
    }
    if(MCU_enERROR_OK == enErrorReg)
    {
        uxRegisterValue = pstRegisterDataArg->uxValue;
        uxRegisterMask = pstRegisterDataArg->uxMask;
 8001c54:	e9d0 4500 	ldrd	r4, r5, [r0]
        uxRegisterShift = pstRegisterDataArg->uxShift;
        uptrRegisterAddress = pstRegisterDataArg->uptrAddress;
 8001c58:	e9d0 7602 	ldrd	r7, r6, [r0, #8]

        uxReg = uxRegisterValue;
        enStatus = MCU__enDisableGlobalInterrupt();
 8001c5c:	f7fe fbf0 	bl	8000440 <MCU__enDisableGlobalInterrupt>
        puxRegisterAddress = (volatile UBase_t*) uptrRegisterAddress;
        if(MCU_MASK_BASE != uxRegisterMask)
 8001c60:	1c6b      	adds	r3, r5, #1
 8001c62:	d007      	beq.n	8001c74 <MCU__enWriteRegister+0x24>
        {
            uxReg = *puxRegisterAddress;
            uxRegisterValue &= uxRegisterMask;
 8001c64:	402c      	ands	r4, r5
            uxReg = *puxRegisterAddress;
 8001c66:	6833      	ldr	r3, [r6, #0]
            if(0U != uxRegisterShift)
 8001c68:	b10f      	cbz	r7, 8001c6e <MCU__enWriteRegister+0x1e>
            {
                uxRegisterValue <<= uxRegisterShift;
 8001c6a:	40bc      	lsls	r4, r7
                uxRegisterMask <<= uxRegisterShift;
 8001c6c:	40bd      	lsls	r5, r7
            }
            uxReg &= ~uxRegisterMask;
 8001c6e:	ea23 0505 	bic.w	r5, r3, r5
            uxReg |= uxRegisterValue;
 8001c72:	432c      	orrs	r4, r5
        }
        *puxRegisterAddress = (UBase_t) uxReg;
 8001c74:	6034      	str	r4, [r6, #0]
        (void) MCU__vSetGlobalInterrupt(enStatus);
 8001c76:	f7fe fbf3 	bl	8000460 <MCU__vSetGlobalInterrupt>
    enErrorReg = MCU_enERROR_OK;
 8001c7a:	2000      	movs	r0, #0
    }

    return (enErrorReg);
}
 8001c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        enErrorReg = MCU_enERROR_POINTER;
 8001c7e:	2001      	movs	r0, #1
}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <FPU__enWriteRegister>:
FPU_nERROR FPU__enWriteRegister(FPU_nMODULE enModuleArg, FPU_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    FPU_nERROR enErrorReg;
    enErrorReg = FPU_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8001c84:	b199      	cbz	r1, 8001cae <FPU__enWriteRegister+0x2a>
{
 8001c86:	b538      	push	{r3, r4, r5, lr}
 8001c88:	460c      	mov	r4, r1
    {
        enErrorReg = FPU_enERROR_POINTER;
    }
    if(FPU_enERROR_OK == enErrorReg)
    {
        enErrorReg = (FPU_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) FPU_enMODULE_MAX);
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	4605      	mov	r5, r0
 8001c8e:	f7ff fc63 	bl	8001558 <MCU__enCheckParams>
    }
    if(FPU_enERROR_OK == enErrorReg)
 8001c92:	b958      	cbnz	r0, 8001cac <FPU__enWriteRegister+0x28>
    {
        uptrModuleBase = FPU__uptrBlockBaseAddress(enModuleArg);
 8001c94:	4628      	mov	r0, r5
 8001c96:	f000 f80d 	bl	8001cb4 <FPU__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8001c9a:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = FPU__uptrBlockBaseAddress(enModuleArg);
 8001c9c:	4602      	mov	r2, r0
        enErrorReg = (FPU_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8001c9e:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8001ca0:	4413      	add	r3, r2
 8001ca2:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 8001ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (FPU_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8001ca8:	f7ff bfd2 	b.w	8001c50 <MCU__enWriteRegister>
}
 8001cac:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = FPU_enERROR_POINTER;
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop

08001cb4 <FPU__uptrBlockBaseAddress>:
    uintptr_t FPU_BLOCK_BASE[(UBase_t) FPU_enMODULE_MAX] =
    {
     FPU_BASE
    };
    return (FPU_BLOCK_BASE[(UBase_t) enModuleArg]);
}
 8001cb4:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop

08001cbc <NVIC__enWriteRegister>:
{
    uintptr_t uptrModuleBase;
    NVIC_nERROR enErrorReg;

    enErrorReg = NVIC_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8001cbc:	b199      	cbz	r1, 8001ce6 <NVIC__enWriteRegister+0x2a>
{
 8001cbe:	b538      	push	{r3, r4, r5, lr}
 8001cc0:	460c      	mov	r4, r1
    {
        enErrorReg = NVIC_enERROR_POINTER;
    }
    if(NVIC_enERROR_OK == enErrorReg)
    {
        enErrorReg = (NVIC_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) NVIC_enMODULE_MAX);
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	f7ff fc47 	bl	8001558 <MCU__enCheckParams>
    }
    if(NVIC_enERROR_OK == enErrorReg)
 8001cca:	b958      	cbnz	r0, 8001ce4 <NVIC__enWriteRegister+0x28>
    {
        uptrModuleBase = NVIC__uptrBlockBaseAddress(enModuleArg);
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 f80d 	bl	8001cec <NVIC__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8001cd2:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = NVIC__uptrBlockBaseAddress(enModuleArg);
 8001cd4:	4602      	mov	r2, r0
        enErrorReg = (NVIC_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8001cd6:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8001cd8:	4413      	add	r3, r2
 8001cda:	60e3      	str	r3, [r4, #12]
    }

    return (enErrorReg);
}
 8001cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (NVIC_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8001ce0:	f7ff bfb6 	b.w	8001c50 <MCU__enWriteRegister>
}
 8001ce4:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = NVIC_enERROR_POINTER;
 8001ce6:	2001      	movs	r0, #1
}
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop

08001cec <NVIC__uptrBlockBaseAddress>:
    uintptr_t NVIC_BLOCK_BASE[(UBase_t) NVIC_enMODULE_MAX] =
    {
     NVIC_BASE
    };
    return (NVIC_BLOCK_BASE[(UBase_t) enModuleArg]);
}
 8001cec:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	0000      	movs	r0, r0
	...

08001cf8 <SCB_BusFault__enEnable>:
    return (enErrorReg);
}


SCB_nERROR SCB_BusFault__enEnable(SCB_nMODULE enModuleArg)
{
 8001cf8:	b500      	push	{lr}
 8001cfa:	b085      	sub	sp, #20
    stRegister.uxValue = (UBase_t) enStateArg;
 8001cfc:	2211      	movs	r2, #17
 8001cfe:	f640 5324 	movw	r3, #3364	; 0xd24
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001d02:	4669      	mov	r1, sp
    stRegister.uxValue = (UBase_t) enStateArg;
 8001d04:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001d20 <SCB_BusFault__enEnable+0x28>
 8001d08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d0c:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001d10:	f7ff fd3e 	bl	8001790 <SCB__enWriteRegister>
    SCB_nERROR enErrorReg;
    enErrorReg = SCB_BusFault__enSetState(enModuleArg, SCB_enSTATE_ENA);
    return (enErrorReg);
}
 8001d14:	b005      	add	sp, #20
 8001d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d1a:	bf00      	nop
 8001d1c:	f3af 8000 	nop.w
 8001d20:	00000001 	.word	0x00000001
 8001d24:	00000001 	.word	0x00000001

08001d28 <SCB__enSetDivisionTrapEnableState>:

#include <xDriver_MCU/Core/SCB/Peripheral/SCB_Peripheral.h>
#include <xDriver_MCU/Core/SCB/Driver/Intrinsics/Primitives/SCB_Primitives.h>

SCB_nERROR SCB__enSetDivisionTrapEnableState(SCB_nMODULE enModuleArg, SCB_nSTATE enStateArg)
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	b084      	sub	sp, #16
    SCB_Register_t stRegister;
    SCB_nERROR enErrorReg;

    stRegister.uxShift = SCB_CCR_R_DIV_0_TRP_BIT;
    stRegister.uxMask = SCB_CCR_DIV_0_TRP_MASK;
 8001d2c:	2201      	movs	r2, #1
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 8001d2e:	f640 5314 	movw	r3, #3348	; 0xd14
    stRegister.uxShift = SCB_CCR_R_DIV_0_TRP_BIT;
 8001d32:	2404      	movs	r4, #4
    stRegister.uxValue = (UBase_t) enStateArg;
 8001d34:	9100      	str	r1, [sp, #0]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001d36:	4669      	mov	r1, sp
    stRegister.uxShift = SCB_CCR_R_DIV_0_TRP_BIT;
 8001d38:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = SCB_CCR_DIV_0_TRP_MASK;
 8001d3a:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = SCB_CCR_OFFSET;
 8001d3c:	9303      	str	r3, [sp, #12]
    enErrorReg = SCB__enWriteRegister(enModuleArg, &stRegister);
 8001d3e:	f7ff fd27 	bl	8001790 <SCB__enWriteRegister>

    return (enErrorReg);
}
 8001d42:	b004      	add	sp, #16
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	bf00      	nop

08001d48 <BusFault__vSendValues>:
 UART_enLINE_SELECT_PRIMARY,
 UART_enLINE_SELECT_PRIMARY,
};

void BusFault__vSendValues(void)
{
 8001d48:	b510      	push	{r4, lr}
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 8001d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
{
 8001d4e:	b086      	sub	sp, #24
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 ff3d 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    UART__enInit(UART_enMODULE_0);
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartBusControl, &enUartBusLineControl, &enUartBusLine, 0UL);
 8001d5c:	4604      	mov	r4, r0
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 8001d5e:	f000 ff37 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    UART__enInit(UART_enMODULE_0);
 8001d62:	4620      	mov	r0, r4
 8001d64:	f000 fdee 	bl	8002944 <UART__enInit>
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
 8001d68:	4913      	ldr	r1, [pc, #76]	; (8001db8 <BusFault__vSendValues+0x70>)
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f000 fbb4 	bl	80024d8 <UART__enSetCustomPrintfHandle>
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartBusControl, &enUartBusLineControl, &enUartBusLine, 0UL);
 8001d70:	4912      	ldr	r1, [pc, #72]	; (8001dbc <BusFault__vSendValues+0x74>)
 8001d72:	4a13      	ldr	r2, [pc, #76]	; (8001dc0 <BusFault__vSendValues+0x78>)
 8001d74:	4623      	mov	r3, r4
 8001d76:	4813      	ldr	r0, [pc, #76]	; (8001dc4 <BusFault__vSendValues+0x7c>)
 8001d78:	9202      	str	r2, [sp, #8]
 8001d7a:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d7e:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8001d82:	e9cd 4000 	strd	r4, r0, [sp]
 8001d86:	4621      	mov	r1, r4
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f000 fbd9 	bl	8002540 <UART__enSetConfig>
    UART__uxCustomPrintf(UART_enMODULE_0, "BUS FAULT exception Detected\n\r"
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <BusFault__vSendValues+0x80>)
 8001d90:	4620      	mov	r0, r4
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <BusFault__vSendValues+0x84>)
 8001d94:	e9d2 3405 	ldrd	r3, r4, [r2, #20]
 8001d98:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001d9c:	69d4      	ldr	r4, [r2, #28]
 8001d9e:	6913      	ldr	r3, [r2, #16]
 8001da0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001da4:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8001da8:	e9cd 3400 	strd	r3, r4, [sp]
 8001dac:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001db0:	f000 fb9e 	bl	80024f0 <UART__uxCustomPrintf>
                    SCB_BusFault_puxContext[3UL],
                    SCB_BusFault_puxContext[4UL],
                    SCB_BusFault_puxContext[7UL],
                    SCB_BusFault_puxContext[5UL],
                    SCB_BusFault_puxContext[6UL]);
}
 8001db4:	b006      	add	sp, #24
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	080031b5 	.word	0x080031b5
 8001dbc:	200208d0 	.word	0x200208d0
 8001dc0:	200200d8 	.word	0x200200d8
 8001dc4:	200200a0 	.word	0x200200a0
 8001dc8:	200208b0 	.word	0x200208b0
 8001dcc:	08007450 	.word	0x08007450

08001dd0 <BusFault__vIRQVectorHandlerCustom>:

void BusFault__vIRQVectorHandlerCustom(uintptr_t uptrModuleArg, void* pvArgument)
{
 8001dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    pstSCBReg = (SCB_t*) uptrModuleArg;
    puxContext = (UBase_t*) pvArgument;

    uxBusAddressValid = 0UL;
    uxBusFault = pstSCBReg->CFSR;
 8001dd4:	f8d0 4d28 	ldr.w	r4, [r0, #3368]	; 0xd28
    uxBusFault >>= 8UL;
 8001dd8:	0a24      	lsrs	r4, r4, #8
    uxBusFault &= (UBase_t) SCB_enBUS_ALL;
    if(0UL == ((UBase_t) SCB_enBUS_ALL & uxBusFault))
 8001dda:	f014 07bf 	ands.w	r7, r4, #191	; 0xbf
 8001dde:	f000 80aa 	beq.w	8001f36 <BusFault__vIRQVectorHandlerCustom+0x166>
        pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_SW);
        pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_SW);
    }
    else
    {
        if((UBase_t) SCB_enBUS_LSPERR & uxBusFault)
 8001de2:	06a2      	lsls	r2, r4, #26
 8001de4:	4605      	mov	r5, r0
 8001de6:	460e      	mov	r6, r1
 8001de8:	f100 8090 	bmi.w	8001f0c <BusFault__vIRQVectorHandlerCustom+0x13c>
            pstSCBReg->CFSR = SCB_CFSR_R_LSPERR_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Bus Fault on FPU Lazy State Preservation \n\r");
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_LSPERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_LSPERR);
        }
        if((UBase_t) SCB_enBUS_STKERR & uxBusFault)
 8001dec:	06e3      	lsls	r3, r4, #27
 8001dee:	d478      	bmi.n	8001ee2 <BusFault__vIRQVectorHandlerCustom+0x112>
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Bus Fault, it occurred on an Exception/IRQ entry\n\r"
                                            "Context Values cannot be valid\n\r");
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_STKERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_STKERR);
        }
        if((UBase_t) SCB_enBUS_UNSTKERR & uxBusFault)
 8001df0:	0727      	lsls	r7, r4, #28
 8001df2:	d462      	bmi.n	8001eba <BusFault__vIRQVectorHandlerCustom+0xea>
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Bus Fault, it occurred on an Exception/IRQ exit\n\r"
                                            "Context Values are related to the previous context\n\r");
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_UNSTKERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_UNSTKERR);
        }
        if((UBase_t) SCB_enBUS_IMPRECISERR & uxBusFault)
 8001df4:	0760      	lsls	r0, r4, #29
 8001df6:	d44a      	bmi.n	8001e8e <BusFault__vIRQVectorHandlerCustom+0xbe>
            UART__uxCustomPrintf(UART_enMODULE_0, "Imprecise Data Bus Fault\n\r"
                            "Fault Address (Possible or near): %X\n\r", uxBusAddressFault);
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IMPRECISERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IMPRECISERR);
        }
        if((UBase_t) SCB_enBUS_BFARVALID & uxBusFault)
 8001df8:	f014 0080 	ands.w	r0, r4, #128	; 0x80
 8001dfc:	d106      	bne.n	8001e0c <BusFault__vIRQVectorHandlerCustom+0x3c>
            pstSCBReg->CFSR = SCB_CFSR_R_BFARVALID_CLEAR;
            uxBusAddressValid = 1UL;
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_BFARVALID);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_BFARVALID);
        }
        if((UBase_t) SCB_enBUS_PRECISERR & uxBusFault)
 8001dfe:	07a1      	lsls	r1, r4, #30
 8001e00:	f100 80a8 	bmi.w	8001f54 <BusFault__vIRQVectorHandlerCustom+0x184>
            uxBusAddressFault = *puxContextOffset;
            UART__uxCustomPrintf(UART_enMODULE_0, "Fault Address (Possible): %X\n\r", uxBusAddressFault);
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_PRECISERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_PRECISERR);
        }
        if((UBase_t) SCB_enBUS_IBUSERR & uxBusFault)
 8001e04:	07e3      	lsls	r3, r4, #31
 8001e06:	d42e      	bmi.n	8001e66 <BusFault__vIRQVectorHandlerCustom+0x96>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IBUSERR);
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IBUSERR);
        }
    }

}
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pstSCBReg->CFSR = SCB_CFSR_R_BFARVALID_CLEAR;
 8001e0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_BFARVALID);
 8001e10:	2106      	movs	r1, #6
 8001e12:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_BFARVALID_CLEAR;
 8001e14:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_BFARVALID);
 8001e18:	f7ff fe32 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_BFARVALID);
 8001e1c:	2106      	movs	r1, #6
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_BFARVALID);
 8001e1e:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_BFARVALID);
 8001e20:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001e24:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_PRECISERR & uxBusFault)
 8001e26:	07a2      	lsls	r2, r4, #30
 8001e28:	d5ec      	bpl.n	8001e04 <BusFault__vIRQVectorHandlerCustom+0x34>
            pstSCBReg->CFSR = SCB_CFSR_R_PRECISERR_CLEAR;
 8001e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
            UART__uxCustomPrintf(UART_enMODULE_0, "Precise Data Bus Fault\n\r");
 8001e2e:	494d      	ldr	r1, [pc, #308]	; (8001f64 <BusFault__vIRQVectorHandlerCustom+0x194>)
 8001e30:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_PRECISERR_CLEAR;
 8001e32:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Precise Data Bus Fault\n\r");
 8001e36:	f000 fb5b 	bl	80024f0 <UART__uxCustomPrintf>
                uxBusAddressFault = pstSCBReg->BFAR;
 8001e3a:	f8d5 2d38 	ldr.w	r2, [r5, #3384]	; 0xd38
                UART__uxCustomPrintf(UART_enMODULE_0, "Fault Address (Exact): %X\n\r", uxBusAddressFault);
 8001e3e:	494a      	ldr	r1, [pc, #296]	; (8001f68 <BusFault__vIRQVectorHandlerCustom+0x198>)
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 fb55 	bl	80024f0 <UART__uxCustomPrintf>
            UART__uxCustomPrintf(UART_enMODULE_0, "Fault Address (Possible): %X\n\r", uxBusAddressFault);
 8001e46:	69b2      	ldr	r2, [r6, #24]
 8001e48:	2000      	movs	r0, #0
 8001e4a:	4948      	ldr	r1, [pc, #288]	; (8001f6c <BusFault__vIRQVectorHandlerCustom+0x19c>)
 8001e4c:	f000 fb50 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_PRECISERR);
 8001e50:	2101      	movs	r1, #1
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff fe14 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_PRECISERR);
 8001e58:	2101      	movs	r1, #1
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_PRECISERR);
 8001e5a:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_PRECISERR);
 8001e5c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001e60:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_IBUSERR & uxBusFault)
 8001e62:	07e3      	lsls	r3, r4, #31
 8001e64:	d5d0      	bpl.n	8001e08 <BusFault__vIRQVectorHandlerCustom+0x38>
            pstSCBReg->CFSR = SCB_CFSR_R_IBUSERR_CLEAR;
 8001e66:	f44f 7380 	mov.w	r3, #256	; 0x100
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Bus Access Fault Address: %X\n\r", uxBusAddressFault);
 8001e6a:	4941      	ldr	r1, [pc, #260]	; (8001f70 <BusFault__vIRQVectorHandlerCustom+0x1a0>)
 8001e6c:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_IBUSERR_CLEAR;
 8001e6e:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Bus Access Fault Address: %X\n\r", uxBusAddressFault);
 8001e72:	69b2      	ldr	r2, [r6, #24]
 8001e74:	f000 fb3c 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IBUSERR);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	f7ff fe00 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IBUSERR);
 8001e80:	2100      	movs	r1, #0
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IBUSERR);
 8001e82:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IBUSERR);
 8001e84:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 8001e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IBUSERR);
 8001e8c:	4718      	bx	r3
            pstSCBReg->CFSR = SCB_CFSR_R_IMPRECISERR_CLEAR;
 8001e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
            UART__uxCustomPrintf(UART_enMODULE_0, "Imprecise Data Bus Fault\n\r"
 8001e92:	4938      	ldr	r1, [pc, #224]	; (8001f74 <BusFault__vIRQVectorHandlerCustom+0x1a4>)
 8001e94:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_IMPRECISERR_CLEAR;
 8001e96:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Imprecise Data Bus Fault\n\r"
 8001e9a:	69b2      	ldr	r2, [r6, #24]
 8001e9c:	f000 fb28 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IMPRECISERR);
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fdec 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IMPRECISERR);
 8001ea8:	2102      	movs	r1, #2
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_IMPRECISERR);
 8001eaa:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_IMPRECISERR);
 8001eac:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001eb0:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_BFARVALID & uxBusFault)
 8001eb2:	f014 0080 	ands.w	r0, r4, #128	; 0x80
 8001eb6:	d0a2      	beq.n	8001dfe <BusFault__vIRQVectorHandlerCustom+0x2e>
 8001eb8:	e7a8      	b.n	8001e0c <BusFault__vIRQVectorHandlerCustom+0x3c>
            pstSCBReg->CFSR = SCB_CFSR_R_UNSTKERR_CLEAR;
 8001eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Bus Fault, it occurred on an Exception/IRQ exit\n\r"
 8001ebe:	492e      	ldr	r1, [pc, #184]	; (8001f78 <BusFault__vIRQVectorHandlerCustom+0x1a8>)
 8001ec0:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_UNSTKERR_CLEAR;
 8001ec2:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Bus Fault, it occurred on an Exception/IRQ exit\n\r"
 8001ec6:	f000 fb13 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_UNSTKERR);
 8001eca:	2103      	movs	r1, #3
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff fdd7 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_UNSTKERR);
 8001ed2:	2103      	movs	r1, #3
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_UNSTKERR);
 8001ed4:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_UNSTKERR);
 8001ed6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001eda:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_IMPRECISERR & uxBusFault)
 8001edc:	0760      	lsls	r0, r4, #29
 8001ede:	d58b      	bpl.n	8001df8 <BusFault__vIRQVectorHandlerCustom+0x28>
 8001ee0:	e7d5      	b.n	8001e8e <BusFault__vIRQVectorHandlerCustom+0xbe>
            pstSCBReg->CFSR = SCB_CFSR_R_STKERR_CLEAR;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Bus Fault, it occurred on an Exception/IRQ entry\n\r"
 8001ee6:	4925      	ldr	r1, [pc, #148]	; (8001f7c <BusFault__vIRQVectorHandlerCustom+0x1ac>)
 8001ee8:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_STKERR_CLEAR;
 8001eea:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Bus Fault, it occurred on an Exception/IRQ entry\n\r"
 8001eee:	f000 faff 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_STKERR);
 8001ef2:	2104      	movs	r1, #4
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fdc3 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_STKERR);
 8001efa:	2104      	movs	r1, #4
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_STKERR);
 8001efc:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_STKERR);
 8001efe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001f02:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_UNSTKERR & uxBusFault)
 8001f04:	0727      	lsls	r7, r4, #28
 8001f06:	f57f af75 	bpl.w	8001df4 <BusFault__vIRQVectorHandlerCustom+0x24>
 8001f0a:	e7d6      	b.n	8001eba <BusFault__vIRQVectorHandlerCustom+0xea>
            pstSCBReg->CFSR = SCB_CFSR_R_LSPERR_CLEAR;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
            UART__uxCustomPrintf(UART_enMODULE_0, "Bus Fault on FPU Lazy State Preservation \n\r");
 8001f10:	491b      	ldr	r1, [pc, #108]	; (8001f80 <BusFault__vIRQVectorHandlerCustom+0x1b0>)
            pstSCBReg->CFSR = SCB_CFSR_R_LSPERR_CLEAR;
 8001f12:	f8c0 3d28 	str.w	r3, [r0, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Bus Fault on FPU Lazy State Preservation \n\r");
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 faea 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_LSPERR);
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7ff fdae 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_LSPERR);
 8001f24:	2105      	movs	r1, #5
            pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_LSPERR);
 8001f26:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_LSPERR);
 8001f28:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8001f2c:	4798      	blx	r3
        if((UBase_t) SCB_enBUS_STKERR & uxBusFault)
 8001f2e:	06e3      	lsls	r3, r4, #27
 8001f30:	f57f af5e 	bpl.w	8001df0 <BusFault__vIRQVectorHandlerCustom+0x20>
 8001f34:	e7d5      	b.n	8001ee2 <BusFault__vIRQVectorHandlerCustom+0x112>
        UART__uxCustomPrintf(UART_enMODULE_0, "Bus Fault Exception triggered by Software \n\r");
 8001f36:	4913      	ldr	r1, [pc, #76]	; (8001f84 <BusFault__vIRQVectorHandlerCustom+0x1b4>)
 8001f38:	4638      	mov	r0, r7
 8001f3a:	f000 fad9 	bl	80024f0 <UART__uxCustomPrintf>
        pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_SW);
 8001f3e:	2107      	movs	r1, #7
 8001f40:	4638      	mov	r0, r7
 8001f42:	f7ff fd9d 	bl	8001a80 <SCB_BusFault__pvfGetIRQSourceHandler>
        pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_SW);
 8001f46:	2107      	movs	r1, #7
        pvfCallback = SCB_BusFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enBUS_BIT_SW);
 8001f48:	4603      	mov	r3, r0
        pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_SW);
 8001f4a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 8001f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        pvfCallback(SCB_BASE, (void*) SCB_enBUS_BIT_SW);
 8001f52:	4718      	bx	r3
            pstSCBReg->CFSR = SCB_CFSR_R_PRECISERR_CLEAR;
 8001f54:	f44f 7300 	mov.w	r3, #512	; 0x200
            UART__uxCustomPrintf(UART_enMODULE_0, "Precise Data Bus Fault\n\r");
 8001f58:	4902      	ldr	r1, [pc, #8]	; (8001f64 <BusFault__vIRQVectorHandlerCustom+0x194>)
            pstSCBReg->CFSR = SCB_CFSR_R_PRECISERR_CLEAR;
 8001f5a:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Precise Data Bus Fault\n\r");
 8001f5e:	f000 fac7 	bl	80024f0 <UART__uxCustomPrintf>
            if(1UL == uxBusAddressValid)
 8001f62:	e770      	b.n	8001e46 <BusFault__vIRQVectorHandlerCustom+0x76>
 8001f64:	08007638 	.word	0x08007638
 8001f68:	08007654 	.word	0x08007654
 8001f6c:	08007670 	.word	0x08007670
 8001f70:	08007690 	.word	0x08007690
 8001f74:	080075f4 	.word	0x080075f4
 8001f78:	08007580 	.word	0x08007580
 8001f7c:	08007524 	.word	0x08007524
 8001f80:	080074f8 	.word	0x080074f8
 8001f84:	080074c8 	.word	0x080074c8

08001f88 <HardFault__vSendValues>:
 UART_enLINE_SELECT_PRIMARY,
};


void HardFault__vSendValues(void)
{
 8001f88:	b510      	push	{r4, lr}
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 8001f8a:	f44f 7100 	mov.w	r1, #512	; 0x200
{
 8001f8e:	b086      	sub	sp, #24
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f000 fe1d 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    UART__enInit(UART_enMODULE_0);
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartHardControl, &enUartHardLineControl, &enUartHardLine, 0UL);
 8001f9c:	4604      	mov	r4, r0
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 8001f9e:	f000 fe17 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    UART__enInit(UART_enMODULE_0);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 fcce 	bl	8002944 <UART__enInit>
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
 8001fa8:	4913      	ldr	r1, [pc, #76]	; (8001ff8 <HardFault__vSendValues+0x70>)
 8001faa:	4620      	mov	r0, r4
 8001fac:	f000 fa94 	bl	80024d8 <UART__enSetCustomPrintfHandle>
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartHardControl, &enUartHardLineControl, &enUartHardLine, 0UL);
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HardFault__vSendValues+0x74>)
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <HardFault__vSendValues+0x78>)
 8001fb4:	4623      	mov	r3, r4
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <HardFault__vSendValues+0x7c>)
 8001fb8:	9202      	str	r2, [sp, #8]
 8001fba:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001fbe:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8001fc2:	e9cd 4000 	strd	r4, r0, [sp]
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	4620      	mov	r0, r4
 8001fca:	f000 fab9 	bl	8002540 <UART__enSetConfig>

    UART__uxCustomPrintf(UART_enMODULE_0, "HARD FAULT exception Detected\n\r"
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <HardFault__vSendValues+0x80>)
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	490e      	ldr	r1, [pc, #56]	; (800200c <HardFault__vSendValues+0x84>)
 8001fd4:	e9d2 3405 	ldrd	r3, r4, [r2, #20]
 8001fd8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8001fdc:	69d4      	ldr	r4, [r2, #28]
 8001fde:	6913      	ldr	r3, [r2, #16]
 8001fe0:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001fe4:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8001fe8:	e9cd 3400 	strd	r3, r4, [sp]
 8001fec:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001ff0:	f000 fa7e 	bl	80024f0 <UART__uxCustomPrintf>
                    SCB_HardFault_puxContext[3UL],
                    SCB_HardFault_puxContext[4UL],
                    SCB_HardFault_puxContext[7UL],
                    SCB_HardFault_puxContext[5UL],
                    SCB_HardFault_puxContext[6UL]);
}
 8001ff4:	b006      	add	sp, #24
 8001ff6:	bd10      	pop	{r4, pc}
 8001ff8:	080031b5 	.word	0x080031b5
 8001ffc:	20020910 	.word	0x20020910
 8002000:	20020128 	.word	0x20020128
 8002004:	200200f0 	.word	0x200200f0
 8002008:	200208f0 	.word	0x200208f0
 800200c:	080076bc 	.word	0x080076bc

08002010 <HardFault__vIRQVectorHandlerCustom>:

void HardFault__vIRQVectorHandlerCustom(uintptr_t uptrModuleArg, void* pvArgument)
{
 8002010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    UBase_t uxHardMemoryFault;

    pstSCBReg = (SCB_t*) uptrModuleArg;
    puxContext = (UBase_t*) pvArgument;

    uxFaultType = SCB_HFSR_R;
 8002014:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
 8002018:	f8d7 4d2c 	ldr.w	r4, [r7, #3372]	; 0xd2c

    if(0UL != uxFaultType)
 800201c:	b384      	cbz	r4, 8002080 <HardFault__vIRQVectorHandlerCustom+0x70>
    {
        /*Bus, Usage or Memory fault */
        if(SCB_HFSR_R_FORCED_MASK & uxFaultType)
 800201e:	0062      	lsls	r2, r4, #1
 8002020:	4606      	mov	r6, r0
 8002022:	460d      	mov	r5, r1
 8002024:	d515      	bpl.n	8002052 <HardFault__vIRQVectorHandlerCustom+0x42>
        {
            pstSCBReg->HFSR = SCB_HFSR_R_FORCED_MASK;
 8002026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800202a:	f8c0 3d2c 	str.w	r3, [r0, #3372]	; 0xd2c
            uxHardFault = pstSCBReg->CFSR;
 800202e:	f8d0 3d28 	ldr.w	r3, [r0, #3368]	; 0xd28
            if(((UBase_t)SCB_enMEMORY_ALL << 0UL) & uxHardFault)
 8002032:	f013 02bb 	ands.w	r2, r3, #187	; 0xbb
 8002036:	d13a      	bne.n	80020ae <HardFault__vIRQVectorHandlerCustom+0x9e>
            {
                UART__uxCustomPrintf(UART_enMODULE_0,"Memory Fault was harcoded \n\r");
                MemoryFault__vIRQVectorHandlerCustom(SCB_BASE, (void*) pvArgument);
            }
            else if(((UBase_t)SCB_enBUS_ALL << 8UL) & uxHardFault)
 8002038:	f413 403f 	ands.w	r0, r3, #48896	; 0xbf00
 800203c:	d12e      	bne.n	800209c <HardFault__vIRQVectorHandlerCustom+0x8c>
            {
                UART__uxCustomPrintf(UART_enMODULE_0,"Bus Fault was harcoded \n\r");
                BusFault__vIRQVectorHandlerCustom(SCB_BASE, (void*) pvArgument);
            }
            else if(((UBase_t)SCB_enUSAGE_ALL << 16UL) & uxHardFault)
 800203e:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HardFault__vIRQVectorHandlerCustom+0xc0>)
 8002040:	4013      	ands	r3, r2
 8002042:	d03f      	beq.n	80020c4 <HardFault__vIRQVectorHandlerCustom+0xb4>
            {
                UART__uxCustomPrintf(UART_enMODULE_0,"Usage Fault was harcoded \n\r");
 8002044:	4923      	ldr	r1, [pc, #140]	; (80020d4 <HardFault__vIRQVectorHandlerCustom+0xc4>)
 8002046:	f000 fa53 	bl	80024f0 <UART__uxCustomPrintf>
                UsageFault__vIRQVectorHandlerCustom(SCB_BASE, (void*) pvArgument);
 800204a:	4629      	mov	r1, r5
 800204c:	4638      	mov	r0, r7
 800204e:	f000 f98f 	bl	8002370 <UsageFault__vIRQVectorHandlerCustom>
                UART__uxCustomPrintf(UART_enMODULE_0,"Undefined Bus, Memory or Usage exception Detected\n\r");
            }

        }
        /*Hard fault*/
        if(SCB_HFSR_R_VECTTBL_MASK & uxFaultType)
 8002052:	07a3      	lsls	r3, r4, #30
 8002054:	d401      	bmi.n	800205a <HardFault__vIRQVectorHandlerCustom+0x4a>
    {
        UART__uxCustomPrintf(UART_enMODULE_0, "Hard Fault Exception triggered by Software \n\r");
        pvfCallback = SCB_HardFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enHARD_BIT_SW);
        pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_SW);
    }
}
 8002056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pstSCBReg->HFSR = SCB_HFSR_R_VECTTBL_MASK;
 800205a:	2302      	movs	r3, #2
            UART__uxCustomPrintf(UART_enMODULE_0,"Vector Table Read Fault, Fault Address: %X\n\r", uxHardMemoryFault);
 800205c:	491e      	ldr	r1, [pc, #120]	; (80020d8 <HardFault__vIRQVectorHandlerCustom+0xc8>)
 800205e:	2000      	movs	r0, #0
            pstSCBReg->HFSR = SCB_HFSR_R_VECTTBL_MASK;
 8002060:	f8c6 3d2c 	str.w	r3, [r6, #3372]	; 0xd2c
            UART__uxCustomPrintf(UART_enMODULE_0,"Vector Table Read Fault, Fault Address: %X\n\r", uxHardMemoryFault);
 8002064:	69aa      	ldr	r2, [r5, #24]
 8002066:	f000 fa43 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_HardFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enHARD_BIT_VECT);
 800206a:	2100      	movs	r1, #0
 800206c:	4608      	mov	r0, r1
 800206e:	f7ff fd23 	bl	8001ab8 <SCB_HardFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_VECT);
 8002072:	2100      	movs	r1, #0
            pvfCallback = SCB_HardFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enHARD_BIT_VECT);
 8002074:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_VECT);
 8002076:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 800207a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_VECT);
 800207e:	4718      	bx	r3
        UART__uxCustomPrintf(UART_enMODULE_0, "Hard Fault Exception triggered by Software \n\r");
 8002080:	4916      	ldr	r1, [pc, #88]	; (80020dc <HardFault__vIRQVectorHandlerCustom+0xcc>)
 8002082:	4620      	mov	r0, r4
 8002084:	f000 fa34 	bl	80024f0 <UART__uxCustomPrintf>
        pvfCallback = SCB_HardFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enHARD_BIT_SW);
 8002088:	2101      	movs	r1, #1
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff fd14 	bl	8001ab8 <SCB_HardFault__pvfGetIRQSourceHandler>
        pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_SW);
 8002090:	2101      	movs	r1, #1
        pvfCallback = SCB_HardFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enHARD_BIT_SW);
 8002092:	4603      	mov	r3, r0
        pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_SW);
 8002094:	4638      	mov	r0, r7
}
 8002096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        pvfCallback(SCB_BASE, (void*) SCB_enHARD_BIT_SW);
 800209a:	4718      	bx	r3
                UART__uxCustomPrintf(UART_enMODULE_0,"Bus Fault was harcoded \n\r");
 800209c:	4610      	mov	r0, r2
 800209e:	4910      	ldr	r1, [pc, #64]	; (80020e0 <HardFault__vIRQVectorHandlerCustom+0xd0>)
 80020a0:	f000 fa26 	bl	80024f0 <UART__uxCustomPrintf>
                BusFault__vIRQVectorHandlerCustom(SCB_BASE, (void*) pvArgument);
 80020a4:	4629      	mov	r1, r5
 80020a6:	4638      	mov	r0, r7
 80020a8:	f7ff fe92 	bl	8001dd0 <BusFault__vIRQVectorHandlerCustom>
 80020ac:	e7d1      	b.n	8002052 <HardFault__vIRQVectorHandlerCustom+0x42>
                UART__uxCustomPrintf(UART_enMODULE_0,"Memory Fault was harcoded \n\r");
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <HardFault__vIRQVectorHandlerCustom+0xd4>)
 80020b0:	2000      	movs	r0, #0
 80020b2:	f000 fa1d 	bl	80024f0 <UART__uxCustomPrintf>
                MemoryFault__vIRQVectorHandlerCustom(SCB_BASE, (void*) pvArgument);
 80020b6:	4629      	mov	r1, r5
 80020b8:	4638      	mov	r0, r7
 80020ba:	f000 f85b 	bl	8002174 <MemoryFault__vIRQVectorHandlerCustom>
        if(SCB_HFSR_R_VECTTBL_MASK & uxFaultType)
 80020be:	07a3      	lsls	r3, r4, #30
 80020c0:	d5c9      	bpl.n	8002056 <HardFault__vIRQVectorHandlerCustom+0x46>
 80020c2:	e7ca      	b.n	800205a <HardFault__vIRQVectorHandlerCustom+0x4a>
                UART__uxCustomPrintf(UART_enMODULE_0,"Undefined Bus, Memory or Usage exception Detected\n\r");
 80020c4:	4908      	ldr	r1, [pc, #32]	; (80020e8 <HardFault__vIRQVectorHandlerCustom+0xd8>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fa12 	bl	80024f0 <UART__uxCustomPrintf>
 80020cc:	e7c1      	b.n	8002052 <HardFault__vIRQVectorHandlerCustom+0x42>
 80020ce:	bf00      	nop
 80020d0:	030f0000 	.word	0x030f0000
 80020d4:	08007770 	.word	0x08007770
 80020d8:	080077c0 	.word	0x080077c0
 80020dc:	080077f0 	.word	0x080077f0
 80020e0:	08007754 	.word	0x08007754
 80020e4:	08007734 	.word	0x08007734
 80020e8:	0800778c 	.word	0x0800778c

080020ec <MemoryFault__vSendValues>:
 UART_enLINE_SELECT_PRIMARY,
 UART_enLINE_SELECT_PRIMARY,
};

void MemoryFault__vSendValues(void)
{
 80020ec:	b510      	push	{r4, lr}
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 80020ee:	f44f 7100 	mov.w	r1, #512	; 0x200
{
 80020f2:	b086      	sub	sp, #24
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 fd6b 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    UART__enInit(UART_enMODULE_0);
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartMemoryControl, &enUartMemoryLineControl, &enUartMemoryLine, 0UL);
 8002100:	4604      	mov	r4, r0
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 8002102:	f000 fd65 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    UART__enInit(UART_enMODULE_0);
 8002106:	4620      	mov	r0, r4
 8002108:	f000 fc1c 	bl	8002944 <UART__enInit>
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
 800210c:	4913      	ldr	r1, [pc, #76]	; (800215c <MemoryFault__vSendValues+0x70>)
 800210e:	4620      	mov	r0, r4
 8002110:	f000 f9e2 	bl	80024d8 <UART__enSetCustomPrintfHandle>
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartMemoryControl, &enUartMemoryLineControl, &enUartMemoryLine, 0UL);
 8002114:	4912      	ldr	r1, [pc, #72]	; (8002160 <MemoryFault__vSendValues+0x74>)
 8002116:	4a13      	ldr	r2, [pc, #76]	; (8002164 <MemoryFault__vSendValues+0x78>)
 8002118:	4623      	mov	r3, r4
 800211a:	4813      	ldr	r0, [pc, #76]	; (8002168 <MemoryFault__vSendValues+0x7c>)
 800211c:	9202      	str	r2, [sp, #8]
 800211e:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002122:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8002126:	e9cd 4000 	strd	r4, r0, [sp]
 800212a:	4621      	mov	r1, r4
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fa07 	bl	8002540 <UART__enSetConfig>

    UART__uxCustomPrintf(UART_enMODULE_0, "MEMORY FAULT exception Detected\n\r"
 8002132:	4a0e      	ldr	r2, [pc, #56]	; (800216c <MemoryFault__vSendValues+0x80>)
 8002134:	4620      	mov	r0, r4
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <MemoryFault__vSendValues+0x84>)
 8002138:	e9d2 3405 	ldrd	r3, r4, [r2, #20]
 800213c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002140:	69d4      	ldr	r4, [r2, #28]
 8002142:	6913      	ldr	r3, [r2, #16]
 8002144:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002148:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800214c:	e9cd 3400 	strd	r3, r4, [sp]
 8002150:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002154:	f000 f9cc 	bl	80024f0 <UART__uxCustomPrintf>
                    SCB_MemoryFault_puxContext[3UL],
                    SCB_MemoryFault_puxContext[4UL],
                    SCB_MemoryFault_puxContext[7UL],
                    SCB_MemoryFault_puxContext[5UL],
                    SCB_MemoryFault_puxContext[6UL]);
}
 8002158:	b006      	add	sp, #24
 800215a:	bd10      	pop	{r4, pc}
 800215c:	080031b5 	.word	0x080031b5
 8002160:	20020950 	.word	0x20020950
 8002164:	20020178 	.word	0x20020178
 8002168:	20020140 	.word	0x20020140
 800216c:	20020930 	.word	0x20020930
 8002170:	08007820 	.word	0x08007820

08002174 <MemoryFault__vIRQVectorHandlerCustom>:

void MemoryFault__vIRQVectorHandlerCustom(uintptr_t uptrModuleArg, void* pvArgument)
{
 8002174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    pstSCBReg = (SCB_t*) uptrModuleArg;
    puxContext = (UBase_t*) pvArgument;

    uxMemoryAddressValid = 0UL;
    uxMemoryFault = pstSCBReg->CFSR;
 8002178:	f8d0 4d28 	ldr.w	r4, [r0, #3368]	; 0xd28
    uxMemoryFault >>= 0UL;
    uxMemoryFault &= (UBase_t) SCB_enMEMORY_ALL;
    if(0UL == ((UBase_t) SCB_enMEMORY_ALL & uxMemoryFault))
 800217c:	f014 07bb 	ands.w	r7, r4, #187	; 0xbb
 8002180:	f000 808b 	beq.w	800229a <MemoryFault__vIRQVectorHandlerCustom+0x126>
        pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_SW);
        pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_SW);
    }
    else
    {
        if((UBase_t) SCB_enMEMORY_MLSPERR & uxMemoryFault)
 8002184:	06a3      	lsls	r3, r4, #26
 8002186:	4605      	mov	r5, r0
 8002188:	460e      	mov	r6, r1
 800218a:	d472      	bmi.n	8002272 <MemoryFault__vIRQVectorHandlerCustom+0xfe>
            pstSCBReg->CFSR = SCB_CFSR_R_MLSPERR_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Memory Fault on FPU Lazy State Preservation \n\r");
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MLSPERR);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MLSPERR);
        }
        if((UBase_t) SCB_enMEMORY_MSTKERR & uxMemoryFault)
 800218c:	06e7      	lsls	r7, r4, #27
 800218e:	d45d      	bmi.n	800224c <MemoryFault__vIRQVectorHandlerCustom+0xd8>
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Memory Fault, it occurred on an Exception/IRQ entry\n\r"
                                            "Context Values cannot be valid\n\r");
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MSTKERR);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MSTKERR);
        }
        if((UBase_t) SCB_enMEMORY_MUNSTKERR & uxMemoryFault)
 8002190:	0720      	lsls	r0, r4, #28
 8002192:	d447      	bmi.n	8002224 <MemoryFault__vIRQVectorHandlerCustom+0xb0>
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Memory Fault, it occurred on an Exception/IRQ exit\n\r"
                                            "Context Values are related to the previous context\n\r");
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MUNSTKERR);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MUNSTKERR);
        }
        if((UBase_t) SCB_enMEMORY_MMARVALID & uxMemoryFault)
 8002194:	f014 0080 	ands.w	r0, r4, #128	; 0x80
 8002198:	d106      	bne.n	80021a8 <MemoryFault__vIRQVectorHandlerCustom+0x34>
            pstSCBReg->CFSR = SCB_CFSR_R_MMARVALID_CLEAR;
            uxMemoryAddressValid = 1UL;
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MMARVALID);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MMARVALID);
        }
        if((UBase_t) SCB_enMEMORY_DACCVIOL & uxMemoryFault)
 800219a:	07a1      	lsls	r1, r4, #30
 800219c:	f100 808c 	bmi.w	80022b8 <MemoryFault__vIRQVectorHandlerCustom+0x144>
            uxMemoryAddressFault = *puxContextOffset;
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Fault Address: %X\n\r", uxMemoryAddressFault);
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_DACCVIOL);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_DACCVIOL);
        }
        if((UBase_t) SCB_enMEMORY_IACCVIOL & uxMemoryFault)
 80021a0:	07e3      	lsls	r3, r4, #31
 80021a2:	d42c      	bmi.n	80021fe <MemoryFault__vIRQVectorHandlerCustom+0x8a>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_IACCVIOL);
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_IACCVIOL);
        }
    }

}
 80021a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pstSCBReg->CFSR = SCB_CFSR_R_MMARVALID_CLEAR;
 80021a8:	2380      	movs	r3, #128	; 0x80
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MMARVALID);
 80021aa:	2105      	movs	r1, #5
 80021ac:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_MMARVALID_CLEAR;
 80021ae:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MMARVALID);
 80021b2:	f7ff fc77 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MMARVALID);
 80021b6:	2105      	movs	r1, #5
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MMARVALID);
 80021b8:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MMARVALID);
 80021ba:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80021be:	4798      	blx	r3
        if((UBase_t) SCB_enMEMORY_DACCVIOL & uxMemoryFault)
 80021c0:	07a2      	lsls	r2, r4, #30
 80021c2:	d5ed      	bpl.n	80021a0 <MemoryFault__vIRQVectorHandlerCustom+0x2c>
            pstSCBReg->CFSR = SCB_CFSR_R_DACCVIOL_CLEAR;
 80021c4:	2302      	movs	r3, #2
            UART__uxCustomPrintf(UART_enMODULE_0, "Data Access Violation Memory Fault\n\r");
 80021c6:	4940      	ldr	r1, [pc, #256]	; (80022c8 <MemoryFault__vIRQVectorHandlerCustom+0x154>)
 80021c8:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_DACCVIOL_CLEAR;
 80021ca:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Data Access Violation Memory Fault\n\r");
 80021ce:	f000 f98f 	bl	80024f0 <UART__uxCustomPrintf>
                uxMemoryAddressFault = pstSCBReg->MMFAR;
 80021d2:	f8d5 2d34 	ldr.w	r2, [r5, #3380]	; 0xd34
                UART__uxCustomPrintf(UART_enMODULE_0, "Attemp Data Access Fault Address: %X\n\r", uxMemoryAddressFault);
 80021d6:	493d      	ldr	r1, [pc, #244]	; (80022cc <MemoryFault__vIRQVectorHandlerCustom+0x158>)
 80021d8:	2000      	movs	r0, #0
 80021da:	f000 f989 	bl	80024f0 <UART__uxCustomPrintf>
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Fault Address: %X\n\r", uxMemoryAddressFault);
 80021de:	69b2      	ldr	r2, [r6, #24]
 80021e0:	2000      	movs	r0, #0
 80021e2:	493b      	ldr	r1, [pc, #236]	; (80022d0 <MemoryFault__vIRQVectorHandlerCustom+0x15c>)
 80021e4:	f000 f984 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_DACCVIOL);
 80021e8:	2101      	movs	r1, #1
 80021ea:	2000      	movs	r0, #0
 80021ec:	f7ff fc5a 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_DACCVIOL);
 80021f0:	2101      	movs	r1, #1
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_DACCVIOL);
 80021f2:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_DACCVIOL);
 80021f4:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80021f8:	4798      	blx	r3
        if((UBase_t) SCB_enMEMORY_IACCVIOL & uxMemoryFault)
 80021fa:	07e3      	lsls	r3, r4, #31
 80021fc:	d5d2      	bpl.n	80021a4 <MemoryFault__vIRQVectorHandlerCustom+0x30>
            pstSCBReg->CFSR = SCB_CFSR_R_IACCVIOL_CLEAR;
 80021fe:	2301      	movs	r3, #1
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Access Fault Address: %X\n\r", uxMemoryAddressFault);
 8002200:	4934      	ldr	r1, [pc, #208]	; (80022d4 <MemoryFault__vIRQVectorHandlerCustom+0x160>)
 8002202:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_IACCVIOL_CLEAR;
 8002204:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Instruction Access Fault Address: %X\n\r", uxMemoryAddressFault);
 8002208:	69b2      	ldr	r2, [r6, #24]
 800220a:	f000 f971 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_IACCVIOL);
 800220e:	2100      	movs	r1, #0
 8002210:	4608      	mov	r0, r1
 8002212:	f7ff fc47 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_IACCVIOL);
 8002216:	2100      	movs	r1, #0
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_IACCVIOL);
 8002218:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_IACCVIOL);
 800221a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 800221e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_IACCVIOL);
 8002222:	4718      	bx	r3
            pstSCBReg->CFSR = SCB_CFSR_R_MUNSTKERR_CLEAR;
 8002224:	2308      	movs	r3, #8
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Memory Fault, it occurred on an Exception/IRQ exit\n\r"
 8002226:	492c      	ldr	r1, [pc, #176]	; (80022d8 <MemoryFault__vIRQVectorHandlerCustom+0x164>)
 8002228:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_MUNSTKERR_CLEAR;
 800222a:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0,"Un-stacking Memory Fault, it occurred on an Exception/IRQ exit\n\r"
 800222e:	f000 f95f 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MUNSTKERR);
 8002232:	2102      	movs	r1, #2
 8002234:	2000      	movs	r0, #0
 8002236:	f7ff fc35 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MUNSTKERR);
 800223a:	2102      	movs	r1, #2
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MUNSTKERR);
 800223c:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MUNSTKERR);
 800223e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8002242:	4798      	blx	r3
        if((UBase_t) SCB_enMEMORY_MMARVALID & uxMemoryFault)
 8002244:	f014 0080 	ands.w	r0, r4, #128	; 0x80
 8002248:	d0a7      	beq.n	800219a <MemoryFault__vIRQVectorHandlerCustom+0x26>
 800224a:	e7ad      	b.n	80021a8 <MemoryFault__vIRQVectorHandlerCustom+0x34>
            pstSCBReg->CFSR = SCB_CFSR_R_MSTKERR_CLEAR;
 800224c:	2310      	movs	r3, #16
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Memory Fault, it occurred on an Exception/IRQ entry\n\r"
 800224e:	4923      	ldr	r1, [pc, #140]	; (80022dc <MemoryFault__vIRQVectorHandlerCustom+0x168>)
 8002250:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_MSTKERR_CLEAR;
 8002252:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0,"Stacking Memory Fault, it occurred on an Exception/IRQ entry\n\r"
 8002256:	f000 f94b 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MSTKERR);
 800225a:	2103      	movs	r1, #3
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff fc21 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MSTKERR);
 8002262:	2103      	movs	r1, #3
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MSTKERR);
 8002264:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MSTKERR);
 8002266:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 800226a:	4798      	blx	r3
        if((UBase_t) SCB_enMEMORY_MUNSTKERR & uxMemoryFault)
 800226c:	0720      	lsls	r0, r4, #28
 800226e:	d591      	bpl.n	8002194 <MemoryFault__vIRQVectorHandlerCustom+0x20>
 8002270:	e7d8      	b.n	8002224 <MemoryFault__vIRQVectorHandlerCustom+0xb0>
            pstSCBReg->CFSR = SCB_CFSR_R_MLSPERR_CLEAR;
 8002272:	2320      	movs	r3, #32
            UART__uxCustomPrintf(UART_enMODULE_0, "Memory Fault on FPU Lazy State Preservation \n\r");
 8002274:	491a      	ldr	r1, [pc, #104]	; (80022e0 <MemoryFault__vIRQVectorHandlerCustom+0x16c>)
            pstSCBReg->CFSR = SCB_CFSR_R_MLSPERR_CLEAR;
 8002276:	f8c0 3d28 	str.w	r3, [r0, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Memory Fault on FPU Lazy State Preservation \n\r");
 800227a:	2000      	movs	r0, #0
 800227c:	f000 f938 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MLSPERR);
 8002280:	2104      	movs	r1, #4
 8002282:	2000      	movs	r0, #0
 8002284:	f7ff fc0e 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MLSPERR);
 8002288:	2104      	movs	r1, #4
            pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_MLSPERR);
 800228a:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_MLSPERR);
 800228c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8002290:	4798      	blx	r3
        if((UBase_t) SCB_enMEMORY_MSTKERR & uxMemoryFault)
 8002292:	06e7      	lsls	r7, r4, #27
 8002294:	f57f af7c 	bpl.w	8002190 <MemoryFault__vIRQVectorHandlerCustom+0x1c>
 8002298:	e7d8      	b.n	800224c <MemoryFault__vIRQVectorHandlerCustom+0xd8>
        UART__uxCustomPrintf(UART_enMODULE_0, "Memory Fault Exception triggered by Software \n\r");
 800229a:	4912      	ldr	r1, [pc, #72]	; (80022e4 <MemoryFault__vIRQVectorHandlerCustom+0x170>)
 800229c:	4638      	mov	r0, r7
 800229e:	f000 f927 	bl	80024f0 <UART__uxCustomPrintf>
        pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_SW);
 80022a2:	2106      	movs	r1, #6
 80022a4:	4638      	mov	r0, r7
 80022a6:	f7ff fbfd 	bl	8001aa4 <SCB_MemoryFault__pvfGetIRQSourceHandler>
        pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_SW);
 80022aa:	2106      	movs	r1, #6
        pvfCallback = SCB_MemoryFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enMEMORY_BIT_SW);
 80022ac:	4603      	mov	r3, r0
        pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_SW);
 80022ae:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 80022b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        pvfCallback(SCB_BASE, (void*) SCB_enMEMORY_BIT_SW);
 80022b6:	4718      	bx	r3
            pstSCBReg->CFSR = SCB_CFSR_R_DACCVIOL_CLEAR;
 80022b8:	2302      	movs	r3, #2
            UART__uxCustomPrintf(UART_enMODULE_0, "Data Access Violation Memory Fault\n\r");
 80022ba:	4903      	ldr	r1, [pc, #12]	; (80022c8 <MemoryFault__vIRQVectorHandlerCustom+0x154>)
            pstSCBReg->CFSR = SCB_CFSR_R_DACCVIOL_CLEAR;
 80022bc:	f8c5 3d28 	str.w	r3, [r5, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Data Access Violation Memory Fault\n\r");
 80022c0:	f000 f916 	bl	80024f0 <UART__uxCustomPrintf>
            if(1UL == uxMemoryAddressValid)
 80022c4:	e78b      	b.n	80021de <MemoryFault__vIRQVectorHandlerCustom+0x6a>
 80022c6:	bf00      	nop
 80022c8:	080079d4 	.word	0x080079d4
 80022cc:	080079fc 	.word	0x080079fc
 80022d0:	08007a24 	.word	0x08007a24
 80022d4:	08007a44 	.word	0x08007a44
 80022d8:	0800795c 	.word	0x0800795c
 80022dc:	080078fc 	.word	0x080078fc
 80022e0:	080078cc 	.word	0x080078cc
 80022e4:	0800789c 	.word	0x0800789c

080022e8 <UsageFault__vSendValues>:
 UART_enLINE_SELECT_PRIMARY,
 UART_enLINE_SELECT_PRIMARY,
};

void UsageFault__vSendValues(void)
{
 80022e8:	b510      	push	{r4, lr}
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 80022ea:	f44f 7100 	mov.w	r1, #512	; 0x200
{
 80022ee:	b086      	sub	sp, #24
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enGPIOA);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f000 fc6d 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    UART__enInit(UART_enMODULE_0);
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartUsageControl, &enUartUsageLineControl, &enUartUsageLine, 0UL);
 80022fc:	4604      	mov	r4, r0
    SYSCTL__enEnableRunMode(SYSCTL_enMODULE_0, SYSCTL_enUART0);
 80022fe:	f000 fc67 	bl	8002bd0 <SYSCTL__enEnableRunMode>
    UART__enInit(UART_enMODULE_0);
 8002302:	4620      	mov	r0, r4
 8002304:	f000 fb1e 	bl	8002944 <UART__enInit>
    UART__enSetCustomPrintfHandle(UART_enMODULE_0, &UART__enSetFifoDataByte);
 8002308:	4913      	ldr	r1, [pc, #76]	; (8002358 <UsageFault__vSendValues+0x70>)
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f8e4 	bl	80024d8 <UART__enSetCustomPrintfHandle>
    UART__enSetConfig(UART_enMODULE_0, UART_enMODE_NORMAL, 921600UL, 0UL, 0UL, &enUartUsageControl, &enUartUsageLineControl, &enUartUsageLine, 0UL);
 8002310:	4912      	ldr	r1, [pc, #72]	; (800235c <UsageFault__vSendValues+0x74>)
 8002312:	4a13      	ldr	r2, [pc, #76]	; (8002360 <UsageFault__vSendValues+0x78>)
 8002314:	4623      	mov	r3, r4
 8002316:	4813      	ldr	r0, [pc, #76]	; (8002364 <UsageFault__vSendValues+0x7c>)
 8002318:	9202      	str	r2, [sp, #8]
 800231a:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800231e:	e9cd 1403 	strd	r1, r4, [sp, #12]
 8002322:	e9cd 4000 	strd	r4, r0, [sp]
 8002326:	4621      	mov	r1, r4
 8002328:	4620      	mov	r0, r4
 800232a:	f000 f909 	bl	8002540 <UART__enSetConfig>

    UART__uxCustomPrintf(UART_enMODULE_0, "USAGE FAULT exception Detected\n\r"
 800232e:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <UsageFault__vSendValues+0x80>)
 8002330:	4620      	mov	r0, r4
 8002332:	490e      	ldr	r1, [pc, #56]	; (800236c <UsageFault__vSendValues+0x84>)
 8002334:	e9d2 3405 	ldrd	r3, r4, [r2, #20]
 8002338:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800233c:	69d4      	ldr	r4, [r2, #28]
 800233e:	6913      	ldr	r3, [r2, #16]
 8002340:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002344:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8002348:	e9cd 3400 	strd	r3, r4, [sp]
 800234c:	e9d2 2300 	ldrd	r2, r3, [r2]
 8002350:	f000 f8ce 	bl	80024f0 <UART__uxCustomPrintf>
                    SCB_UsageFault_puxContext[3UL],
                    SCB_UsageFault_puxContext[4UL],
                    SCB_UsageFault_puxContext[7UL],
                    SCB_UsageFault_puxContext[5UL],
                    SCB_UsageFault_puxContext[6UL]);
}
 8002354:	b006      	add	sp, #24
 8002356:	bd10      	pop	{r4, pc}
 8002358:	080031b5 	.word	0x080031b5
 800235c:	20020990 	.word	0x20020990
 8002360:	200201c8 	.word	0x200201c8
 8002364:	20020190 	.word	0x20020190
 8002368:	20020970 	.word	0x20020970
 800236c:	08007a6c 	.word	0x08007a6c

08002370 <UsageFault__vIRQVectorHandlerCustom>:

void UsageFault__vIRQVectorHandlerCustom(uintptr_t uptrModuleArg, void* pvArgument)
{
 8002370:	b570      	push	{r4, r5, r6, lr}
    pstSCBReg = (SCB_t*) uptrModuleArg;
    puxContext = (UBase_t*) pvArgument;

    uxUsageFault = pstSCBReg->CFSR;
    uxUsageFault >>= 16UL;
    uxUsageFault &= (UBase_t) SCB_enUSAGE_ALL;
 8002372:	f240 330f 	movw	r3, #783	; 0x30f
    uxUsageFault = pstSCBReg->CFSR;
 8002376:	f8d0 6d28 	ldr.w	r6, [r0, #3368]	; 0xd28
    uxUsageFault >>= 16UL;
 800237a:	0c35      	lsrs	r5, r6, #16
    ;
    if(0UL == ((UBase_t) SCB_enUSAGE_ALL & uxUsageFault))
 800237c:	ea13 4616 	ands.w	r6, r3, r6, lsr #16
 8002380:	f000 808c 	beq.w	800249c <UsageFault__vIRQVectorHandlerCustom+0x12c>
    else
    {
        puxContextOffset = puxContext;
        puxContextOffset += 6UL;
        uxUsageAddressFault = *puxContextOffset;
        if((UBase_t) SCB_enUSAGE_UNDEFINSTR & uxUsageFault)
 8002384:	07ea      	lsls	r2, r5, #31
 8002386:	4604      	mov	r4, r0
        uxUsageAddressFault = *puxContextOffset;
 8002388:	698e      	ldr	r6, [r1, #24]
        if((UBase_t) SCB_enUSAGE_UNDEFINSTR & uxUsageFault)
 800238a:	d471      	bmi.n	8002470 <UsageFault__vIRQVectorHandlerCustom+0x100>
            pstSCBReg->CFSR = SCB_CFSR_R_UNDEFINSTR_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Undefined Instruction Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNDEFINSTR);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNDEFINSTR);
        }
        if((UBase_t) SCB_enUSAGE_INVSTATE & uxUsageFault)
 800238c:	07ab      	lsls	r3, r5, #30
 800238e:	d45a      	bmi.n	8002446 <UsageFault__vIRQVectorHandlerCustom+0xd6>
            pstSCBReg->CFSR = SCB_CFSR_R_INVSTATE_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid Sate Register Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVSTATE);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVSTATE);
        }
        if((UBase_t) SCB_enUSAGE_INVPC & uxUsageFault)
 8002390:	0768      	lsls	r0, r5, #29
 8002392:	d443      	bmi.n	800241c <UsageFault__vIRQVectorHandlerCustom+0xac>
            pstSCBReg->CFSR = SCB_CFSR_R_INVPC_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid PC Load Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVPC);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVPC);
        }
        if((UBase_t) SCB_enUSAGE_NOCP & uxUsageFault)
 8002394:	0729      	lsls	r1, r5, #28
 8002396:	d42d      	bmi.n	80023f4 <UsageFault__vIRQVectorHandlerCustom+0x84>
            pstSCBReg->CFSR = SCB_CFSR_R_NOCP_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "FPU Coprocessor has an invalid state.\n\r");
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_NOCP);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_NOCP);
        }
        if((UBase_t) SCB_enUSAGE_UNALIGNED & uxUsageFault)
 8002398:	05ea      	lsls	r2, r5, #23
 800239a:	d416      	bmi.n	80023ca <UsageFault__vIRQVectorHandlerCustom+0x5a>
            pstSCBReg->CFSR = SCB_CFSR_R_UNALIGNED_CLEAR;
            UART__uxCustomPrintf(UART_enMODULE_0, "Unaligned Access Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNALIGNED);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNALIGNED);
        }
        if((UBase_t) SCB_enUSAGE_DIVBYZERO & uxUsageFault)
 800239c:	05ab      	lsls	r3, r5, #22
 800239e:	d400      	bmi.n	80023a2 <UsageFault__vIRQVectorHandlerCustom+0x32>
            UART__uxCustomPrintf(UART_enMODULE_0, "Divide by Zero Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_DIVBYZERO);
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_DIVBYZERO);
        }
    }
}
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
            pstSCBReg->CFSR = SCB_CFSR_R_DIVBYZERO_CLEAR;
 80023a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
            UART__uxCustomPrintf(UART_enMODULE_0, "Divide by Zero Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 80023a6:	4632      	mov	r2, r6
 80023a8:	4944      	ldr	r1, [pc, #272]	; (80024bc <UsageFault__vIRQVectorHandlerCustom+0x14c>)
 80023aa:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_DIVBYZERO_CLEAR;
 80023ac:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Divide by Zero Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 80023b0:	f000 f89e 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_DIVBYZERO);
 80023b4:	2105      	movs	r1, #5
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff fb6a 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_DIVBYZERO);
 80023bc:	2105      	movs	r1, #5
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_DIVBYZERO);
 80023be:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_DIVBYZERO);
 80023c0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 80023c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_DIVBYZERO);
 80023c8:	4718      	bx	r3
            pstSCBReg->CFSR = SCB_CFSR_R_UNALIGNED_CLEAR;
 80023ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
            UART__uxCustomPrintf(UART_enMODULE_0, "Unaligned Access Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 80023ce:	4632      	mov	r2, r6
 80023d0:	493b      	ldr	r1, [pc, #236]	; (80024c0 <UsageFault__vIRQVectorHandlerCustom+0x150>)
 80023d2:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_UNALIGNED_CLEAR;
 80023d4:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Unaligned Access Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 80023d8:	f000 f88a 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNALIGNED);
 80023dc:	2104      	movs	r1, #4
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff fb56 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNALIGNED);
 80023e4:	2104      	movs	r1, #4
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNALIGNED);
 80023e6:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNALIGNED);
 80023e8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 80023ec:	4798      	blx	r3
        if((UBase_t) SCB_enUSAGE_DIVBYZERO & uxUsageFault)
 80023ee:	05ab      	lsls	r3, r5, #22
 80023f0:	d5d6      	bpl.n	80023a0 <UsageFault__vIRQVectorHandlerCustom+0x30>
 80023f2:	e7d6      	b.n	80023a2 <UsageFault__vIRQVectorHandlerCustom+0x32>
            pstSCBReg->CFSR = SCB_CFSR_R_NOCP_CLEAR;
 80023f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
            UART__uxCustomPrintf(UART_enMODULE_0, "FPU Coprocessor has an invalid state.\n\r");
 80023f8:	4932      	ldr	r1, [pc, #200]	; (80024c4 <UsageFault__vIRQVectorHandlerCustom+0x154>)
 80023fa:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_NOCP_CLEAR;
 80023fc:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "FPU Coprocessor has an invalid state.\n\r");
 8002400:	f000 f876 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_NOCP);
 8002404:	2103      	movs	r1, #3
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fb42 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_NOCP);
 800240c:	2103      	movs	r1, #3
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_NOCP);
 800240e:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_NOCP);
 8002410:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8002414:	4798      	blx	r3
        if((UBase_t) SCB_enUSAGE_UNALIGNED & uxUsageFault)
 8002416:	05ea      	lsls	r2, r5, #23
 8002418:	d5c0      	bpl.n	800239c <UsageFault__vIRQVectorHandlerCustom+0x2c>
 800241a:	e7d6      	b.n	80023ca <UsageFault__vIRQVectorHandlerCustom+0x5a>
            pstSCBReg->CFSR = SCB_CFSR_R_INVPC_CLEAR;
 800241c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid PC Load Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 8002420:	4632      	mov	r2, r6
 8002422:	4929      	ldr	r1, [pc, #164]	; (80024c8 <UsageFault__vIRQVectorHandlerCustom+0x158>)
 8002424:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_INVPC_CLEAR;
 8002426:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid PC Load Usage Fault, Fault Address: %X\n\r", uxUsageAddressFault);
 800242a:	f000 f861 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVPC);
 800242e:	2102      	movs	r1, #2
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fb2d 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVPC);
 8002436:	2102      	movs	r1, #2
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVPC);
 8002438:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVPC);
 800243a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 800243e:	4798      	blx	r3
        if((UBase_t) SCB_enUSAGE_NOCP & uxUsageFault)
 8002440:	0729      	lsls	r1, r5, #28
 8002442:	d5a9      	bpl.n	8002398 <UsageFault__vIRQVectorHandlerCustom+0x28>
 8002444:	e7d6      	b.n	80023f4 <UsageFault__vIRQVectorHandlerCustom+0x84>
            pstSCBReg->CFSR = SCB_CFSR_R_INVSTATE_CLEAR;
 8002446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid Sate Register Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
 800244a:	4632      	mov	r2, r6
 800244c:	491f      	ldr	r1, [pc, #124]	; (80024cc <UsageFault__vIRQVectorHandlerCustom+0x15c>)
 800244e:	2000      	movs	r0, #0
            pstSCBReg->CFSR = SCB_CFSR_R_INVSTATE_CLEAR;
 8002450:	f8c4 3d28 	str.w	r3, [r4, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Invalid Sate Register Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
 8002454:	f000 f84c 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVSTATE);
 8002458:	2101      	movs	r1, #1
 800245a:	2000      	movs	r0, #0
 800245c:	f7ff fb18 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVSTATE);
 8002460:	2101      	movs	r1, #1
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_INVSTATE);
 8002462:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_INVSTATE);
 8002464:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8002468:	4798      	blx	r3
        if((UBase_t) SCB_enUSAGE_INVPC & uxUsageFault)
 800246a:	0768      	lsls	r0, r5, #29
 800246c:	d592      	bpl.n	8002394 <UsageFault__vIRQVectorHandlerCustom+0x24>
 800246e:	e7d5      	b.n	800241c <UsageFault__vIRQVectorHandlerCustom+0xac>
            pstSCBReg->CFSR = SCB_CFSR_R_UNDEFINSTR_CLEAR;
 8002470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
            UART__uxCustomPrintf(UART_enMODULE_0, "Undefined Instruction Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
 8002474:	4632      	mov	r2, r6
 8002476:	4916      	ldr	r1, [pc, #88]	; (80024d0 <UsageFault__vIRQVectorHandlerCustom+0x160>)
            pstSCBReg->CFSR = SCB_CFSR_R_UNDEFINSTR_CLEAR;
 8002478:	f8c0 3d28 	str.w	r3, [r0, #3368]	; 0xd28
            UART__uxCustomPrintf(UART_enMODULE_0, "Undefined Instruction Usage Fault,  Fault Address: %X\n\r", uxUsageAddressFault);
 800247c:	2000      	movs	r0, #0
 800247e:	f000 f837 	bl	80024f0 <UART__uxCustomPrintf>
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNDEFINSTR);
 8002482:	2100      	movs	r1, #0
 8002484:	4608      	mov	r0, r1
 8002486:	f7ff fb03 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNDEFINSTR);
 800248a:	2100      	movs	r1, #0
            pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_UNDEFINSTR);
 800248c:	4603      	mov	r3, r0
            pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_UNDEFINSTR);
 800248e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8002492:	4798      	blx	r3
        if((UBase_t) SCB_enUSAGE_INVSTATE & uxUsageFault)
 8002494:	07ab      	lsls	r3, r5, #30
 8002496:	f57f af7b 	bpl.w	8002390 <UsageFault__vIRQVectorHandlerCustom+0x20>
 800249a:	e7d4      	b.n	8002446 <UsageFault__vIRQVectorHandlerCustom+0xd6>
        UART__uxCustomPrintf(UART_enMODULE_0, "Usage Fault Exception triggered by Software \n\r");
 800249c:	490d      	ldr	r1, [pc, #52]	; (80024d4 <UsageFault__vIRQVectorHandlerCustom+0x164>)
 800249e:	4630      	mov	r0, r6
 80024a0:	f000 f826 	bl	80024f0 <UART__uxCustomPrintf>
        pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_SW);
 80024a4:	2106      	movs	r1, #6
 80024a6:	4630      	mov	r0, r6
 80024a8:	f7ff faf2 	bl	8001a90 <SCB_UsageFault__pvfGetIRQSourceHandler>
        pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_SW);
 80024ac:	2106      	movs	r1, #6
        pvfCallback = SCB_UsageFault__pvfGetIRQSourceHandler(SCB_enMODULE_0, SCB_enUSAGE_BIT_SW);
 80024ae:	4603      	mov	r3, r0
        pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_SW);
 80024b0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
}
 80024b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(SCB_BASE, (void*) SCB_enUSAGE_BIT_SW);
 80024b8:	4718      	bx	r3
 80024ba:	bf00      	nop
 80024bc:	08007c14 	.word	0x08007c14
 80024c0:	08007be0 	.word	0x08007be0
 80024c4:	08007bb8 	.word	0x08007bb8
 80024c8:	08007b84 	.word	0x08007b84
 80024cc:	08007b4c 	.word	0x08007b4c
 80024d0:	08007b14 	.word	0x08007b14
 80024d4:	08007ae4 	.word	0x08007ae4

080024d8 <UART__enSetCustomPrintfHandle>:

UART_nERROR UART__enSetCustomPrintfHandle(UART_nMODULE enModuleArg, UART_enCustomPrintHandler_t penFunctionHandlerArg)
{
    UART_nERROR enErrorReg;
    enErrorReg = UART_enERROR_OK;
    if(UART_enMODULE_MAX <= enModuleArg)
 80024d8:	2807      	cmp	r0, #7
{
 80024da:	4603      	mov	r3, r0
    if(UART_enMODULE_MAX <= enModuleArg)
 80024dc:	d804      	bhi.n	80024e8 <UART__enSetCustomPrintfHandle+0x10>
    {
        enErrorReg = UART_enERROR_VALUE;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        UART_penCustomPrintHandler[(UBase_t) enModuleArg] = penFunctionHandlerArg;
 80024de:	4a03      	ldr	r2, [pc, #12]	; (80024ec <UART__enSetCustomPrintfHandle+0x14>)
    enErrorReg = UART_enERROR_OK;
 80024e0:	2000      	movs	r0, #0
        UART_penCustomPrintHandler[(UBase_t) enModuleArg] = penFunctionHandlerArg;
 80024e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80024e6:	4770      	bx	lr
        enErrorReg = UART_enERROR_VALUE;
 80024e8:	2002      	movs	r0, #2
    }
    return (enErrorReg);
}
 80024ea:	4770      	bx	lr
 80024ec:	200201e0 	.word	0x200201e0

080024f0 <UART__uxCustomPrintf>:


UBase_t UART__uxCustomPrintf(UART_nMODULE enModule,const char* pcFormat, ... )
{
 80024f0:	b40e      	push	{r1, r2, r3}
 80024f2:	b570      	push	{r4, r5, r6, lr}
 80024f4:	b0e7      	sub	sp, #412	; 0x19c
    UBase_t uxLengtht;
    char pcBufferReg[400UL] = {0};
 80024f6:	2100      	movs	r1, #0
{
 80024f8:	4604      	mov	r4, r0
    char pcBufferReg[400UL] = {0};
 80024fa:	f44f 72c6 	mov.w	r2, #396	; 0x18c
{
 80024fe:	ad6b      	add	r5, sp, #428	; 0x1ac
    char pcBufferReg[400UL] = {0};
 8002500:	a803      	add	r0, sp, #12
 8002502:	9102      	str	r1, [sp, #8]
{
 8002504:	f855 6b04 	ldr.w	r6, [r5], #4
    char pcBufferReg[400UL] = {0};
 8002508:	f003 fdf4 	bl	80060f4 <memset>
    va_list vaList;

    va_start(vaList, pcFormat);
    uxLengtht = vsnprintf__uxUser(pcBufferReg, 400UL, pcFormat, vaList);
 800250c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002510:	a802      	add	r0, sp, #8
 8002512:	4632      	mov	r2, r6
 8002514:	462b      	mov	r3, r5
    va_start(vaList, pcFormat);
 8002516:	9501      	str	r5, [sp, #4]
    uxLengtht = vsnprintf__uxUser(pcBufferReg, 400UL, pcFormat, vaList);
 8002518:	f003 f816 	bl	8005548 <vsnprintf__uxUser>
    va_end(vaList);
    UART_penCustomPrintHandler[(UBase_t) enModule](enModule, (uint8_t*) pcBufferReg, &uxLengtht);
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <UART__uxCustomPrintf+0x4c>)
    uxLengtht = vsnprintf__uxUser(pcBufferReg, 400UL, pcFormat, vaList);
 800251e:	4602      	mov	r2, r0
    UART_penCustomPrintHandler[(UBase_t) enModule](enModule, (uint8_t*) pcBufferReg, &uxLengtht);
 8002520:	a902      	add	r1, sp, #8
 8002522:	4620      	mov	r0, r4
    uxLengtht = vsnprintf__uxUser(pcBufferReg, 400UL, pcFormat, vaList);
 8002524:	9200      	str	r2, [sp, #0]
    UART_penCustomPrintHandler[(UBase_t) enModule](enModule, (uint8_t*) pcBufferReg, &uxLengtht);
 8002526:	466a      	mov	r2, sp
 8002528:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800252c:	4798      	blx	r3
    return  (uxLengtht);
}
 800252e:	9800      	ldr	r0, [sp, #0]
 8002530:	b067      	add	sp, #412	; 0x19c
 8002532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002536:	b003      	add	sp, #12
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200201e0 	.word	0x200201e0

08002540 <UART__enSetConfig>:
                              UBase_t uxOwnAddressMaskArg,
                              const UART_CONTROL_t* pstControlConfigArg,
                              const UART_LINE_CONTROL_t* pstLineControlConfigArg,
                              const UART_LINE_t* pstLineConfigArg,
                              UBase_t uxTimeoutArg)
{
 8002540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002544:	b08f      	sub	sp, #60	; 0x3c
 8002546:	4617      	mov	r7, r2
 8002548:	e9dd a91a 	ldrd	sl, r9, [sp, #104]	; 0x68
 800254c:	9d19      	ldr	r5, [sp, #100]	; 0x64
    UART_nBOOLEAN enIsBusyReg;
    UART_LINE_CONTROL_t stLineControlConfig;

    enErrorReg = UART_enERROR_OK;
    if((0UL == (uintptr_t) pstControlConfigArg) ||
       (0UL == (uintptr_t) pstLineControlConfigArg)  ||
 800254e:	f1b9 0f00 	cmp.w	r9, #0
 8002552:	bf18      	it	ne
 8002554:	f1ba 0f00 	cmpne.w	sl, #0
{
 8002558:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800255c:	9305      	str	r3, [sp, #20]
       (0UL == (uintptr_t) pstLineControlConfigArg)  ||
 800255e:	d051      	beq.n	8002604 <UART__enSetConfig+0xc4>
 8002560:	2d00      	cmp	r5, #0
 8002562:	d04f      	beq.n	8002604 <UART__enSetConfig+0xc4>
       (0UL == (uintptr_t) pstLineConfigArg))
    {
        enErrorReg = UART_enERROR_POINTER;
    }
    if(0UL == uxBaudRateArg)
 8002564:	2a00      	cmp	r2, #0
 8002566:	d049      	beq.n	80025fc <UART__enSetConfig+0xbc>
    {
        enErrorReg = UART_enERROR_VALUE;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 8002568:	460e      	mov	r6, r1
 800256a:	2108      	movs	r1, #8
 800256c:	4604      	mov	r4, r0
 800256e:	f7fe fff3 	bl	8001558 <MCU__enCheckParams>
    }
    if(UART_enERROR_OK == enErrorReg)
 8002572:	2800      	cmp	r0, #0
 8002574:	d14a      	bne.n	800260c <UART__enSetConfig+0xcc>
    {
        enErrorReg = UART__enSetState(enModuleArg, UART_enSTATE_DIS);
 8002576:	4601      	mov	r1, r0
 8002578:	4620      	mov	r0, r4
 800257a:	f000 fc55 	bl	8002e28 <UART__enSetState>
    }
    if(UART_enERROR_OK == enErrorReg)
 800257e:	2800      	cmp	r0, #0
 8002580:	d144      	bne.n	800260c <UART__enSetConfig+0xcc>
    {
        enIsBusyReg = UART_enFALSE;
 8002582:	f10d 0b1c 	add.w	fp, sp, #28
 8002586:	9007      	str	r0, [sp, #28]
        if(0UL == uxTimeoutArg)
 8002588:	f1b8 0f00 	cmp.w	r8, #0
 800258c:	d002      	beq.n	8002594 <UART__enSetConfig+0x54>
 800258e:	e047      	b.n	8002620 <UART__enSetConfig+0xe0>
        {
            do
            {
                enErrorReg = UART__enIsBusy(enModuleArg, &enIsBusyReg);
            }while ((UART_enFALSE != enIsBusyReg) &&
 8002590:	2800      	cmp	r0, #0
 8002592:	d13b      	bne.n	800260c <UART__enSetConfig+0xcc>
                enErrorReg = UART__enIsBusy(enModuleArg, &enIsBusyReg);
 8002594:	4659      	mov	r1, fp
 8002596:	4620      	mov	r0, r4
 8002598:	f000 fce6 	bl	8002f68 <UART__enIsBusy>
                    (UART_enERROR_OK == enErrorReg));
 800259c:	9b07      	ldr	r3, [sp, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f6      	bne.n	8002590 <UART__enSetConfig+0x50>
            {
                enErrorReg = UART_enERROR_TIMEOUT;
            }
        }
    }
    if(UART_enERROR_OK == enErrorReg)
 80025a2:	bb98      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
    {
        enErrorReg = UART__enSetFifoState(enModuleArg, UART_enSTATE_DIS);
 80025a4:	4601      	mov	r1, r0
 80025a6:	4620      	mov	r0, r4
 80025a8:	f000 fd22 	bl	8002ff0 <UART__enSetFifoState>
    }
    if(UART_enERROR_OK == enErrorReg)
 80025ac:	bb70      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
    {
        if(UART_enSTATE_ENA == pstControlConfigArg->enRxLineState)
 80025ae:	68e9      	ldr	r1, [r5, #12]
 80025b0:	2901      	cmp	r1, #1
 80025b2:	f000 81ab 	beq.w	800290c <UART__enSetConfig+0x3cc>
            }
        }
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = UART__enSetReceiverState(enModuleArg, pstControlConfigArg->enRxLineState);
 80025b6:	4620      	mov	r0, r4
 80025b8:	f000 fc7c 	bl	8002eb4 <UART__enSetReceiverState>
    }
    if(UART_enERROR_OK == enErrorReg)
 80025bc:	bb30      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
    {
        if(UART_enSTATE_ENA == pstControlConfigArg->enTxLineState)
 80025be:	6929      	ldr	r1, [r5, #16]
 80025c0:	2901      	cmp	r1, #1
 80025c2:	d112      	bne.n	80025ea <UART__enSetConfig+0xaa>
        {
            enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enTx, MAX_CONFIG);
 80025c4:	2103      	movs	r1, #3
 80025c6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80025ca:	f7fe ffc5 	bl	8001558 <MCU__enCheckParams>
            if(UART_enERROR_OK == enErrorReg)
 80025ce:	b9e8      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
            {
                enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enTx][(UBase_t) enModuleArg][TX_LINE],
 80025d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80025d4:	49a9      	ldr	r1, [pc, #676]	; (800287c <UART__enSetConfig+0x33c>)
 80025d6:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80025da:	4ba9      	ldr	r3, [pc, #676]	; (8002880 <UART__enSetConfig+0x340>)
 80025dc:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80025e0:	6858      	ldr	r0, [r3, #4]
 80025e2:	f000 f9e7 	bl	80029b4 <GPIO__enSetDigitalConfig>
                                                                    GPIO_enCONFIG_OUTPUT_2MA_PUSHPULL);
            }
        }
    }
    if(UART_enERROR_OK == enErrorReg)
 80025e6:	b988      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
    {
        enErrorReg = UART__enSetTransmitState(enModuleArg, pstControlConfigArg->enTxLineState);
 80025e8:	6929      	ldr	r1, [r5, #16]
 80025ea:	4620      	mov	r0, r4
 80025ec:	f000 fcae 	bl	8002f4c <UART__enSetTransmitState>
    }
    if(UART_enERROR_OK == enErrorReg)
 80025f0:	b960      	cbnz	r0, 800260c <UART__enSetConfig+0xcc>
    {
        if(UART_enLINE_MODE_HARD == pstControlConfigArg->enCTSMode)
 80025f2:	69a9      	ldr	r1, [r5, #24]
 80025f4:	2901      	cmp	r1, #1
 80025f6:	d132      	bne.n	800265e <UART__enSetConfig+0x11e>
        {
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg) || (UART_enMODULE_2 == enModuleArg) ||
 80025f8:	2c04      	cmp	r4, #4
 80025fa:	d91b      	bls.n	8002634 <UART__enSetConfig+0xf4>
            enErrorReg = UART__enSetLineControlStructurePointer_BaudRate(enModuleArg, pstLineControlConfigArg, uxBaudRateArg);
            break;
        case UART_enMODE_IRDA:
            if(115200UL < uxBaudRateArg)
            {
                enErrorReg = UART_enERROR_VALUE;
 80025fc:	2002      	movs	r0, #2
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = UART__enSetState(enModuleArg, pstControlConfigArg->enModuleState);
    }
    return (enErrorReg);
}
 80025fe:	b00f      	add	sp, #60	; 0x3c
 8002600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        enErrorReg = UART_enERROR_VALUE;
 8002604:	2f00      	cmp	r7, #0
 8002606:	bf14      	ite	ne
 8002608:	2001      	movne	r0, #1
 800260a:	2002      	moveq	r0, #2
}
 800260c:	b00f      	add	sp, #60	; 0x3c
 800260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    (UART_enERROR_OK == enErrorReg) &&
 8002612:	2800      	cmp	r0, #0
 8002614:	f040 8174 	bne.w	8002900 <UART__enSetConfig+0x3c0>
 8002618:	f1b8 0f00 	cmp.w	r8, #0
 800261c:	f000 8170 	beq.w	8002900 <UART__enSetConfig+0x3c0>
                enErrorReg = UART__enIsBusy(enModuleArg, &enIsBusyReg);
 8002620:	4659      	mov	r1, fp
 8002622:	4620      	mov	r0, r4
 8002624:	f000 fca0 	bl	8002f68 <UART__enIsBusy>
                    (0UL != uxTimeoutArg));
 8002628:	9a07      	ldr	r2, [sp, #28]
                uxTimeoutArg--;
 800262a:	f108 38ff 	add.w	r8, r8, #4294967295
                    (0UL != uxTimeoutArg));
 800262e:	2a00      	cmp	r2, #0
 8002630:	d1ef      	bne.n	8002612 <UART__enSetConfig+0xd2>
 8002632:	e7b6      	b.n	80025a2 <UART__enSetConfig+0x62>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enCTS, MAX_CONFIG);
 8002634:	2103      	movs	r1, #3
 8002636:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800263a:	f7fe ff8d 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 800263e:	2800      	cmp	r0, #0
 8002640:	d1e4      	bne.n	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enCTS] [(UBase_t) enModuleArg] [CTS_LINE],
 8002642:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8002646:	498f      	ldr	r1, [pc, #572]	; (8002884 <UART__enSetConfig+0x344>)
 8002648:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800264c:	4b8c      	ldr	r3, [pc, #560]	; (8002880 <UART__enSetConfig+0x340>)
 800264e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002652:	6898      	ldr	r0, [r3, #8]
 8002654:	f000 f9ae 	bl	80029b4 <GPIO__enSetDigitalConfig>
    if(UART_enERROR_OK == enErrorReg)
 8002658:	2800      	cmp	r0, #0
 800265a:	d1d7      	bne.n	800260c <UART__enSetConfig+0xcc>
        enErrorReg = UART__enSetClearToSendMode(enModuleArg, pstControlConfigArg->enCTSMode);
 800265c:	69a9      	ldr	r1, [r5, #24]
 800265e:	4620      	mov	r0, r4
 8002660:	f000 fbc6 	bl	8002df0 <UART__enSetClearToSendMode>
    if(UART_enERROR_OK == enErrorReg)
 8002664:	2800      	cmp	r0, #0
 8002666:	d1d1      	bne.n	800260c <UART__enSetConfig+0xcc>
        if(UART_enLINE_MODE_HARD == pstControlConfigArg->enRTSMode)
 8002668:	6969      	ldr	r1, [r5, #20]
 800266a:	2901      	cmp	r1, #1
 800266c:	d11c      	bne.n	80026a8 <UART__enSetConfig+0x168>
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg) || (UART_enMODULE_2 == enModuleArg) ||
 800266e:	2c04      	cmp	r4, #4
 8002670:	d8c4      	bhi.n	80025fc <UART__enSetConfig+0xbc>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enRTS, MAX_CONFIG);
 8002672:	2103      	movs	r1, #3
 8002674:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8002678:	f7fe ff6e 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 800267c:	2800      	cmp	r0, #0
 800267e:	d1c5      	bne.n	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enRTS] [(UBase_t) enModuleArg] [RTS_LINE],
 8002680:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002684:	497d      	ldr	r1, [pc, #500]	; (800287c <UART__enSetConfig+0x33c>)
 8002686:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 800268a:	4b7d      	ldr	r3, [pc, #500]	; (8002880 <UART__enSetConfig+0x340>)
 800268c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002690:	68d8      	ldr	r0, [r3, #12]
 8002692:	f000 f98f 	bl	80029b4 <GPIO__enSetDigitalConfig>
                if(UART_enERROR_OK == enErrorReg)
 8002696:	2800      	cmp	r0, #0
 8002698:	d1b8      	bne.n	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = UART__enSetRequestToSendLevel(enModuleArg, pstControlConfigArg->enRTSLevel);
 800269a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800269c:	4620      	mov	r0, r4
 800269e:	f000 fbfb 	bl	8002e98 <UART__enSetRequestToSendLevel>
    if(UART_enERROR_OK == enErrorReg)
 80026a2:	2800      	cmp	r0, #0
 80026a4:	d1b2      	bne.n	800260c <UART__enSetConfig+0xcc>
        enErrorReg = UART__enSetRequestToSendMode(enModuleArg, pstControlConfigArg->enRTSMode);
 80026a6:	6969      	ldr	r1, [r5, #20]
 80026a8:	4620      	mov	r0, r4
 80026aa:	f000 fbe7 	bl	8002e7c <UART__enSetRequestToSendMode>
    if(UART_enERROR_OK == enErrorReg)
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d1ac      	bne.n	800260c <UART__enSetConfig+0xcc>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDCDLineState)
 80026b2:	69eb      	ldr	r3, [r5, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	f000 80e7 	beq.w	8002888 <UART__enSetConfig+0x348>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDSRLineState)
 80026ba:	6a2b      	ldr	r3, [r5, #32]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d00b      	beq.n	80026d8 <UART__enSetConfig+0x198>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDTRLineState)
 80026c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d005      	beq.n	80026d2 <UART__enSetConfig+0x192>
        if(UART_enSTATE_ENA == pstControlConfigArg->enRILineState)
 80026c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13f      	bne.n	800274c <UART__enSetConfig+0x20c>
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg))
 80026cc:	2c01      	cmp	r4, #1
 80026ce:	d895      	bhi.n	80025fc <UART__enSetConfig+0xbc>
 80026d0:	e0ff      	b.n	80028d2 <UART__enSetConfig+0x392>
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg))
 80026d2:	2c01      	cmp	r4, #1
 80026d4:	d892      	bhi.n	80025fc <UART__enSetConfig+0xbc>
 80026d6:	e018      	b.n	800270a <UART__enSetConfig+0x1ca>
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg))
 80026d8:	2c01      	cmp	r4, #1
 80026da:	d88f      	bhi.n	80025fc <UART__enSetConfig+0xbc>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enDSR, MAX_CONFIG);
 80026dc:	2103      	movs	r1, #3
 80026de:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80026e2:	f7fe ff39 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d190      	bne.n	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enDSR][(UBase_t) enModuleArg][DSR_LINE],
 80026ea:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80026ee:	4965      	ldr	r1, [pc, #404]	; (8002884 <UART__enSetConfig+0x344>)
 80026f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80026f4:	4b62      	ldr	r3, [pc, #392]	; (8002880 <UART__enSetConfig+0x340>)
 80026f6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80026fa:	6958      	ldr	r0, [r3, #20]
 80026fc:	f000 f95a 	bl	80029b4 <GPIO__enSetDigitalConfig>
    if(UART_enERROR_OK == enErrorReg)
 8002700:	2800      	cmp	r0, #0
 8002702:	d183      	bne.n	800260c <UART__enSetConfig+0xcc>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDTRLineState)
 8002704:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002706:	2b01      	cmp	r3, #1
 8002708:	d1dd      	bne.n	80026c6 <UART__enSetConfig+0x186>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enDTR, MAX_CONFIG);
 800270a:	2103      	movs	r1, #3
 800270c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002710:	f7fe ff22 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 8002714:	2800      	cmp	r0, #0
 8002716:	f47f af79 	bne.w	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enDTR][(UBase_t) enModuleArg][DTR_LINE],
 800271a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800271e:	4957      	ldr	r1, [pc, #348]	; (800287c <UART__enSetConfig+0x33c>)
 8002720:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8002724:	4b56      	ldr	r3, [pc, #344]	; (8002880 <UART__enSetConfig+0x340>)
 8002726:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800272a:	6998      	ldr	r0, [r3, #24]
 800272c:	f000 f942 	bl	80029b4 <GPIO__enSetDigitalConfig>
                if(UART_enERROR_OK == enErrorReg)
 8002730:	2800      	cmp	r0, #0
 8002732:	f47f af6b 	bne.w	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = UART__enSetDataTerminalReadyLevel(enModuleArg, pstControlConfigArg->enDTRLevel);
 8002736:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002738:	4620      	mov	r0, r4
 800273a:	f000 fb67 	bl	8002e0c <UART__enSetDataTerminalReadyLevel>
    if(UART_enERROR_OK == enErrorReg)
 800273e:	2800      	cmp	r0, #0
 8002740:	f47f af64 	bne.w	800260c <UART__enSetConfig+0xcc>
        if(UART_enSTATE_ENA == pstControlConfigArg->enRILineState)
 8002744:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002746:	2b01      	cmp	r3, #1
 8002748:	f000 80c3 	beq.w	80028d2 <UART__enSetConfig+0x392>
        enErrorReg = UART__enSetLoopbackState(enModuleArg, pstControlConfigArg->enLoopbackState);
 800274c:	6869      	ldr	r1, [r5, #4]
 800274e:	4620      	mov	r0, r4
 8002750:	f000 fb86 	bl	8002e60 <UART__enSetLoopbackState>
    if(UART_enERROR_OK == enErrorReg)
 8002754:	2800      	cmp	r0, #0
 8002756:	f47f af59 	bne.w	800260c <UART__enSetConfig+0xcc>
        enErrorReg = UART__enSetEndOfTransmissionBehavior(enModuleArg, pstControlConfigArg->enEndOfTransmission);
 800275a:	6829      	ldr	r1, [r5, #0]
 800275c:	4620      	mov	r0, r4
 800275e:	f000 fb71 	bl	8002e44 <UART__enSetEndOfTransmissionBehavior>
    if(UART_enERROR_OK == enErrorReg)
 8002762:	2800      	cmp	r0, #0
 8002764:	f47f af52 	bne.w	800260c <UART__enSetConfig+0xcc>
        if((UART_enPARITY_ADDRESS == pstLineControlConfigArg->enParityType) ||
 8002768:	f8da 3008 	ldr.w	r3, [sl, #8]
 800276c:	3b02      	subs	r3, #2
 800276e:	2b01      	cmp	r3, #1
 8002770:	d977      	bls.n	8002862 <UART__enSetConfig+0x322>
            enErrorReg = UART__enSetMultiDropState(enModuleArg, UART_enSTATE_DIS);
 8002772:	4601      	mov	r1, r0
 8002774:	4620      	mov	r0, r4
 8002776:	f000 fcef 	bl	8003158 <UART__enSetMultiDropState>
    if(UART_enERROR_OK == enErrorReg)
 800277a:	2800      	cmp	r0, #0
 800277c:	f47f af46 	bne.w	800260c <UART__enSetConfig+0xcc>
        if(UART_enMODE_IRDA_LP == enModeArg)
 8002780:	2e02      	cmp	r6, #2
 8002782:	d036      	beq.n	80027f2 <UART__enSetConfig+0x2b2>
            enErrorReg = UART__enSetIrDALowPowerState(enModuleArg, UART_enSTATE_DIS);
 8002784:	4601      	mov	r1, r0
 8002786:	4620      	mov	r0, r4
 8002788:	f000 fbb0 	bl	8002eec <UART__enSetIrDALowPowerState>
    if(UART_enERROR_OK == enErrorReg)
 800278c:	2800      	cmp	r0, #0
 800278e:	f47f af3d 	bne.w	800260c <UART__enSetConfig+0xcc>
        if((UART_enMODE_IRDA == enModeArg) || (UART_enMODE_IRDA_LP == enModeArg))
 8002792:	1e73      	subs	r3, r6, #1
 8002794:	2b01      	cmp	r3, #1
 8002796:	d933      	bls.n	8002800 <UART__enSetConfig+0x2c0>
            enErrorReg = UART__enSetIrDAState(enModuleArg, UART_enSTATE_DIS);
 8002798:	4601      	mov	r1, r0
 800279a:	4620      	mov	r0, r4
 800279c:	f000 fb98 	bl	8002ed0 <UART__enSetIrDAState>
    if(UART_enERROR_OK == enErrorReg)
 80027a0:	2800      	cmp	r0, #0
 80027a2:	f47f af33 	bne.w	800260c <UART__enSetConfig+0xcc>
        if(UART_enMODE_SMART_CARD == enModeArg)
 80027a6:	2e03      	cmp	r6, #3
 80027a8:	d131      	bne.n	800280e <UART__enSetConfig+0x2ce>
            enErrorReg = UART__enSetSmartCardState(enModuleArg, UART_enSTATE_ENA);
 80027aa:	2101      	movs	r1, #1
 80027ac:	4620      	mov	r0, r4
 80027ae:	f000 fbab 	bl	8002f08 <UART__enSetSmartCardState>
    if(UART_enERROR_OK == enErrorReg)
 80027b2:	2800      	cmp	r0, #0
 80027b4:	f47f af2a 	bne.w	800260c <UART__enSetConfig+0xcc>
            stLineControlConfig.enFifoState = pstLineControlConfigArg->enFifoState;
 80027b8:	f8da 2000 	ldr.w	r2, [sl]
            stLineControlConfig.enStopBits = UART_enSTOP_TWO;
 80027bc:	2301      	movs	r3, #1
            stLineControlConfig.enDataLength = UART_enLENGTH_8BITS;
 80027be:	2103      	movs	r1, #3
            enErrorReg = UART__enSetLineControlStructure_BaudRate(enModuleArg, stLineControlConfig, uxBaudRateArg);
 80027c0:	9703      	str	r7, [sp, #12]
            stLineControlConfig.enParityType = UART_enPARITY_EVEN;
 80027c2:	930a      	str	r3, [sp, #40]	; 0x28
            stLineControlConfig.enDataLength = UART_enLENGTH_8BITS;
 80027c4:	910b      	str	r1, [sp, #44]	; 0x2c
            stLineControlConfig.enStopBits = UART_enSTOP_TWO;
 80027c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
            enErrorReg = UART__enSetLineControlStructure_BaudRate(enModuleArg, stLineControlConfig, uxBaudRateArg);
 80027ca:	ab0e      	add	r3, sp, #56	; 0x38
 80027cc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80027d0:	ab08      	add	r3, sp, #32
 80027d2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80027d6:	4620      	mov	r0, r4
 80027d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027da:	f001 fe17 	bl	800440c <UART__enSetLineControlStructure_BaudRate>
    if(UART_enERROR_OK == enErrorReg)
 80027de:	2800      	cmp	r0, #0
 80027e0:	f47f af14 	bne.w	800260c <UART__enSetConfig+0xcc>
        enErrorReg = UART__enSetState(enModuleArg, pstControlConfigArg->enModuleState);
 80027e4:	68a9      	ldr	r1, [r5, #8]
 80027e6:	4620      	mov	r0, r4
 80027e8:	f000 fb1e 	bl	8002e28 <UART__enSetState>
}
 80027ec:	b00f      	add	sp, #60	; 0x3c
 80027ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            enErrorReg = UART__enSetIrDALowPowerState(enModuleArg, UART_enSTATE_ENA);
 80027f2:	2101      	movs	r1, #1
 80027f4:	4620      	mov	r0, r4
 80027f6:	f000 fb79 	bl	8002eec <UART__enSetIrDALowPowerState>
    if(UART_enERROR_OK == enErrorReg)
 80027fa:	2800      	cmp	r0, #0
 80027fc:	f47f af06 	bne.w	800260c <UART__enSetConfig+0xcc>
            enErrorReg = UART__enSetIrDAState(enModuleArg, UART_enSTATE_ENA);
 8002800:	2101      	movs	r1, #1
 8002802:	4620      	mov	r0, r4
 8002804:	f000 fb64 	bl	8002ed0 <UART__enSetIrDAState>
    if(UART_enERROR_OK == enErrorReg)
 8002808:	2800      	cmp	r0, #0
 800280a:	f47f aeff 	bne.w	800260c <UART__enSetConfig+0xcc>
            enErrorReg = UART__enSetSmartCardState(enModuleArg, UART_enSTATE_DIS);
 800280e:	2100      	movs	r1, #0
 8002810:	4620      	mov	r0, r4
 8002812:	f000 fb79 	bl	8002f08 <UART__enSetSmartCardState>
    if(UART_enERROR_OK == enErrorReg)
 8002816:	2800      	cmp	r0, #0
 8002818:	f47f aef8 	bne.w	800260c <UART__enSetConfig+0xcc>
        switch(enModeArg)
 800281c:	2e03      	cmp	r6, #3
 800281e:	d8e1      	bhi.n	80027e4 <UART__enSetConfig+0x2a4>
 8002820:	a301      	add	r3, pc, #4	; (adr r3, 8002828 <UART__enSetConfig+0x2e8>)
 8002822:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002841 	.word	0x08002841
 800282c:	08002839 	.word	0x08002839
 8002830:	0800284d 	.word	0x0800284d
 8002834:	080027b9 	.word	0x080027b9
            if(115200UL < uxBaudRateArg)
 8002838:	f5b7 3fe1 	cmp.w	r7, #115200	; 0x1c200
 800283c:	f63f aede 	bhi.w	80025fc <UART__enSetConfig+0xbc>
                enErrorReg = UART__enSetLineControlStructurePointer_BaudRate(enModuleArg, pstLineControlConfigArg, uxBaudRateArg);
 8002840:	463a      	mov	r2, r7
 8002842:	4651      	mov	r1, sl
 8002844:	4620      	mov	r0, r4
 8002846:	f001 fe01 	bl	800444c <UART__enSetLineControlStructurePointer_BaudRate>
 800284a:	e7c8      	b.n	80027de <UART__enSetConfig+0x29e>
            enErrorReg = UART__enSetIrDALowPowerFrequency(enModuleArg);
 800284c:	4620      	mov	r0, r4
 800284e:	f000 f889 	bl	8002964 <UART__enSetIrDALowPowerFrequency>
            if(UART_enERROR_OK == enErrorReg)
 8002852:	2800      	cmp	r0, #0
 8002854:	f47f aeda 	bne.w	800260c <UART__enSetConfig+0xcc>
                enErrorReg = UART__enSetLineControlStructurePointer(enModuleArg, pstLineControlConfigArg);
 8002858:	4651      	mov	r1, sl
 800285a:	4620      	mov	r0, r4
 800285c:	f000 fc0e 	bl	800307c <UART__enSetLineControlStructurePointer>
 8002860:	e7bd      	b.n	80027de <UART__enSetConfig+0x29e>
            enErrorReg = UART__enSetMultiDropState(enModuleArg, UART_enSTATE_ENA);
 8002862:	2101      	movs	r1, #1
 8002864:	4620      	mov	r0, r4
 8002866:	f000 fc77 	bl	8003158 <UART__enSetMultiDropState>
            if(UART_enERROR_OK == enErrorReg)
 800286a:	2800      	cmp	r0, #0
 800286c:	f47f aece 	bne.w	800260c <UART__enSetConfig+0xcc>
                enErrorReg = UART__enSetSelfAddressWithMask(enModuleArg, uxOwnAddressArg, uxOwnAddressMaskArg);
 8002870:	9905      	ldr	r1, [sp, #20]
 8002872:	4620      	mov	r0, r4
 8002874:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8002876:	f000 fc7d 	bl	8003174 <UART__enSetSelfAddressWithMask>
 800287a:	e77e      	b.n	800277a <UART__enSetConfig+0x23a>
 800287c:	00010100 	.word	0x00010100
 8002880:	08007c44 	.word	0x08007c44
 8002884:	00010010 	.word	0x00010010
            if((UART_enMODULE_0 == enModuleArg) || (UART_enMODULE_1 == enModuleArg))
 8002888:	2c01      	cmp	r4, #1
 800288a:	f63f aeb7 	bhi.w	80025fc <UART__enSetConfig+0xbc>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enDCD, MAX_CONFIG);
 800288e:	2103      	movs	r1, #3
 8002890:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8002894:	f7fe fe60 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 8002898:	2800      	cmp	r0, #0
 800289a:	f47f aeb7 	bne.w	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enDCD][(UBase_t) enModuleArg][DCD_LINE],
 800289e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80028a2:	4926      	ldr	r1, [pc, #152]	; (800293c <UART__enSetConfig+0x3fc>)
 80028a4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <UART__enSetConfig+0x400>)
 80028aa:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80028ae:	6918      	ldr	r0, [r3, #16]
 80028b0:	f000 f880 	bl	80029b4 <GPIO__enSetDigitalConfig>
    if(UART_enERROR_OK == enErrorReg)
 80028b4:	2800      	cmp	r0, #0
 80028b6:	f47f aea9 	bne.w	800260c <UART__enSetConfig+0xcc>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDSRLineState)
 80028ba:	6a2b      	ldr	r3, [r5, #32]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	f43f af0d 	beq.w	80026dc <UART__enSetConfig+0x19c>
        if(UART_enSTATE_ENA == pstControlConfigArg->enDTRLineState)
 80028c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	f43f af20 	beq.w	800270a <UART__enSetConfig+0x1ca>
        if(UART_enSTATE_ENA == pstControlConfigArg->enRILineState)
 80028ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	f47f af3d 	bne.w	800274c <UART__enSetConfig+0x20c>
                enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enRI, MAX_CONFIG);
 80028d2:	2103      	movs	r1, #3
 80028d4:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80028d8:	f7fe fe3e 	bl	8001558 <MCU__enCheckParams>
                if(UART_enERROR_OK == enErrorReg)
 80028dc:	2800      	cmp	r0, #0
 80028de:	f47f ae95 	bne.w	800260c <UART__enSetConfig+0xcc>
                    enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enRI][(UBase_t) enModuleArg][RI_LINE],
 80028e2:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80028e6:	4b16      	ldr	r3, [pc, #88]	; (8002940 <UART__enSetConfig+0x400>)
 80028e8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80028ec:	4913      	ldr	r1, [pc, #76]	; (800293c <UART__enSetConfig+0x3fc>)
 80028ee:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80028f2:	69d8      	ldr	r0, [r3, #28]
 80028f4:	f000 f85e 	bl	80029b4 <GPIO__enSetDigitalConfig>
    if(UART_enERROR_OK == enErrorReg)
 80028f8:	2800      	cmp	r0, #0
 80028fa:	f43f af27 	beq.w	800274c <UART__enSetConfig+0x20c>
 80028fe:	e685      	b.n	800260c <UART__enSetConfig+0xcc>
               (UART_enERROR_OK == enErrorReg) &&
 8002900:	ea50 0308 	orrs.w	r3, r0, r8
 8002904:	f47f ae4d 	bne.w	80025a2 <UART__enSetConfig+0x62>
                enErrorReg = UART_enERROR_TIMEOUT;
 8002908:	2006      	movs	r0, #6
    return (enErrorReg);
 800290a:	e67f      	b.n	800260c <UART__enSetConfig+0xcc>
            enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) pstLineConfigArg->enRx, MAX_CONFIG);
 800290c:	2103      	movs	r1, #3
 800290e:	f8d9 0000 	ldr.w	r0, [r9]
 8002912:	f7fe fe21 	bl	8001558 <MCU__enCheckParams>
            if(UART_enERROR_OK == enErrorReg)
 8002916:	2800      	cmp	r0, #0
 8002918:	f47f ae78 	bne.w	800260c <UART__enSetConfig+0xcc>
                enErrorReg = (UART_nERROR) GPIO__enSetDigitalConfig(UART_enGpioInput[(UBase_t) pstLineConfigArg->enRx][(UBase_t) enModuleArg][RX_LINE],
 800291c:	f8d9 3000 	ldr.w	r3, [r9]
 8002920:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002924:	4a06      	ldr	r2, [pc, #24]	; (8002940 <UART__enSetConfig+0x400>)
 8002926:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	58d0      	ldr	r0, [r2, r3]
 800292e:	f000 f841 	bl	80029b4 <GPIO__enSetDigitalConfig>
    if(UART_enERROR_OK == enErrorReg)
 8002932:	2800      	cmp	r0, #0
 8002934:	f47f ae6a 	bne.w	800260c <UART__enSetConfig+0xcc>
        enErrorReg = UART__enSetReceiverState(enModuleArg, pstControlConfigArg->enRxLineState);
 8002938:	68e9      	ldr	r1, [r5, #12]
 800293a:	e63c      	b.n	80025b6 <UART__enSetConfig+0x76>
 800293c:	00010010 	.word	0x00010010
 8002940:	08007c44 	.word	0x08007c44

08002944 <UART__enInit>:
#include <xApplication_MCU/UART/Intrinsics/xHeader/UART_Ready.h>
#include <xApplication_MCU/UART/Intrinsics/xHeader/UART_Dependencies.h>
#include <xApplication_MCU/UART/Interrupt/UART_Interrupt.h>

UART_nERROR UART__enInit(UART_nMODULE enModuleArg)
{
 8002944:	b510      	push	{r4, lr}
 8002946:	4604      	mov	r4, r0
    UART_nERROR enErrorReg;
    UART_pvfIRQVectorHandler_t pfIrqVectorHandlerReg;

    enErrorReg = UART__enSetReadyOnRunMode(enModuleArg);
 8002948:	f001 fd50 	bl	80043ec <UART__enSetReadyOnRunMode>
    if(UART_enERROR_OK == enErrorReg)
 800294c:	b100      	cbz	r0, 8002950 <UART__enInit+0xc>
        pfIrqVectorHandlerReg = UART__pvfGetIRQVectorHandler(enModuleArg);
        enErrorReg = UART__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandlerReg);
    }

    return (enErrorReg);
}
 800294e:	bd10      	pop	{r4, pc}
        pfIrqVectorHandlerReg = UART__pvfGetIRQVectorHandler(enModuleArg);
 8002950:	4620      	mov	r0, r4
 8002952:	f000 fce1 	bl	8003318 <UART__pvfGetIRQVectorHandler>
 8002956:	4601      	mov	r1, r0
        enErrorReg = UART__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandlerReg);
 8002958:	4620      	mov	r0, r4
}
 800295a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = UART__enRegisterIRQVectorHandler(enModuleArg, pfIrqVectorHandlerReg);
 800295e:	f000 bcb1 	b.w	80032c4 <UART__enRegisterIRQVectorHandler>
 8002962:	bf00      	nop

08002964 <UART__enSetIrDALowPowerFrequency>:

#include <xApplication_MCU/UART/Intrinsics/xHeader/UART_Dependencies.h>


UART_nERROR UART__enSetIrDALowPowerFrequency(UART_nMODULE enModule)
{
 8002964:	b530      	push	{r4, r5, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	4604      	mov	r4, r0
    MCU_nSTATUS enFPUActive = MCU__enGetFPUContextActive();
 800296a:	f7fe f819 	bl	80009a0 <MCU__enGetFPUContextActive>
 800296e:	4605      	mov	r5, r0
    UART_nERROR enErrorReg;
    UBase_t uxSysClockReg;

    uxSysClockReg = 0UL;
 8002970:	2000      	movs	r0, #0
    SYSCTL__enGetSystemClockFrequency(SYSCTL_enMODULE_0, &uxSysClockReg);
 8002972:	a901      	add	r1, sp, #4
    uxSysClockReg = 0UL;
 8002974:	9001      	str	r0, [sp, #4]
    SYSCTL__enGetSystemClockFrequency(SYSCTL_enMODULE_0, &uxSysClockReg);
 8002976:	f000 f9d9 	bl	8002d2c <SYSCTL__enGetSystemClockFrequency>
    float32_t f32DividerReg;
    f32DividerReg = (float32_t) uxSysClockReg;
 800297a:	ed9d 7a01 	vldr	s14, [sp, #4]
    f32DividerReg /= 1843200.0f; /*IrDA Low Power frequency*/
    f32DividerReg += 0.5f;
 800297e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002982:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80029b0 <UART__enSetIrDALowPowerFrequency+0x4c>
    uxSysClockReg = (UBase_t) f32DividerReg;
    enErrorReg = UART__enSetIrDALowPowerDivisor(enModule, uxSysClockReg);
 8002986:	4620      	mov	r0, r4
    f32DividerReg = (float32_t) uxSysClockReg;
 8002988:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    f32DividerReg += 0.5f;
 800298c:	eee7 7a26 	vfma.f32	s15, s14, s13
    uxSysClockReg = (UBase_t) f32DividerReg;
 8002990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002994:	ee17 1a90 	vmov	r1, s15
 8002998:	edcd 7a01 	vstr	s15, [sp, #4]
    enErrorReg = UART__enSetIrDALowPowerDivisor(enModule, uxSysClockReg);
 800299c:	f000 fc70 	bl	8003280 <UART__enSetIrDALowPowerDivisor>
 80029a0:	4604      	mov	r4, r0
    MCU__vSetFPUContextActive(enFPUActive);
 80029a2:	4628      	mov	r0, r5
 80029a4:	f7fd ffdc 	bl	8000960 <MCU__vSetFPUContextActive>
    return (enErrorReg);
}
 80029a8:	4620      	mov	r0, r4
 80029aa:	b003      	add	sp, #12
 80029ac:	bd30      	pop	{r4, r5, pc}
 80029ae:	bf00      	nop
 80029b0:	3511a2b4 	.word	0x3511a2b4

080029b4 <GPIO__enSetDigitalConfig>:
#include <xDriver_MCU/GPIO/App/xHeader/GPIO_DigitalFunction.h>
#include <xDriver_MCU/GPIO/Driver/GPIO_Driver.h>

GPIO_nERROR GPIO__enSetDigitalConfig(GPIO_nDIGITAL_FUNCTION enFunctionArg,
                                      GPIO_nCONFIG enConfigArg)
{
 80029b4:	b538      	push	{r3, r4, r5, lr}
    UBase_t uxPinReg;

    uxPinReg = 0UL;
    uxPortReg = 0UL;
    enErrorReg = GPIO_enERROR_OK;
    if(GPIO_enGPIO_UNDEF == enFunctionArg)
 80029b6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80029ba:	4298      	cmp	r0, r3
 80029bc:	d00e      	beq.n	80029dc <GPIO__enSetDigitalConfig+0x28>
    {
        enErrorReg = GPIO_enERROR_VALUE;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        uxPortReg = (UBase_t) enFunctionArg;
 80029be:	4604      	mov	r4, r0
        uxPinReg >>= 8UL;
        uxPinReg &= 0xFFUL;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = GPIO__enSetDigitalFunction(enFunctionArg);
 80029c0:	460d      	mov	r5, r1
 80029c2:	f000 f80d 	bl	80029e0 <GPIO__enSetDigitalFunction>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 80029c6:	b100      	cbz	r0, 80029ca <GPIO__enSetDigitalConfig+0x16>
    {
        enErrorReg = GPIO__enSetConfigByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, enConfigArg);
    }
    return (enErrorReg);
}
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = GPIO__enSetConfigByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, enConfigArg);
 80029ca:	462a      	mov	r2, r5
 80029cc:	f3c4 2107 	ubfx	r1, r4, #8, #8
 80029d0:	f3c4 4007 	ubfx	r0, r4, #16, #8
}
 80029d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = GPIO__enSetConfigByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, enConfigArg);
 80029d8:	f001 bd72 	b.w	80044c0 <GPIO__enSetConfigByNumber>
        enErrorReg = GPIO_enERROR_VALUE;
 80029dc:	2002      	movs	r0, #2
}
 80029de:	bd38      	pop	{r3, r4, r5, pc}

080029e0 <GPIO__enSetDigitalFunction>:

    uxPinReg = 0UL;
    uxPortReg = 0UL;
    uxMuxReg = 0UL;
    enErrorReg = GPIO_enERROR_OK;
    if(GPIO_enGPIO_UNDEF == enFunctionArg)
 80029e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80029e4:	4298      	cmp	r0, r3
 80029e6:	d02e      	beq.n	8002a46 <GPIO__enSetDigitalFunction+0x66>
        uxMuxReg >>= 0UL;
        uxMuxReg &= 0xFFUL;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = GPIO__enSetCommitStateByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enSTATE_ENA);
 80029e8:	2201      	movs	r2, #1
{
 80029ea:	b570      	push	{r4, r5, r6, lr}
        uxPinReg &= 0xFFUL;
 80029ec:	f3c0 2607 	ubfx	r6, r0, #8, #8
        uxPortReg &= 0xFFUL;
 80029f0:	f3c0 4507 	ubfx	r5, r0, #16, #8
        uxMuxReg &= 0xFFUL;
 80029f4:	b2c4      	uxtb	r4, r0
        enErrorReg = GPIO__enSetCommitStateByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enSTATE_ENA);
 80029f6:	4631      	mov	r1, r6
 80029f8:	4628      	mov	r0, r5
 80029fa:	f000 f82d 	bl	8002a58 <GPIO__enSetCommitStateByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 80029fe:	b100      	cbz	r0, 8002a02 <GPIO__enSetDigitalFunction+0x22>
    {
        enErrorReg = GPIO__enSetCommitStateByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enSTATE_DIS);
    }

    return (enErrorReg);
}
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = GPIO__enDisableAnalogModeByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg);
 8002a02:	4631      	mov	r1, r6
 8002a04:	4628      	mov	r0, r5
 8002a06:	f000 f895 	bl	8002b34 <GPIO__enDisableAnalogModeByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1f8      	bne.n	8002a00 <GPIO__enSetDigitalFunction+0x20>
        enErrorReg = GPIO__enEnableDigitalModeByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg);
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4628      	mov	r0, r5
 8002a12:	f000 f8a9 	bl	8002b68 <GPIO__enEnableDigitalModeByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a16:	2800      	cmp	r0, #0
 8002a18:	d1f2      	bne.n	8002a00 <GPIO__enSetDigitalFunction+0x20>
        if(0UL == uxMuxReg)
 8002a1a:	b9b4      	cbnz	r4, 8002a4a <GPIO__enSetDigitalFunction+0x6a>
            enErrorReg = GPIO__enSetFunctionByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enFUNCTION_GPIO);
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	4631      	mov	r1, r6
 8002a20:	4628      	mov	r0, r5
 8002a22:	f000 f86d 	bl	8002b00 <GPIO__enSetFunctionByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d1ea      	bne.n	8002a00 <GPIO__enSetDigitalFunction+0x20>
        enErrorReg = GPIO__enSetPeripheralMuxByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, uxMuxReg);
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	4631      	mov	r1, r6
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f000 f8b4 	bl	8002b9c <GPIO__enSetPeripheralMuxByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d1e3      	bne.n	8002a00 <GPIO__enSetDigitalFunction+0x20>
        enErrorReg = GPIO__enSetCommitStateByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enSTATE_DIS);
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4631      	mov	r1, r6
 8002a3c:	4628      	mov	r0, r5
}
 8002a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        enErrorReg = GPIO__enSetCommitStateByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enSTATE_DIS);
 8002a42:	f000 b809 	b.w	8002a58 <GPIO__enSetCommitStateByNumber>
        enErrorReg = GPIO_enERROR_VALUE;
 8002a46:	2002      	movs	r0, #2
}
 8002a48:	4770      	bx	lr
            enErrorReg = GPIO__enSetFunctionByNumber((GPIO_nPORT) uxPortReg, (GPIO_nPIN) uxPinReg, GPIO_enFUNCTION_PERIPHERAL);
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	4628      	mov	r0, r5
 8002a50:	f000 f856 	bl	8002b00 <GPIO__enSetFunctionByNumber>
 8002a54:	e7e7      	b.n	8002a26 <GPIO__enSetDigitalFunction+0x46>
 8002a56:	bf00      	nop

08002a58 <GPIO__enSetCommitStateByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetCommitStateByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                           GPIO_nSTATE enStateArg)
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002a60:	2108      	movs	r1, #8
 8002a62:	4620      	mov	r0, r4
{
 8002a64:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002a66:	f7fe fd77 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a6a:	b108      	cbz	r0, 8002a70 <GPIO__enSetCommitStateByNumber+0x18>
    {
        enErrorReg = GPIO__enLock(enPortArg);
    }

    return (enErrorReg);
}
 8002a6c:	b004      	add	sp, #16
 8002a6e:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = GPIO__enUnlock(enPortArg);
 8002a70:	4630      	mov	r0, r6
 8002a72:	f000 f815 	bl	8002aa0 <GPIO__enUnlock>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d1f8      	bne.n	8002a6c <GPIO__enSetCommitStateByNumber+0x14>
        stRegister.uxMask = GPIO_CR_PIN0_MASK;
 8002a7a:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_CR_OFFSET;
 8002a7c:	f240 5324 	movw	r3, #1316	; 0x524
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002a80:	4669      	mov	r1, sp
 8002a82:	4630      	mov	r0, r6
        stRegister.uxShift = (UBase_t) enPinArg;
 8002a84:	9402      	str	r4, [sp, #8]
        stRegister.uxValue = (UBase_t) enStateArg;
 8002a86:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_CR_PIN0_MASK;
 8002a88:	9201      	str	r2, [sp, #4]
        stRegister.uptrAddress = GPIO_CR_OFFSET;
 8002a8a:	9303      	str	r3, [sp, #12]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002a8c:	f001 fd6c 	bl	8004568 <GPIO__enWriteRegister>
    if(GPIO_enERROR_OK == enErrorReg)
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d1eb      	bne.n	8002a6c <GPIO__enSetCommitStateByNumber+0x14>
        enErrorReg = GPIO__enLock(enPortArg);
 8002a94:	4630      	mov	r0, r6
 8002a96:	f000 f81b 	bl	8002ad0 <GPIO__enLock>
}
 8002a9a:	b004      	add	sp, #16
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	bf00      	nop

08002aa0 <GPIO__enUnlock>:
    enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enUnlock(GPIO_nPORT enPortArg)
{
 8002aa0:	b500      	push	{lr}
 8002aa2:	b085      	sub	sp, #20
    stRegister.uxValue = uxLockValueReg;
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
    enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002aaa:	4669      	mov	r1, sp
    stRegister.uxValue = uxLockValueReg;
 8002aac:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8002ac8 <GPIO__enUnlock+0x28>
 8002ab0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ab4:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002ab8:	f001 fd56 	bl	8004568 <GPIO__enWriteRegister>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetLockState(enPortArg, GPIO_enLOCK_UNLOCKED);
    return (enErrorReg);
}
 8002abc:	b005      	add	sp, #20
 8002abe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	4c4f434b 	.word	0x4c4f434b
 8002acc:	ffffffff 	.word	0xffffffff

08002ad0 <GPIO__enLock>:

GPIO_nERROR GPIO__enLock(GPIO_nPORT enPortArg)
{
 8002ad0:	b500      	push	{lr}
 8002ad2:	b085      	sub	sp, #20
    stRegister.uxValue = uxLockValueReg;
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 63a4 	mov.w	r3, #1312	; 0x520
    enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002ada:	4669      	mov	r1, sp
    stRegister.uxValue = uxLockValueReg;
 8002adc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8002af8 <GPIO__enLock+0x28>
 8002ae0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ae4:	ed8d 7b00 	vstr	d7, [sp]
    enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002ae8:	f001 fd3e 	bl	8004568 <GPIO__enWriteRegister>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetLockState(enPortArg, GPIO_enLOCK_LOCKED);
    return (enErrorReg);
}
 8002aec:	b005      	add	sp, #20
 8002aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8002af2:	bf00      	nop
 8002af4:	f3af 8000 	nop.w
 8002af8:	00000000 	.word	0x00000000
 8002afc:	ffffffff 	.word	0xffffffff

08002b00 <GPIO__enSetFunctionByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetFunctionByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                        GPIO_nFUNCTION enFunctionArg)
{
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	460c      	mov	r4, r1
 8002b04:	b084      	sub	sp, #16
 8002b06:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002b08:	2108      	movs	r1, #8
 8002b0a:	4620      	mov	r0, r4
{
 8002b0c:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002b0e:	f7fe fd23 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8002b12:	b108      	cbz	r0, 8002b18 <GPIO__enSetFunctionByNumber+0x18>
        stRegister.uxValue = (UBase_t) enFunctionArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 8002b14:	b004      	add	sp, #16
 8002b16:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_AFSEL_PIN0_MASK;
 8002b18:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_AFSEL_OFFSET;
 8002b1a:	f44f 6384 	mov.w	r3, #1056	; 0x420
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b1e:	4669      	mov	r1, sp
 8002b20:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_AFSEL_OFFSET;
 8002b22:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enFunctionArg;
 8002b24:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_AFSEL_PIN0_MASK;
 8002b26:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b2a:	f001 fd1d 	bl	8004568 <GPIO__enWriteRegister>
}
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	bf00      	nop

08002b34 <GPIO__enDisableAnalogModeByNumber>:
    enErrorReg = GPIO__enSetAnalogModeByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enDisableAnalogModeByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8002b34:	b570      	push	{r4, r5, r6, lr}
 8002b36:	460c      	mov	r4, r1
 8002b38:	b084      	sub	sp, #16
 8002b3a:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe fd0a 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8002b44:	b108      	cbz	r0, 8002b4a <GPIO__enDisableAnalogModeByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetAnalogModeByNumber(enPortArg, enPinArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}
 8002b46:	b004      	add	sp, #16
 8002b48:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_AMSEL_OFFSET;
 8002b4e:	f44f 66a5 	mov.w	r6, #1320	; 0x528
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b52:	4669      	mov	r1, sp
 8002b54:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8002b56:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_AMSEL_OFFSET;
 8002b58:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8002b5a:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b5e:	f001 fd03 	bl	8004568 <GPIO__enWriteRegister>
}
 8002b62:	b004      	add	sp, #16
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	bf00      	nop

08002b68 <GPIO__enEnableDigitalModeByNumber>:
    enErrorReg = GPIO__enSetDigitalModeByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enEnableDigitalModeByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	b084      	sub	sp, #16
 8002b6e:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002b70:	2108      	movs	r1, #8
 8002b72:	4620      	mov	r0, r4
 8002b74:	f7fe fcf0 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8002b78:	b108      	cbz	r0, 8002b7e <GPIO__enEnableDigitalModeByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetDigitalModeByNumber(enPortArg, enPinArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_DEN_OFFSET;
 8002b82:	f240 561c 	movw	r6, #1308	; 0x51c
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b86:	4669      	mov	r1, sp
 8002b88:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8002b8a:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_DEN_OFFSET;
 8002b8c:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8002b8e:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002b92:	f001 fce9 	bl	8004568 <GPIO__enWriteRegister>
}
 8002b96:	b004      	add	sp, #16
 8002b98:	bd70      	pop	{r4, r5, r6, pc}
 8002b9a:	bf00      	nop

08002b9c <GPIO__enSetPeripheralMuxByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetPeripheralMuxByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                         UBase_t uxMuxArg)
{
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002ba4:	2108      	movs	r1, #8
 8002ba6:	4620      	mov	r0, r4
{
 8002ba8:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8002baa:	f7fe fcd5 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8002bae:	b108      	cbz	r0, 8002bb4 <GPIO__enSetPeripheralMuxByNumber+0x18>
        stRegister.uxValue = (UBase_t) uxMuxArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 8002bb0:	b004      	add	sp, #16
 8002bb2:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_PCTL_PIN0_MASK;
 8002bb4:	220f      	movs	r2, #15
        stRegister.uptrAddress = GPIO_PCTL_OFFSET;
 8002bb6:	f240 532c 	movw	r3, #1324	; 0x52c
        stRegister.uxShift *= (GPIO_PCTL_R_PIN1_BIT - GPIO_PCTL_R_PIN0_BIT);
 8002bba:	00a4      	lsls	r4, r4, #2
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002bbc:	4669      	mov	r1, sp
 8002bbe:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_PCTL_OFFSET;
 8002bc0:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) uxMuxArg;
 8002bc2:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_PCTL_PIN0_MASK;
 8002bc4:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8002bc8:	f001 fcce 	bl	8004568 <GPIO__enWriteRegister>
}
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd70      	pop	{r4, r5, r6, pc}

08002bd0 <SYSCTL__enEnableRunMode>:
    }
    return (enErrorReg);
}

SYSCTL_nERROR SYSCTL__enEnableRunMode(SYSCTL_nMODULE enModuleArg, SYSCTL_nPERIPHERAL enPeripheralArg)
{
 8002bd0:	b530      	push	{r4, r5, lr}
    enRegister.uptrAddress = SYSCTL_RCGC_OFFSET;
 8002bd2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
{
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	4604      	mov	r4, r0
 8002bda:	460d      	mov	r5, r1
    enRegister.uptrAddress = SYSCTL_RCGC_OFFSET;
 8002bdc:	9305      	str	r3, [sp, #20]
    enRegister.uxValue = (UBase_t) enStateArg;
 8002bde:	2301      	movs	r3, #1
    enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8002be0:	aa02      	add	r2, sp, #8
    enRegister.uxValue = (UBase_t) enStateArg;
 8002be2:	9302      	str	r3, [sp, #8]
    enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8002be4:	f001 ff52 	bl	8004a8c <SYSCTL__enWritePeripheral>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002be8:	b950      	cbnz	r0, 8002c00 <SYSCTL__enEnableRunMode+0x30>
        enStatusReg = SYSCTL_enFALSE;
 8002bea:	9001      	str	r0, [sp, #4]
 8002bec:	e001      	b.n	8002bf2 <SYSCTL__enEnableRunMode+0x22>
        }while((SYSCTL_enERROR_OK == enErrorReg) &&
 8002bee:	9b01      	ldr	r3, [sp, #4]
 8002bf0:	b933      	cbnz	r3, 8002c00 <SYSCTL__enEnableRunMode+0x30>
            enErrorReg = SYSCTL__enIsPeripheralReady(enModuleArg, enPeripheralArg, &enStatusReg);
 8002bf2:	aa01      	add	r2, sp, #4
 8002bf4:	4629      	mov	r1, r5
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f001 ff74 	bl	8004ae4 <SYSCTL__enIsPeripheralReady>
               (SYSCTL_enFALSE == enStatusReg));
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	d0f6      	beq.n	8002bee <SYSCTL__enEnableRunMode+0x1e>
    SYSCTL_nERROR enErrorReg;
    enErrorReg =SYSCTL__enSetRunModeState(enModuleArg, enPeripheralArg, SYSCTL_enSTATE_ENA);
    return (enErrorReg);
}
 8002c00:	b007      	add	sp, #28
 8002c02:	bd30      	pop	{r4, r5, pc}

08002c04 <SYSCTL__enGetVCOClockFrequency>:
    }
    return (enErrorReg);
}

SYSCTL_nERROR SYSCTL__enGetVCOClockFrequency(SYSCTL_nMODULE enModuleArg, UBase_t *puxVCOFrequency)
{
 8002c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    UBase_t uxFrequencyClockReg;
    uint64_t u64FrequencyInReg;
    SYSCTL_nOSCCLK_SRC enPLLClockSourceReg;
    SYSCTL_nERROR enErrorReg;

    uxPLLNValueReg = 0UL;
 8002c08:	2300      	movs	r3, #0
{
 8002c0a:	b086      	sub	sp, #24
    uxPLLQValueReg = 0UL;
 8002c0c:	e9cd 3300 	strd	r3, r3, [sp]
    uxPLLMIntegerValueReg = 0UL;
    uxPLLMFractionalValueReg = 0UL;
 8002c10:	e9cd 3302 	strd	r3, r3, [sp, #8]
    uxFrequencyClockReg = 0UL;
    enPLLClockSourceReg = SYSCTL_enOSCCLK_SRC_PIOSC;
 8002c14:	9304      	str	r3, [sp, #16]
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxVCOFrequency)
 8002c16:	b179      	cbz	r1, 8002c38 <SYSCTL__enGetVCOClockFrequency+0x34>
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
         enErrorReg = SYSCTL__enGetPLLClockSource(enModuleArg, &enPLLClockSourceReg);
 8002c18:	460e      	mov	r6, r1
 8002c1a:	a904      	add	r1, sp, #16
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	f001 fe71 	bl	8004904 <SYSCTL__enGetPLLClockSource>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c22:	4604      	mov	r4, r0
 8002c24:	b920      	cbnz	r0, 8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
    {
        if(SYSCTL_enOSCCLK_SRC_PIOSC == enPLLClockSourceReg)
 8002c26:	9b04      	ldr	r3, [sp, #16]
 8002c28:	b15b      	cbz	r3, 8002c42 <SYSCTL__enGetVCOClockFrequency+0x3e>
                {
                    enErrorReg = SYSCTL__enGetPIOSCFrequency(&uxFrequencyClockReg);
                }
            }
        }
        else if(SYSCTL_enOSCCLK_SRC_MOSC == enPLLClockSourceReg)
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d016      	beq.n	8002c5c <SYSCTL__enGetVCOClockFrequency+0x58>
        {
            enErrorReg = SYSCTL__enGetMOSCFrequency(&uxFrequencyClockReg);
        }
        else
        {
            enErrorReg = SYSCTL_enERROR_VALUE;
 8002c2e:	2402      	movs	r4, #2
        u64FrequencyInReg /= uxPLLQValueReg;

        *puxVCOFrequency =  (UBase_t) u64FrequencyInReg;
    }
    return (enErrorReg);
}
 8002c30:	4620      	mov	r0, r4
 8002c32:	b006      	add	sp, #24
 8002c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8002c38:	2401      	movs	r4, #1
}
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	b006      	add	sp, #24
 8002c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            enErrorReg = SYSCTL__enGetMOSCState(enModuleArg, &enMOSCState);
 8002c42:	a905      	add	r1, sp, #20
 8002c44:	4628      	mov	r0, r5
            enMOSCState = SYSCTL_enSTATE_DIS;
 8002c46:	9305      	str	r3, [sp, #20]
            enErrorReg = SYSCTL__enGetMOSCState(enModuleArg, &enMOSCState);
 8002c48:	f001 feb0 	bl	80049ac <SYSCTL__enGetMOSCState>
            if(SYSCTL_enERROR_OK == enErrorReg)
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	2800      	cmp	r0, #0
 8002c50:	d1ee      	bne.n	8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
                if(SYSCTL_enSTATE_DIS == enMOSCState)
 8002c52:	9f05      	ldr	r7, [sp, #20]
 8002c54:	2f00      	cmp	r7, #0
 8002c56:	d140      	bne.n	8002cda <SYSCTL__enGetVCOClockFrequency+0xd6>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c58:	46b8      	mov	r8, r7
 8002c5a:	e001      	b.n	8002c60 <SYSCTL__enGetVCOClockFrequency+0x5c>
 8002c5c:	4f20      	ldr	r7, [pc, #128]	; (8002ce0 <SYSCTL__enGetVCOClockFrequency+0xdc>)
 8002c5e:	4680      	mov	r8, r0
        enErrorReg = SYSCTL__enGetPLLClockValue_N(enModuleArg, &uxPLLNValueReg);
 8002c60:	4669      	mov	r1, sp
 8002c62:	4628      	mov	r0, r5
 8002c64:	f001 fefc 	bl	8004a60 <SYSCTL__enGetPLLClockValue_N>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c68:	4604      	mov	r4, r0
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d1e0      	bne.n	8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
        enErrorReg = SYSCTL__enGetPLLClockValue_Q(enModuleArg, &uxPLLQValueReg);
 8002c6e:	a901      	add	r1, sp, #4
 8002c70:	4628      	mov	r0, r5
 8002c72:	f001 fedf 	bl	8004a34 <SYSCTL__enGetPLLClockValue_Q>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c76:	4604      	mov	r4, r0
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d1d9      	bne.n	8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
        enErrorReg = SYSCTL__enGetPLLClockIntegerValue_M(enModuleArg, &uxPLLMIntegerValueReg);
 8002c7c:	a902      	add	r1, sp, #8
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f001 feac 	bl	80049dc <SYSCTL__enGetPLLClockIntegerValue_M>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c84:	4604      	mov	r4, r0
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d1d2      	bne.n	8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
        enErrorReg = SYSCTL__enGetPLLClockFractionalValue_M(enModuleArg, &uxPLLMFractionalValueReg);
 8002c8a:	a903      	add	r1, sp, #12
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f001 febb 	bl	8004a08 <SYSCTL__enGetPLLClockFractionalValue_M>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002c92:	4604      	mov	r4, r0
 8002c94:	2800      	cmp	r0, #0
 8002c96:	d1cb      	bne.n	8002c30 <SYSCTL__enGetVCOClockFrequency+0x2c>
        u64FrequencyInReg += uxPLLMFractionalValueReg;
 8002c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8002ca2:	fbe3 0102 	umlal	r0, r1, r3, r2
        u64FrequencyInReg *= uxFrequencyClockReg;
 8002ca6:	fb07 f101 	mul.w	r1, r7, r1
        uxPLLNValueReg += 1UL;
 8002caa:	9a00      	ldr	r2, [sp, #0]
        u64FrequencyInReg /= uxPLLNValueReg;
 8002cac:	4623      	mov	r3, r4
        u64FrequencyInReg *= uxFrequencyClockReg;
 8002cae:	fb00 1108 	mla	r1, r0, r8, r1
 8002cb2:	fba7 0700 	umull	r0, r7, r7, r0
        u64FrequencyInReg /= uxPLLNValueReg;
 8002cb6:	3201      	adds	r2, #1
        u64FrequencyInReg *= uxFrequencyClockReg;
 8002cb8:	4439      	add	r1, r7
        u64FrequencyInReg /= 1024UL;
 8002cba:	0a80      	lsrs	r0, r0, #10
        u64FrequencyInReg /= uxPLLNValueReg;
 8002cbc:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
 8002cc0:	0a89      	lsrs	r1, r1, #10
 8002cc2:	f7fe f8d1 	bl	8000e68 <__aeabi_uldivmod>
        uxPLLQValueReg += 1UL;
 8002cc6:	9a01      	ldr	r2, [sp, #4]
        u64FrequencyInReg /= uxPLLQValueReg;
 8002cc8:	4623      	mov	r3, r4
 8002cca:	3201      	adds	r2, #1
 8002ccc:	f7fe f8cc 	bl	8000e68 <__aeabi_uldivmod>
        *puxVCOFrequency =  (UBase_t) u64FrequencyInReg;
 8002cd0:	6030      	str	r0, [r6, #0]
}
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	b006      	add	sp, #24
 8002cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002cda:	4f02      	ldr	r7, [pc, #8]	; (8002ce4 <SYSCTL__enGetVCOClockFrequency+0xe0>)
 8002cdc:	4680      	mov	r8, r0
 8002cde:	e7bf      	b.n	8002c60 <SYSCTL__enGetVCOClockFrequency+0x5c>
 8002ce0:	017d7840 	.word	0x017d7840
 8002ce4:	00f42400 	.word	0x00f42400

08002ce8 <SYSCTL__enGetAlternateClockFrequency>:

SYSCTL_nERROR SYSCTL__enGetAlternateClockFrequency(SYSCTL_nMODULE enModuleArg, UBase_t* puxFrequencyArg)
{
 8002ce8:	b510      	push	{r4, lr}
    UBase_t uxFrequencyReg;
    SYSCTL_nALTCLK_SRC enClockSourceReg;
    SYSCTL_nERROR enErrorReg;

    uxFrequencyReg = 0UL;
    enClockSourceReg = SYSCTL_enALTCLK_SRC_PIOSC;
 8002cea:	2300      	movs	r3, #0
{
 8002cec:	b082      	sub	sp, #8
    enClockSourceReg = SYSCTL_enALTCLK_SRC_PIOSC;
 8002cee:	9301      	str	r3, [sp, #4]
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxFrequencyArg)
 8002cf0:	b169      	cbz	r1, 8002d0e <SYSCTL__enGetAlternateClockFrequency+0x26>
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        enErrorReg = SYSCTL__enGetAlternateClockSource(enModuleArg, &enClockSourceReg);
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	a901      	add	r1, sp, #4
 8002cf6:	f001 fddb 	bl	80048b0 <SYSCTL__enGetAlternateClockSource>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002cfa:	b930      	cbnz	r0, 8002d0a <SYSCTL__enGetAlternateClockFrequency+0x22>
    {
        switch(enClockSourceReg)
 8002cfc:	9b01      	ldr	r3, [sp, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d00f      	beq.n	8002d22 <SYSCTL__enGetAlternateClockFrequency+0x3a>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d006      	beq.n	8002d14 <SYSCTL__enGetAlternateClockFrequency+0x2c>
 8002d06:	b153      	cbz	r3, 8002d1e <SYSCTL__enGetAlternateClockFrequency+0x36>
 8002d08:	2002      	movs	r0, #2
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        *puxFrequencyArg = (UBase_t) uxFrequencyReg;
    }
    return (enErrorReg);
}
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8002d0e:	2001      	movs	r0, #1
}
 8002d10:	b002      	add	sp, #8
 8002d12:	bd10      	pop	{r4, pc}
        switch(enClockSourceReg)
 8002d14:	f248 03e8 	movw	r3, #33000	; 0x80e8
        *puxFrequencyArg = (UBase_t) uxFrequencyReg;
 8002d18:	6023      	str	r3, [r4, #0]
}
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd10      	pop	{r4, pc}
        *puxFrequencyArg = SYSCTL_uxPIOSCFrequency;
 8002d1e:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <SYSCTL__enGetAlternateClockFrequency+0x40>)
 8002d20:	e7fa      	b.n	8002d18 <SYSCTL__enGetAlternateClockFrequency+0x30>
            uxFrequencyReg = 32768UL;
 8002d22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d26:	e7f7      	b.n	8002d18 <SYSCTL__enGetAlternateClockFrequency+0x30>
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <SYSCTL__enGetSystemClockFrequency>:
    }
    return (enErrorReg);
}

SYSCTL_nERROR SYSCTL__enGetSystemClockFrequency(SYSCTL_nMODULE enModuleArg, UBase_t* puxFrequencyArg)
{
 8002d2c:	b570      	push	{r4, r5, r6, lr}
    UBase_t uxFrequencyReg;
    SYSCTL_nSYSCLK_SRC enClockSourceReg;
    SYSCTL_nERROR enErrorReg;

    enClockSourceReg = SYSCTL_enSYSCLK_SRC_OSCCLK;
 8002d2e:	2300      	movs	r3, #0
{
 8002d30:	b084      	sub	sp, #16
    enClockSourceReg = SYSCTL_enSYSCLK_SRC_OSCCLK;
 8002d32:	9301      	str	r3, [sp, #4]
    uxFrequencyReg = 0UL;
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxFrequencyArg)
 8002d34:	b199      	cbz	r1, 8002d5e <SYSCTL__enGetSystemClockFrequency+0x32>
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        enErrorReg = SYSCTL__enGetSystemClockSource(enModuleArg, &enClockSourceReg);
 8002d36:	460d      	mov	r5, r1
 8002d38:	a901      	add	r1, sp, #4
 8002d3a:	4606      	mov	r6, r0
 8002d3c:	f001 fdce 	bl	80048dc <SYSCTL__enGetSystemClockSource>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002d40:	4604      	mov	r4, r0
 8002d42:	b948      	cbnz	r0, 8002d58 <SYSCTL__enGetSystemClockFrequency+0x2c>
    {
        if(SYSCTL_enSYSCLK_SRC_OSCCLK == enClockSourceReg)
 8002d44:	9b01      	ldr	r3, [sp, #4]
 8002d46:	b973      	cbnz	r3, 8002d66 <SYSCTL__enGetSystemClockFrequency+0x3a>
        enErrorReg = SYSCTL__enGetOscillatorClockSource(enModuleArg, &enClockSourceReg);
 8002d48:	a903      	add	r1, sp, #12
 8002d4a:	4630      	mov	r0, r6
    enClockSourceReg = SYSCTL_enOSCCLK_SRC_PIOSC;
 8002d4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
        enErrorReg = SYSCTL__enGetOscillatorClockSource(enModuleArg, &enClockSourceReg);
 8002d50:	f001 fdec 	bl	800492c <SYSCTL__enGetOscillatorClockSource>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002d54:	b1f0      	cbz	r0, 8002d94 <SYSCTL__enGetSystemClockFrequency+0x68>
            enErrorReg = SYSCTL_enERROR_VALUE;
 8002d56:	4604      	mov	r4, r0
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        *puxFrequencyArg = uxFrequencyReg;
    }
    return (enErrorReg);
}
 8002d58:	4620      	mov	r0, r4
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8002d5e:	2401      	movs	r4, #1
}
 8002d60:	4620      	mov	r0, r4
 8002d62:	b004      	add	sp, #16
 8002d64:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = SYSCTL__enGetVCOClockFrequency(enModuleArg, &uxVCOFreqReg);
 8002d66:	a902      	add	r1, sp, #8
 8002d68:	4630      	mov	r0, r6
    uxDivisorReg = 0UL;
 8002d6a:	e9cd 4402 	strd	r4, r4, [sp, #8]
        enErrorReg = SYSCTL__enGetVCOClockFrequency(enModuleArg, &uxVCOFreqReg);
 8002d6e:	f7ff ff49 	bl	8002c04 <SYSCTL__enGetVCOClockFrequency>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002d72:	2800      	cmp	r0, #0
 8002d74:	d1ef      	bne.n	8002d56 <SYSCTL__enGetSystemClockFrequency+0x2a>
        enErrorReg = SYSCTL__enGetPLLClockDivisor(enModuleArg, &uxDivisorReg);
 8002d76:	a903      	add	r1, sp, #12
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f001 fe01 	bl	8004980 <SYSCTL__enGetPLLClockDivisor>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	d1e9      	bne.n	8002d56 <SYSCTL__enGetSystemClockFrequency+0x2a>
        uxVCOFreqReg /= uxDivisorReg;
 8002d82:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
        uxDivisorReg += 1UL;
 8002d86:	3201      	adds	r2, #1
        uxVCOFreqReg /= uxDivisorReg;
 8002d88:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8002d8c:	4620      	mov	r0, r4
        *puxFrequencyArg = uxFrequencyReg;
 8002d8e:	602b      	str	r3, [r5, #0]
}
 8002d90:	b004      	add	sp, #16
 8002d92:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = SYSCTL__enGetOscillatorClockDivisor(enModuleArg, &uxDivisorReg);
 8002d94:	a902      	add	r1, sp, #8
 8002d96:	4630      	mov	r0, r6
 8002d98:	f001 fddc 	bl	8004954 <SYSCTL__enGetOscillatorClockDivisor>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d1da      	bne.n	8002d56 <SYSCTL__enGetSystemClockFrequency+0x2a>
        switch(enClockSourceReg)
 8002da0:	9b03      	ldr	r3, [sp, #12]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d81e      	bhi.n	8002de4 <SYSCTL__enGetSystemClockFrequency+0xb8>
 8002da6:	e8df f003 	tbb	[pc, r3]
 8002daa:	1d17      	.short	0x1d17
 8002dac:	0a10      	.short	0x0a10
 8002dae:	03          	.byte	0x03
 8002daf:	00          	.byte	0x00
        uxDivisorReg += 1UL;
 8002db0:	9a02      	ldr	r2, [sp, #8]
        uxFrequencyReg /= uxDivisorReg;
 8002db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
        uxDivisorReg += 1UL;
 8002db6:	3201      	adds	r2, #1
        uxFrequencyReg /= uxDivisorReg;
 8002db8:	fbb3 f3f2 	udiv	r3, r3, r2
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002dbc:	e7e6      	b.n	8002d8c <SYSCTL__enGetSystemClockFrequency+0x60>
        uxDivisorReg += 1UL;
 8002dbe:	9a02      	ldr	r2, [sp, #8]
        uxFrequencyReg /= uxDivisorReg;
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <SYSCTL__enGetSystemClockFrequency+0xbc>)
        uxDivisorReg += 1UL;
 8002dc2:	3201      	adds	r2, #1
        uxFrequencyReg /= uxDivisorReg;
 8002dc4:	fbb3 f3f2 	udiv	r3, r3, r2
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002dc8:	e7e0      	b.n	8002d8c <SYSCTL__enGetSystemClockFrequency+0x60>
        uxDivisorReg += 1UL;
 8002dca:	9a02      	ldr	r2, [sp, #8]
        uxFrequencyReg /= uxDivisorReg;
 8002dcc:	f248 03e8 	movw	r3, #33000	; 0x80e8
        uxDivisorReg += 1UL;
 8002dd0:	3201      	adds	r2, #1
        uxFrequencyReg /= uxDivisorReg;
 8002dd2:	fbb3 f3f2 	udiv	r3, r3, r2
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002dd6:	e7d9      	b.n	8002d8c <SYSCTL__enGetSystemClockFrequency+0x60>
        uxDivisorReg += 1UL;
 8002dd8:	9a02      	ldr	r2, [sp, #8]
        uxFrequencyReg /= uxDivisorReg;
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <SYSCTL__enGetSystemClockFrequency+0xc0>)
        uxDivisorReg += 1UL;
 8002ddc:	3201      	adds	r2, #1
        uxFrequencyReg /= uxDivisorReg;
 8002dde:	fbb3 f3f2 	udiv	r3, r3, r2
    if(SYSCTL_enERROR_OK == enErrorReg)
 8002de2:	e7d3      	b.n	8002d8c <SYSCTL__enGetSystemClockFrequency+0x60>
            enErrorReg = SYSCTL_enERROR_VALUE;
 8002de4:	2402      	movs	r4, #2
 8002de6:	e7b7      	b.n	8002d58 <SYSCTL__enGetSystemClockFrequency+0x2c>
 8002de8:	017d7840 	.word	0x017d7840
 8002dec:	00f42400 	.word	0x00f42400

08002df0 <UART__enSetClearToSendMode>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetClearToSendMode(UART_nMODULE enModuleArg, UART_nLINE_MODE enModeArg)
{
 8002df0:	b510      	push	{r4, lr}
 8002df2:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_CTSEN_BIT;
    stRegister.uxMask = UART_CTL_CTSEN_MASK;
 8002df4:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002df6:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_CTSEN_BIT;
 8002df8:	240f      	movs	r4, #15
    stRegister.uxValue = (UBase_t) enModeArg;
 8002dfa:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002dfc:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_CTSEN_BIT;
 8002dfe:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_CTSEN_MASK;
 8002e00:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e02:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e04:	f000 f8dc 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd10      	pop	{r4, pc}

08002e0c <UART__enSetDataTerminalReadyLevel>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetDataTerminalReadyLevel(UART_nMODULE enModuleArg, UART_nLEVEL enLevelArg)
{
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_DTR_BIT;
    stRegister.uxMask = UART_CTL_DTR_MASK;
 8002e10:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e12:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_DTR_BIT;
 8002e14:	240a      	movs	r4, #10
    stRegister.uxValue = (UBase_t) enLevelArg;
 8002e16:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e18:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_DTR_BIT;
 8002e1a:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_DTR_MASK;
 8002e1c:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e1e:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e20:	f000 f8ce 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e24:	b004      	add	sp, #16
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <UART__enSetState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_UARTEN_BIT;
    stRegister.uxMask = UART_CTL_UARTEN_MASK;
 8002e2c:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e2e:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_UARTEN_BIT;
 8002e30:	2400      	movs	r4, #0
    stRegister.uxValue = (UBase_t) enStateArg;
 8002e32:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e34:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_UARTEN_BIT;
 8002e36:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_UARTEN_MASK;
 8002e38:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e3a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e3c:	f000 f8c0 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e40:	b004      	add	sp, #16
 8002e42:	bd10      	pop	{r4, pc}

08002e44 <UART__enSetEndOfTransmissionBehavior>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetEndOfTransmissionBehavior(UART_nMODULE enModuleArg, UART_nEOT enBehaviorArg)
{
 8002e44:	b510      	push	{r4, lr}
 8002e46:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_EOT_BIT;
    stRegister.uxMask = UART_CTL_EOT_MASK;
 8002e48:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e4a:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_EOT_BIT;
 8002e4c:	2404      	movs	r4, #4
    stRegister.uxValue = (UBase_t) enBehaviorArg;
 8002e4e:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e50:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_EOT_BIT;
 8002e52:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_EOT_MASK;
 8002e54:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e56:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e58:	f000 f8b2 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd10      	pop	{r4, pc}

08002e60 <UART__enSetLoopbackState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetLoopbackState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002e60:	b510      	push	{r4, lr}
 8002e62:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_LBE_BIT;
    stRegister.uxMask = UART_CTL_LBE_MASK;
 8002e64:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e66:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_LBE_BIT;
 8002e68:	2407      	movs	r4, #7
    stRegister.uxValue = (UBase_t) enStateArg;
 8002e6a:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e6c:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_LBE_BIT;
 8002e6e:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_LBE_MASK;
 8002e70:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e72:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e74:	f000 f8a4 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd10      	pop	{r4, pc}

08002e7c <UART__enSetRequestToSendMode>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetRequestToSendMode(UART_nMODULE enModuleArg, UART_nLINE_MODE enModeArg)
{
 8002e7c:	b510      	push	{r4, lr}
 8002e7e:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_RTSEN_BIT;
    stRegister.uxMask = UART_CTL_RTSEN_MASK;
 8002e80:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e82:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_RTSEN_BIT;
 8002e84:	240e      	movs	r4, #14
    stRegister.uxValue = (UBase_t) enModeArg;
 8002e86:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e88:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_RTSEN_BIT;
 8002e8a:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_RTSEN_MASK;
 8002e8c:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e8e:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002e90:	f000 f896 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002e94:	b004      	add	sp, #16
 8002e96:	bd10      	pop	{r4, pc}

08002e98 <UART__enSetRequestToSendLevel>:

    return (enErrorReg);
}

UART_nERROR UART__enSetRequestToSendLevel(UART_nMODULE enModuleArg, UART_nLEVEL enLevelArg)
{
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_RTS_BIT;
    stRegister.uxMask = UART_CTL_RTS_MASK;
 8002e9c:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002e9e:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_RTS_BIT;
 8002ea0:	240b      	movs	r4, #11
    stRegister.uxValue = (UBase_t) enLevelArg;
 8002ea2:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ea4:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_RTS_BIT;
 8002ea6:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_RTS_MASK;
 8002ea8:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002eaa:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002eac:	f000 f888 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd10      	pop	{r4, pc}

08002eb4 <UART__enSetReceiverState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetReceiverState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_RXE_BIT;
    stRegister.uxMask = UART_CTL_RXE_MASK;
 8002eb8:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002eba:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_RXE_BIT;
 8002ebc:	2409      	movs	r4, #9
    stRegister.uxValue = (UBase_t) enStateArg;
 8002ebe:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ec0:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_RXE_BIT;
 8002ec2:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_RXE_MASK;
 8002ec4:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002ec6:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ec8:	f000 f87a 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002ecc:	b004      	add	sp, #16
 8002ece:	bd10      	pop	{r4, pc}

08002ed0 <UART__enSetIrDAState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetIrDAState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002ed0:	b510      	push	{r4, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	460a      	mov	r2, r1
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_SIREN_BIT;
 8002ed6:	2301      	movs	r3, #1
    stRegister.uxMask = UART_CTL_SIREN_MASK;
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002ed8:	2430      	movs	r4, #48	; 0x30
    stRegister.uxValue = (UBase_t) enStateArg;
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002eda:	4669      	mov	r1, sp
    stRegister.uxValue = (UBase_t) enStateArg;
 8002edc:	9200      	str	r2, [sp, #0]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002ede:	9403      	str	r4, [sp, #12]
    stRegister.uxMask = UART_CTL_SIREN_MASK;
 8002ee0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ee4:	f000 f86c 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002ee8:	b004      	add	sp, #16
 8002eea:	bd10      	pop	{r4, pc}

08002eec <UART__enSetIrDALowPowerState>:
    return (enErrorReg);
}


UART_nERROR UART__enSetIrDALowPowerState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002eec:	b510      	push	{r4, lr}
 8002eee:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_SIRLP_BIT;
    stRegister.uxMask = UART_CTL_SIRLP_MASK;
 8002ef0:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002ef2:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_SIRLP_BIT;
 8002ef4:	2402      	movs	r4, #2
    stRegister.uxValue = (UBase_t) enStateArg;
 8002ef6:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ef8:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_SIRLP_BIT;
 8002efa:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_SIRLP_MASK;
 8002efc:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002efe:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002f00:	f000 f85e 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002f04:	b004      	add	sp, #16
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <UART__enSetSmartCardState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetSmartCardState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_SMART_BIT;
    stRegister.uxMask = UART_CTL_SMART_MASK;
 8002f0c:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f0e:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_SMART_BIT;
 8002f10:	2403      	movs	r4, #3
    stRegister.uxValue = (UBase_t) enStateArg;
 8002f12:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002f14:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_SMART_BIT;
 8002f16:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_SMART_MASK;
 8002f18:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f1a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002f1c:	f000 f850 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002f20:	b004      	add	sp, #16
 8002f22:	bd10      	pop	{r4, pc}

08002f24 <UART__enGetSmartCardState>:
{
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
 8002f24:	b181      	cbz	r1, 8002f48 <UART__enGetSmartCardState+0x24>
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = UART_CTL_R_SMART_BIT;
        stRegister.uxMask = UART_CTL_SMART_MASK;
 8002f26:	2201      	movs	r2, #1
        stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f28:	2330      	movs	r3, #48	; 0x30
{
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	460c      	mov	r4, r1
 8002f2e:	b084      	sub	sp, #16
        stRegister.uxShift = UART_CTL_R_SMART_BIT;
 8002f30:	2103      	movs	r1, #3
        stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f32:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = UART_CTL_SMART_MASK;
 8002f34:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = UART__enReadRegister(enModuleArg, &stRegister);
 8002f38:	4669      	mov	r1, sp
 8002f3a:	f000 f829 	bl	8002f90 <UART__enReadRegister>
    }
    if(UART_enERROR_OK == enErrorReg)
 8002f3e:	b908      	cbnz	r0, 8002f44 <UART__enGetSmartCardState+0x20>
    {
        *penStateArg = (UART_nSTATE) stRegister.uxValue;
 8002f40:	9b00      	ldr	r3, [sp, #0]
 8002f42:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8002f44:	b004      	add	sp, #16
 8002f46:	bd10      	pop	{r4, pc}
        enErrorReg = UART_enERROR_POINTER;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	4770      	bx	lr

08002f4c <UART__enSetTransmitState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetTransmitState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_TXE_BIT;
    stRegister.uxMask = UART_CTL_TXE_MASK;
 8002f50:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f52:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_TXE_BIT;
 8002f54:	2408      	movs	r4, #8
    stRegister.uxValue = (UBase_t) enStateArg;
 8002f56:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002f58:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_TXE_BIT;
 8002f5a:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_TXE_MASK;
 8002f5c:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8002f5e:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002f60:	f000 f82e 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8002f64:	b004      	add	sp, #16
 8002f66:	bd10      	pop	{r4, pc}

08002f68 <UART__enIsBusy>:
{
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
 8002f68:	b181      	cbz	r1, 8002f8c <UART__enIsBusy+0x24>
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = UART_FR_R_BUSY_BIT;
        stRegister.uxMask = UART_FR_BUSY_MASK;
 8002f6a:	2201      	movs	r2, #1
        stRegister.uptrAddress = UART_FR_OFFSET;
 8002f6c:	2318      	movs	r3, #24
{
 8002f6e:	b510      	push	{r4, lr}
 8002f70:	460c      	mov	r4, r1
 8002f72:	b084      	sub	sp, #16
        stRegister.uxShift = UART_FR_R_BUSY_BIT;
 8002f74:	2103      	movs	r1, #3
        stRegister.uptrAddress = UART_FR_OFFSET;
 8002f76:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = UART_FR_BUSY_MASK;
 8002f78:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = UART__enReadRegister(enModuleArg, &stRegister);
 8002f7c:	4669      	mov	r1, sp
 8002f7e:	f000 f807 	bl	8002f90 <UART__enReadRegister>
    }
    if(UART_enERROR_OK == enErrorReg)
 8002f82:	b908      	cbnz	r0, 8002f88 <UART__enIsBusy+0x20>
    {
        *penStateArg = (UART_nBOOLEAN) stRegister.uxValue;
 8002f84:	9b00      	ldr	r3, [sp, #0]
 8002f86:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd10      	pop	{r4, pc}
        enErrorReg = UART_enERROR_POINTER;
 8002f8c:	2001      	movs	r0, #1
}
 8002f8e:	4770      	bx	lr

08002f90 <UART__enReadRegister>:
UART_nERROR UART__enReadRegister(UART_nMODULE enModuleArg, UART_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    UART_nERROR enErrorReg;
    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8002f90:	b199      	cbz	r1, 8002fba <UART__enReadRegister+0x2a>
{
 8002f92:	b538      	push	{r3, r4, r5, lr}
 8002f94:	460c      	mov	r4, r1
    {
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 8002f96:	2108      	movs	r1, #8
 8002f98:	4605      	mov	r5, r0
 8002f9a:	f7fe fadd 	bl	8001558 <MCU__enCheckParams>
    }
    if(UART_enERROR_OK == enErrorReg)
 8002f9e:	b958      	cbnz	r0, 8002fb8 <UART__enReadRegister+0x28>
    {
        uptrModuleBase = UART__uptrBlockBaseAddress(enModuleArg);
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f000 f97b 	bl	800329c <UART__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8002fa6:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = UART__uptrBlockBaseAddress(enModuleArg);
 8002fa8:	4602      	mov	r2, r0
        enErrorReg = (UART_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 8002faa:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8002fac:	4413      	add	r3, r2
 8002fae:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 8002fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (UART_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 8002fb4:	f7fe bad6 	b.w	8001564 <MCU__enReadRegister>
}
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = UART_enERROR_POINTER;
 8002fba:	2001      	movs	r0, #1
}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop

08002fc0 <UART__enWriteRegister>:
UART_nERROR UART__enWriteRegister(UART_nMODULE enModuleArg, UART_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    UART_nERROR enErrorReg;
    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8002fc0:	b199      	cbz	r1, 8002fea <UART__enWriteRegister+0x2a>
{
 8002fc2:	b538      	push	{r3, r4, r5, lr}
 8002fc4:	460c      	mov	r4, r1
    {
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 8002fc6:	2108      	movs	r1, #8
 8002fc8:	4605      	mov	r5, r0
 8002fca:	f7fe fac5 	bl	8001558 <MCU__enCheckParams>
    }
    if(UART_enERROR_OK == enErrorReg)
 8002fce:	b958      	cbnz	r0, 8002fe8 <UART__enWriteRegister+0x28>
    {
        uptrModuleBase = UART__uptrBlockBaseAddress(enModuleArg);
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 f963 	bl	800329c <UART__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8002fd6:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = UART__uptrBlockBaseAddress(enModuleArg);
 8002fd8:	4602      	mov	r2, r0
        enErrorReg = (UART_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8002fda:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8002fdc:	4413      	add	r3, r2
 8002fde:	60e3      	str	r3, [r4, #12]
    }

    return (enErrorReg);
}
 8002fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (UART_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8002fe4:	f7fe be34 	b.w	8001c50 <MCU__enWriteRegister>
}
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = UART_enERROR_POINTER;
 8002fea:	2001      	movs	r0, #1
}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop

08002ff0 <UART__enSetFifoState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetFifoState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8002ff0:	b510      	push	{r4, lr}
 8002ff2:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_LCRH_R_FEN_BIT;
    stRegister.uxMask = UART_LCRH_FEN_MASK;
 8002ff4:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 8002ff6:	232c      	movs	r3, #44	; 0x2c
    stRegister.uxShift = UART_LCRH_R_FEN_BIT;
 8002ff8:	2404      	movs	r4, #4
    stRegister.uxValue = (UBase_t) enStateArg;
 8002ffa:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8002ffc:	4669      	mov	r1, sp
    stRegister.uxShift = UART_LCRH_R_FEN_BIT;
 8002ffe:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_LCRH_FEN_MASK;
 8003000:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 8003002:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003004:	f7ff ffdc 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8003008:	b004      	add	sp, #16
 800300a:	bd10      	pop	{r4, pc}

0800300c <UART__enSetLineControlStructure>:
    }
    return (enErrorReg);
}

UART_nERROR UART__enSetLineControlStructure(UART_nMODULE enModuleArg, const UART_LINE_CONTROL_t stLineControlArg)
{
 800300c:	b084      	sub	sp, #16
 800300e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003012:	ad09      	add	r5, sp, #36	; 0x24
 8003014:	4604      	mov	r4, r0
    UART_nERROR enErrorReg;
    enErrorReg = UART__enSetLineControl(enModuleArg,
 8003016:	4616      	mov	r6, r2
 8003018:	461f      	mov	r7, r3
 800301a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
{
 800301e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    enErrorReg = UART__enSetLineControl(enModuleArg,
 8003022:	460d      	mov	r5, r1
 8003024:	e9dd 180c 	ldrd	r1, r8, [sp, #48]	; 0x30
    enErrorReg = UART__enSetDataLength(enModuleArg, enDataLengthArg);
 8003028:	f001 fdb8 	bl	8004b9c <UART__enSetDataLength>
    if(UART_enERROR_OK == enErrorReg)
 800302c:	b118      	cbz	r0, 8003036 <UART__enSetLineControlStructure+0x2a>
                                        stLineControlArg.enDataLength, stLineControlArg.enFifoState,
                                        stLineControlArg.enStopBits, stLineControlArg.enParityType,
                                        stLineControlArg.enTransmitFifoLevel, stLineControlArg.enReceiveFifoLevel);
    return (enErrorReg);
}
 800302e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003032:	b004      	add	sp, #16
 8003034:	4770      	bx	lr
        enErrorReg = UART__enSetFifoState(enModuleArg, enFifoStateArg);
 8003036:	4629      	mov	r1, r5
 8003038:	4620      	mov	r0, r4
 800303a:	f7ff ffd9 	bl	8002ff0 <UART__enSetFifoState>
    if(UART_enERROR_OK == enErrorReg)
 800303e:	2800      	cmp	r0, #0
 8003040:	d1f5      	bne.n	800302e <UART__enSetLineControlStructure+0x22>
        if(UART_enSTATE_ENA == enFifoStateArg)
 8003042:	2d01      	cmp	r5, #1
 8003044:	d00c      	beq.n	8003060 <UART__enSetLineControlStructure+0x54>
        enErrorReg = UART__enSetStopBits(enModuleArg, enStopBitsArg);
 8003046:	4631      	mov	r1, r6
 8003048:	4620      	mov	r0, r4
 800304a:	f000 f877 	bl	800313c <UART__enSetStopBits>
    if(UART_enERROR_OK == enErrorReg)
 800304e:	2800      	cmp	r0, #0
 8003050:	d1ed      	bne.n	800302e <UART__enSetLineControlStructure+0x22>
        enErrorReg = UART__enSetParityType(enModuleArg, enParityTypeArg);
 8003052:	4639      	mov	r1, r7
 8003054:	4620      	mov	r0, r4
}
 8003056:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800305a:	b004      	add	sp, #16
        enErrorReg = UART__enSetParityType(enModuleArg, enParityTypeArg);
 800305c:	f000 b842 	b.w	80030e4 <UART__enSetParityType>
            enErrorReg = UART__enSetTransmitFifoLevel(enModuleArg, enTransmitFifoLevelArg);
 8003060:	4641      	mov	r1, r8
 8003062:	4620      	mov	r0, r4
 8003064:	f000 f8fe 	bl	8003264 <UART__enSetTransmitFifoLevel>
            if(UART_enERROR_OK == enErrorReg)
 8003068:	2800      	cmp	r0, #0
 800306a:	d1e0      	bne.n	800302e <UART__enSetLineControlStructure+0x22>
                enErrorReg = UART__enSetReceiveFifoLevel(enModuleArg, enReceiveFifoLevelArg);
 800306c:	4649      	mov	r1, r9
 800306e:	4620      	mov	r0, r4
 8003070:	f000 f8ea 	bl	8003248 <UART__enSetReceiveFifoLevel>
    if(UART_enERROR_OK == enErrorReg)
 8003074:	2800      	cmp	r0, #0
 8003076:	d0e6      	beq.n	8003046 <UART__enSetLineControlStructure+0x3a>
 8003078:	e7d9      	b.n	800302e <UART__enSetLineControlStructure+0x22>
 800307a:	bf00      	nop

0800307c <UART__enSetLineControlStructurePointer>:

UART_nERROR UART__enSetLineControlStructurePointer(UART_nMODULE enModuleArg, const UART_LINE_CONTROL_t* pstLineControlArg)
{
    UART_nERROR enErrorReg;
    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) pstLineControlArg)
 800307c:	b311      	cbz	r1, 80030c4 <UART__enSetLineControlStructurePointer+0x48>
{
 800307e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003082:	460b      	mov	r3, r1
 8003084:	4604      	mov	r4, r0
    {
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = UART__enSetLineControl(enModuleArg,
 8003086:	e9d1 5600 	ldrd	r5, r6, [r1]
 800308a:	e9d1 7102 	ldrd	r7, r1, [r1, #8]
 800308e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    enErrorReg = UART__enSetDataLength(enModuleArg, enDataLengthArg);
 8003092:	f001 fd83 	bl	8004b9c <UART__enSetDataLength>
    if(UART_enERROR_OK == enErrorReg)
 8003096:	b108      	cbz	r0, 800309c <UART__enSetLineControlStructurePointer+0x20>
                                            pstLineControlArg->enDataLength, pstLineControlArg->enFifoState,
                                            pstLineControlArg->enStopBits, pstLineControlArg->enParityType,
                                            pstLineControlArg->enTransmitFifoLevel, pstLineControlArg->enReceiveFifoLevel);
    }
    return (enErrorReg);
}
 8003098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        enErrorReg = UART__enSetFifoState(enModuleArg, enFifoStateArg);
 800309c:	4629      	mov	r1, r5
 800309e:	4620      	mov	r0, r4
 80030a0:	f7ff ffa6 	bl	8002ff0 <UART__enSetFifoState>
    if(UART_enERROR_OK == enErrorReg)
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d1f7      	bne.n	8003098 <UART__enSetLineControlStructurePointer+0x1c>
        if(UART_enSTATE_ENA == enFifoStateArg)
 80030a8:	2d01      	cmp	r5, #1
 80030aa:	d00d      	beq.n	80030c8 <UART__enSetLineControlStructurePointer+0x4c>
        enErrorReg = UART__enSetStopBits(enModuleArg, enStopBitsArg);
 80030ac:	4631      	mov	r1, r6
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 f844 	bl	800313c <UART__enSetStopBits>
    if(UART_enERROR_OK == enErrorReg)
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d1ef      	bne.n	8003098 <UART__enSetLineControlStructurePointer+0x1c>
        enErrorReg = UART__enSetParityType(enModuleArg, enParityTypeArg);
 80030b8:	4639      	mov	r1, r7
 80030ba:	4620      	mov	r0, r4
}
 80030bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        enErrorReg = UART__enSetParityType(enModuleArg, enParityTypeArg);
 80030c0:	f000 b810 	b.w	80030e4 <UART__enSetParityType>
        enErrorReg = UART_enERROR_POINTER;
 80030c4:	2001      	movs	r0, #1
}
 80030c6:	4770      	bx	lr
            enErrorReg = UART__enSetTransmitFifoLevel(enModuleArg, enTransmitFifoLevelArg);
 80030c8:	4641      	mov	r1, r8
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 f8ca 	bl	8003264 <UART__enSetTransmitFifoLevel>
            if(UART_enERROR_OK == enErrorReg)
 80030d0:	2800      	cmp	r0, #0
 80030d2:	d1e1      	bne.n	8003098 <UART__enSetLineControlStructurePointer+0x1c>
                enErrorReg = UART__enSetReceiveFifoLevel(enModuleArg, enReceiveFifoLevelArg);
 80030d4:	4649      	mov	r1, r9
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 f8b6 	bl	8003248 <UART__enSetReceiveFifoLevel>
    if(UART_enERROR_OK == enErrorReg)
 80030dc:	2800      	cmp	r0, #0
 80030de:	d0e5      	beq.n	80030ac <UART__enSetLineControlStructurePointer+0x30>
 80030e0:	e7da      	b.n	8003098 <UART__enSetLineControlStructurePointer+0x1c>
 80030e2:	bf00      	nop

080030e4 <UART__enSetParityType>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetParityType(UART_nMODULE enModuleArg, UART_nPARITY enParityArg)
{
 80030e4:	b530      	push	{r4, r5, lr}
    uxParityTypeReg = (UBase_t) enParityArg;
    uxParityTypeReg &= 1UL;

    stRegister.uxShift = UART_LCRH_R_PEN_BIT;
    stRegister.uptrAddress = UART_LCRH_OFFSET;
    stRegister.uxValue = (UBase_t) uxParityStateReg;
 80030e6:	2200      	movs	r2, #0
{
 80030e8:	b085      	sub	sp, #20
    stRegister.uxValue = (UBase_t) uxParityStateReg;
 80030ea:	2301      	movs	r3, #1
{
 80030ec:	460c      	mov	r4, r1
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 80030ee:	4669      	mov	r1, sp
{
 80030f0:	4605      	mov	r5, r0
    stRegister.uxValue = (UBase_t) uxParityStateReg;
 80030f2:	e9cd 2300 	strd	r2, r3, [sp]
 80030f6:	2201      	movs	r2, #1
 80030f8:	232c      	movs	r3, #44	; 0x2c
 80030fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 80030fe:	f7ff ff5f 	bl	8002fc0 <UART__enWriteRegister>
    if(UART_enERROR_OK == enErrorReg)
 8003102:	b108      	cbz	r0, 8003108 <UART__enSetParityType+0x24>
        stRegister.uptrAddress = UART_LCRH_OFFSET;
        stRegister.uxValue = (UBase_t) uxParityTypeReg;
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
    }
    return (enErrorReg);
}
 8003104:	b005      	add	sp, #20
 8003106:	bd30      	pop	{r4, r5, pc}
        stRegister.uxShift = UART_LCRH_R_SPS_BIT;
 8003108:	232c      	movs	r3, #44	; 0x2c
 800310a:	2207      	movs	r2, #7
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800310c:	4669      	mov	r1, sp
 800310e:	4628      	mov	r0, r5
        stRegister.uxShift = UART_LCRH_R_SPS_BIT;
 8003110:	e9cd 2302 	strd	r2, r3, [sp, #8]
    uxParityStickReg &= 1UL;
 8003114:	f3c4 0340 	ubfx	r3, r4, #1, #1
        stRegister.uxValue = (UBase_t) uxParityStickReg;
 8003118:	9300      	str	r3, [sp, #0]
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800311a:	f7ff ff51 	bl	8002fc0 <UART__enWriteRegister>
    if(UART_enERROR_OK == enErrorReg)
 800311e:	2800      	cmp	r0, #0
 8003120:	d1f0      	bne.n	8003104 <UART__enSetParityType+0x20>
        stRegister.uxShift = UART_LCRH_R_EPS_BIT;
 8003122:	2202      	movs	r2, #2
 8003124:	232c      	movs	r3, #44	; 0x2c
    uxParityTypeReg &= 1UL;
 8003126:	f004 0401 	and.w	r4, r4, #1
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800312a:	4669      	mov	r1, sp
 800312c:	4628      	mov	r0, r5
        stRegister.uxValue = (UBase_t) uxParityTypeReg;
 800312e:	9400      	str	r4, [sp, #0]
        stRegister.uxShift = UART_LCRH_R_EPS_BIT;
 8003130:	e9cd 2302 	strd	r2, r3, [sp, #8]
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003134:	f7ff ff44 	bl	8002fc0 <UART__enWriteRegister>
}
 8003138:	b005      	add	sp, #20
 800313a:	bd30      	pop	{r4, r5, pc}

0800313c <UART__enSetStopBits>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetStopBits(UART_nMODULE enModuleArg, UART_nSTOP enNumberArg)
{
 800313c:	b510      	push	{r4, lr}
 800313e:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_LCRH_R_STP2_BIT;
    stRegister.uxMask = UART_LCRH_STP2_MASK;
 8003140:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 8003142:	232c      	movs	r3, #44	; 0x2c
    stRegister.uxShift = UART_LCRH_R_STP2_BIT;
 8003144:	2403      	movs	r4, #3
    stRegister.uxValue = (UBase_t) enNumberArg;
 8003146:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003148:	4669      	mov	r1, sp
    stRegister.uxShift = UART_LCRH_R_STP2_BIT;
 800314a:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_LCRH_STP2_MASK;
 800314c:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 800314e:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003150:	f7ff ff36 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8003154:	b004      	add	sp, #16
 8003156:	bd10      	pop	{r4, pc}

08003158 <UART__enSetMultiDropState>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetMultiDropState(UART_nMODULE enModuleArg, UART_nSTATE enStateArg)
{
 8003158:	b510      	push	{r4, lr}
 800315a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_BIT9ADDR_R_BIT9EN_BIT;
    stRegister.uxMask = UART_BIT9ADDR_BIT9EN_MASK;
 800315c:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_BIT9ADDR_OFFSET;
 800315e:	23a4      	movs	r3, #164	; 0xa4
    stRegister.uxShift = UART_BIT9ADDR_R_BIT9EN_BIT;
 8003160:	240f      	movs	r4, #15
    stRegister.uxValue = (UBase_t) enStateArg;
 8003162:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003164:	4669      	mov	r1, sp
    stRegister.uxShift = UART_BIT9ADDR_R_BIT9EN_BIT;
 8003166:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_BIT9ADDR_BIT9EN_MASK;
 8003168:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_BIT9ADDR_OFFSET;
 800316a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800316c:	f7ff ff28 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8003170:	b004      	add	sp, #16
 8003172:	bd10      	pop	{r4, pc}

08003174 <UART__enSetSelfAddressWithMask>:

    return (enErrorReg);
}

UART_nERROR UART__enSetSelfAddressWithMask(UART_nMODULE enModuleArg, UBase_t uxAddressArg, UBase_t uxAddressMaskArg)
{
 8003174:	b5f0      	push	{r4, r5, r6, r7, lr}
    stRegister.uxShift = UART_BIT9ADDR_R_ADDR_BIT;
 8003176:	2300      	movs	r3, #0
{
 8003178:	b085      	sub	sp, #20
    stRegister.uxMask = UART_BIT9ADDR_ADDR_MASK;
 800317a:	27ff      	movs	r7, #255	; 0xff
{
 800317c:	4606      	mov	r6, r0
    stRegister.uxShift = UART_BIT9ADDR_R_ADDR_BIT;
 800317e:	9302      	str	r3, [sp, #8]
    stRegister.uptrAddress = UART_BIT9ADDR_OFFSET;
 8003180:	23a4      	movs	r3, #164	; 0xa4
    stRegister.uxValue = (UBase_t) uxAddressArg;
 8003182:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003184:	4669      	mov	r1, sp
{
 8003186:	4615      	mov	r5, r2
    stRegister.uxMask = UART_BIT9ADDR_ADDR_MASK;
 8003188:	9701      	str	r7, [sp, #4]
    stRegister.uptrAddress = UART_BIT9ADDR_OFFSET;
 800318a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800318c:	f7ff ff18 	bl	8002fc0 <UART__enWriteRegister>
    UART_nERROR enErrorReg;
    enErrorReg = UART__enSetSelfAddress(enModuleArg, uxAddressArg);
    if(UART_enERROR_OK == enErrorReg)
 8003190:	4604      	mov	r4, r0
 8003192:	b110      	cbz	r0, 800319a <UART__enSetSelfAddressWithMask+0x26>
    {
        UART__enSetSelfAddressMask(enModuleArg, uxAddressMaskArg);
    }
    return (enErrorReg);
}
 8003194:	4620      	mov	r0, r4
 8003196:	b005      	add	sp, #20
 8003198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stRegister.uptrAddress = UART_BIT9AMASK_OFFSET;
 800319a:	23a8      	movs	r3, #168	; 0xa8
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800319c:	4669      	mov	r1, sp
 800319e:	4630      	mov	r0, r6
    stRegister.uxValue = (UBase_t) uxAddressMaskArg;
 80031a0:	9500      	str	r5, [sp, #0]
    stRegister.uptrAddress = UART_BIT9AMASK_OFFSET;
 80031a2:	9303      	str	r3, [sp, #12]
    stRegister.uxMask = UART_BIT9AMASK_MASK_MASK;
 80031a4:	e9cd 7401 	strd	r7, r4, [sp, #4]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 80031a8:	f7ff ff0a 	bl	8002fc0 <UART__enWriteRegister>
}
 80031ac:	4620      	mov	r0, r4
 80031ae:	b005      	add	sp, #20
 80031b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031b2:	bf00      	nop

080031b4 <UART__enSetFifoDataByte>:
    UBase_t uxInitialCountReg;

    uxInitialCountReg = 0UL;
    uxCountReg = 0UL;
    enErrorReg = UART_enERROR_OK;
    if((0UL == (uintptr_t) puxCount) || (0UL == (uintptr_t) pu8DataArg))
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d044      	beq.n	8003242 <UART__enSetFifoDataByte+0x8e>
    enErrorReg = UART__enSetFifoDataTimeOut(enModuleArg, puxDataArg, puxCount, 0UL);
    return (enErrorReg);
}

UART_nERROR UART__enSetFifoDataByte(UART_nMODULE enModuleArg, const uint8_t* pu8DataArg, UBase_t* puxCount)
{
 80031b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((0UL == (uintptr_t) puxCount) || (0UL == (uintptr_t) pu8DataArg))
 80031bc:	fab1 f581 	clz	r5, r1
{
 80031c0:	b087      	sub	sp, #28
    if((0UL == (uintptr_t) puxCount) || (0UL == (uintptr_t) pu8DataArg))
 80031c2:	096d      	lsrs	r5, r5, #5
 80031c4:	b339      	cbz	r1, 8003216 <UART__enSetFifoDataByte+0x62>
        uxCountReg = *puxCount;
 80031c6:	f8d2 b000 	ldr.w	fp, [r2]
        if(0UL == uxCountReg)
 80031ca:	4692      	mov	sl, r2
 80031cc:	f1bb 0f00 	cmp.w	fp, #0
 80031d0:	d026      	beq.n	8003220 <UART__enSetFifoDataByte+0x6c>
 80031d2:	4604      	mov	r4, r0
 80031d4:	f101 38ff 	add.w	r8, r1, #4294967295
 80031d8:	46d9      	mov	r9, fp
        stRegister.uxMask = MCU_MASK_32;
 80031da:	f04f 37ff 	mov.w	r7, #4294967295
            uxDataReg = (UBase_t) u8DataReg;
 80031de:	f818 6f01 	ldrb.w	r6, [r8, #1]!
    enErrorReg = UART__enIsTransmitFifoFull(enModuleArg, &enIsFifoFull);
 80031e2:	a901      	add	r1, sp, #4
 80031e4:	4620      	mov	r0, r4
    enIsFifoFull = UART_enFALSE;
 80031e6:	9501      	str	r5, [sp, #4]
    enErrorReg = UART__enIsTransmitFifoFull(enModuleArg, &enIsFifoFull);
 80031e8:	f001 fcb8 	bl	8004b5c <UART__enIsTransmitFifoFull>
    if(UART_enERROR_OK == enErrorReg)
 80031ec:	4603      	mov	r3, r0
 80031ee:	b9e0      	cbnz	r0, 800322a <UART__enSetFifoDataByte+0x76>
        if(UART_enTRUE == enIsFifoFull)
 80031f0:	9a01      	ldr	r2, [sp, #4]
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 80031f2:	a902      	add	r1, sp, #8
 80031f4:	4620      	mov	r0, r4
        if(UART_enTRUE == enIsFifoFull)
 80031f6:	2a01      	cmp	r2, #1
 80031f8:	d0f3      	beq.n	80031e2 <UART__enSetFifoDataByte+0x2e>
        stRegister.uptrAddress = UART_DR_OFFSET;
 80031fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
        stRegister.uxValue = (UBase_t) uxDataArg;
 80031fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003202:	f7ff fedd 	bl	8002fc0 <UART__enWriteRegister>
        }while(UART_enERROR_FULL == enErrorReg);
 8003206:	2808      	cmp	r0, #8
        enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003208:	4603      	mov	r3, r0
        }while(UART_enERROR_FULL == enErrorReg);
 800320a:	d0ea      	beq.n	80031e2 <UART__enSetFifoDataByte+0x2e>
            if(UART_enERROR_OK == enErrorReg)
 800320c:	b978      	cbnz	r0, 800322e <UART__enSetFifoDataByte+0x7a>
        }while((UART_enERROR_OK == enErrorReg) && (0UL != uxCountReg));
 800320e:	f1b9 0901 	subs.w	r9, r9, #1
 8003212:	d1e4      	bne.n	80031de <UART__enSetFifoDataByte+0x2a>
 8003214:	e00d      	b.n	8003232 <UART__enSetFifoDataByte+0x7e>
        enErrorReg = UART_enERROR_POINTER;
 8003216:	2301      	movs	r3, #1
    UART_nERROR enErrorReg;
    enErrorReg = UART__enSetFifoDataByteTimeOut(enModuleArg, pu8DataArg, puxCount, 0UL);
    return (enErrorReg);
}
 8003218:	4618      	mov	r0, r3
 800321a:	b007      	add	sp, #28
 800321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            enErrorReg = UART_enERROR_VALUE;
 8003220:	2302      	movs	r3, #2
}
 8003222:	4618      	mov	r0, r3
 8003224:	b007      	add	sp, #28
 8003226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }while(UART_enERROR_FULL == enErrorReg);
 800322a:	2808      	cmp	r0, #8
 800322c:	d0d9      	beq.n	80031e2 <UART__enSetFifoDataByte+0x2e>
    if((UART_enERROR_OK == enErrorReg) || (UART_enERROR_TIMEOUT == enErrorReg))
 800322e:	2b06      	cmp	r3, #6
 8003230:	d1f2      	bne.n	8003218 <UART__enSetFifoDataByte+0x64>
        *puxCount = uxInitialCountReg - uxCountReg ;
 8003232:	ebab 0209 	sub.w	r2, fp, r9
}
 8003236:	4618      	mov	r0, r3
        *puxCount = uxInitialCountReg - uxCountReg ;
 8003238:	f8ca 2000 	str.w	r2, [sl]
}
 800323c:	b007      	add	sp, #28
 800323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        enErrorReg = UART_enERROR_POINTER;
 8003242:	2301      	movs	r3, #1
}
 8003244:	4618      	mov	r0, r3
 8003246:	4770      	bx	lr

08003248 <UART__enSetReceiveFifoLevel>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetReceiveFifoLevel(UART_nMODULE enModuleArg, UART_nFIFO_LEVEL enFifoLevelArg)
{
 8003248:	b510      	push	{r4, lr}
 800324a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_IFLS_R_RXIFLSEL_BIT;
    stRegister.uxMask = UART_IFLS_RXIFLSEL_MASK;
 800324c:	2207      	movs	r2, #7
    stRegister.uptrAddress = UART_IFLS_OFFSET;
 800324e:	2334      	movs	r3, #52	; 0x34
    stRegister.uxShift = UART_IFLS_R_RXIFLSEL_BIT;
 8003250:	2403      	movs	r4, #3
    stRegister.uxValue = (UBase_t) enFifoLevelArg;
 8003252:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003254:	4669      	mov	r1, sp
    stRegister.uxShift = UART_IFLS_R_RXIFLSEL_BIT;
 8003256:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_IFLS_RXIFLSEL_MASK;
 8003258:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_IFLS_OFFSET;
 800325a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800325c:	f7ff feb0 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8003260:	b004      	add	sp, #16
 8003262:	bd10      	pop	{r4, pc}

08003264 <UART__enSetTransmitFifoLevel>:

    return (enErrorReg);
}

UART_nERROR UART__enSetTransmitFifoLevel(UART_nMODULE enModuleArg, UART_nFIFO_LEVEL enFifoLevelArg)
{
 8003264:	b510      	push	{r4, lr}
 8003266:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_IFLS_R_TXIFLSEL_BIT;
    stRegister.uxMask = UART_IFLS_TXIFLSEL_MASK;
 8003268:	2207      	movs	r2, #7
    stRegister.uptrAddress = UART_IFLS_OFFSET;
 800326a:	2334      	movs	r3, #52	; 0x34
    stRegister.uxShift = UART_IFLS_R_TXIFLSEL_BIT;
 800326c:	2400      	movs	r4, #0
    stRegister.uxValue = (UBase_t) enFifoLevelArg;
 800326e:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003270:	4669      	mov	r1, sp
    stRegister.uxShift = UART_IFLS_R_TXIFLSEL_BIT;
 8003272:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_IFLS_TXIFLSEL_MASK;
 8003274:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_IFLS_OFFSET;
 8003276:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003278:	f7ff fea2 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 800327c:	b004      	add	sp, #16
 800327e:	bd10      	pop	{r4, pc}

08003280 <UART__enSetIrDALowPowerDivisor>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetIrDALowPowerDivisor(UART_nMODULE enModuleArg, UBase_t uxDivisorArg)
{
 8003280:	b510      	push	{r4, lr}
 8003282:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_ILPR_R_ILPDVSR_BIT;
    stRegister.uxMask = UART_ILPR_ILPDVSR_MASK;
 8003284:	22ff      	movs	r2, #255	; 0xff
    stRegister.uptrAddress = UART_ILPR_OFFSET;
 8003286:	2320      	movs	r3, #32
    stRegister.uxShift = UART_ILPR_R_ILPDVSR_BIT;
 8003288:	2400      	movs	r4, #0
    stRegister.uxValue = (UBase_t) uxDivisorArg;
 800328a:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 800328c:	4669      	mov	r1, sp
    stRegister.uxShift = UART_ILPR_R_ILPDVSR_BIT;
 800328e:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_ILPR_ILPDVSR_MASK;
 8003290:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_ILPR_OFFSET;
 8003292:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8003294:	f7ff fe94 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8003298:	b004      	add	sp, #16
 800329a:	bd10      	pop	{r4, pc}

0800329c <UART__uptrBlockBaseAddress>:
 * 22 ene. 2021     vyldram    1.0         initial Version@endverbatim
 */
#include <xDriver_MCU/UART/Peripheral/Register/RegisterPeripheral/UART_RegisterPeripheral.h>

uintptr_t UART__uptrBlockBaseAddress(UART_nMODULE enModuleArg)
{
 800329c:	b510      	push	{r4, lr}
 800329e:	b088      	sub	sp, #32
    const uintptr_t UART_BLOCK_BASE[(UBase_t) UART_enMODULE_MAX] =
 80032a0:	4c07      	ldr	r4, [pc, #28]	; (80032c0 <UART__uptrBlockBaseAddress+0x24>)
    {
     UART0_BASE, UART1_BASE, UART2_BASE, UART3_BASE,
     UART4_BASE, UART5_BASE, UART6_BASE, UART7_BASE
    };
    return (UART_BLOCK_BASE[(UBase_t) enModuleArg]);
 80032a2:	ab08      	add	r3, sp, #32
    const uintptr_t UART_BLOCK_BASE[(UBase_t) UART_enMODULE_MAX] =
 80032a4:	46ec      	mov	ip, sp
    return (UART_BLOCK_BASE[(UBase_t) enModuleArg]);
 80032a6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
    const uintptr_t UART_BLOCK_BASE[(UBase_t) UART_enMODULE_MAX] =
 80032aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80032b8:	f85e 0c20 	ldr.w	r0, [lr, #-32]
 80032bc:	b008      	add	sp, #32
 80032be:	bd10      	pop	{r4, pc}
 80032c0:	08007360 	.word	0x08007360

080032c4 <UART__enRegisterIRQVectorHandler>:

#include <xApplication_MCU/UART/Interrupt/InterruptRoutine/UART_InterruptRoutine.h>
#include <xApplication_MCU/UART/Intrinsics/xHeader/UART_Dependencies.h>

UART_nERROR UART__enRegisterIRQVectorHandler(UART_nMODULE enModuleArg, UART_pvfIRQVectorHandler_t pfIrqVectorHandlerArg)
{
 80032c4:	b570      	push	{r4, r5, r6, lr}
    const SCB_nVECISR SCB_enVECISR_UART[(UBase_t) UART_enMODULE_MAX] =
 80032c6:	4c13      	ldr	r4, [pc, #76]	; (8003314 <UART__enRegisterIRQVectorHandler+0x50>)
{
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	4605      	mov	r5, r0
 80032cc:	460e      	mov	r6, r1
    const SCB_nVECISR SCB_enVECISR_UART[(UBase_t) UART_enMODULE_MAX] =
 80032ce:	f10d 0c08 	add.w	ip, sp, #8
 80032d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80032d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80032dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    };
    SCB_nVECISR enVectorReg;
    UART_nERROR enErrorReg;
    UART_pvfIRQVectorHandler_t* pvfVectorHandlerReg;

    enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 80032e0:	2108      	movs	r1, #8
 80032e2:	4628      	mov	r0, r5
 80032e4:	f7fe f938 	bl	8001558 <MCU__enCheckParams>
    if(UART_enERROR_OK == enErrorReg)
 80032e8:	b108      	cbz	r0, 80032ee <UART__enRegisterIRQVectorHandler+0x2a>
        pvfVectorHandlerReg = UART__pvfGetIRQVectorHandlerPointer(enModuleArg);
        enErrorReg = (UART_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
    }
    return (enErrorReg);

}
 80032ea:	b00a      	add	sp, #40	; 0x28
 80032ec:	bd70      	pop	{r4, r5, r6, pc}
        enVectorReg = SCB_enVECISR_UART[(UBase_t) enModuleArg];
 80032ee:	ab0a      	add	r3, sp, #40	; 0x28
 80032f0:	4604      	mov	r4, r0
        pvfVectorHandlerReg = UART__pvfGetIRQVectorHandlerPointer(enModuleArg);
 80032f2:	4628      	mov	r0, r5
        enVectorReg = SCB_enVECISR_UART[(UBase_t) enModuleArg];
 80032f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80032f8:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80032fc:	9101      	str	r1, [sp, #4]
        pvfVectorHandlerReg = UART__pvfGetIRQVectorHandlerPointer(enModuleArg);
 80032fe:	f000 f811 	bl	8003324 <UART__pvfGetIRQVectorHandlerPointer>
        enErrorReg = (UART_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8003302:	4632      	mov	r2, r6
        pvfVectorHandlerReg = UART__pvfGetIRQVectorHandlerPointer(enModuleArg);
 8003304:	4603      	mov	r3, r0
        enErrorReg = (UART_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8003306:	9901      	ldr	r1, [sp, #4]
 8003308:	4620      	mov	r0, r4
}
 800330a:	b00a      	add	sp, #40	; 0x28
 800330c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        enErrorReg = (UART_nERROR) SCB__enRegisterIRQVectorHandler(SCB_enMODULE_0, enVectorReg, pfIrqVectorHandlerArg, pvfVectorHandlerReg);
 8003310:	f7fe b87e 	b.w	8001410 <SCB__enRegisterIRQVectorHandler>
 8003314:	08007380 	.word	0x08007380

08003318 <UART__pvfGetIRQVectorHandler>:
};

void (*UART__pvfGetIRQVectorHandler(UART_nMODULE enUARTModule))(void)
{
    void(*pvfFunctionReg)(void) = (void(*)(void)) 0UL;
    pvfFunctionReg = UART__pvIRQVectorHandler[(UBase_t) enUARTModule];
 8003318:	4b01      	ldr	r3, [pc, #4]	; (8003320 <UART__pvfGetIRQVectorHandler+0x8>)
    return (pvfFunctionReg);
}
 800331a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800331e:	4770      	bx	lr
 8003320:	20020200 	.word	0x20020200

08003324 <UART__pvfGetIRQVectorHandlerPointer>:

void (**UART__pvfGetIRQVectorHandlerPointer(UART_nMODULE enUARTModule))(void)
{
    void(**pvfFunctionReg)(void) = (void(**)(void)) 0UL;
    pvfFunctionReg = (void(**)(void)) &UART__pvIRQVectorHandler[(UBase_t) enUARTModule];
 8003324:	4b01      	ldr	r3, [pc, #4]	; (800332c <UART__pvfGetIRQVectorHandlerPointer+0x8>)
    return (pvfFunctionReg);
}
 8003326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800332a:	4770      	bx	lr
 800332c:	20020200 	.word	0x20020200

08003330 <UART0__vIRQVectorHandler>:
void UART0__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003330:	4b84      	ldr	r3, [pc, #528]	; (8003544 <UART0__vIRQVectorHandler+0x214>)
{
 8003332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uxReady = SYSCTL_PRUART_R;
 8003336:	f8d3 5a18 	ldr.w	r5, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART0_NOREADY == (SYSCTL_PRUART_R_UART0_MASK & uxReady))
 800333a:	f015 0501 	ands.w	r5, r5, #1
 800333e:	d03b      	beq.n	80033b8 <UART0__vIRQVectorHandler+0x88>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART0_MIS_R;
 8003340:	4e81      	ldr	r6, [pc, #516]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003342:	4882      	ldr	r0, [pc, #520]	; (800354c <UART0__vIRQVectorHandler+0x21c>)
        uxReg = (UBase_t) UART0_MIS_R;
 8003344:	6c34      	ldr	r4, [r6, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003346:	4020      	ands	r0, r4
 8003348:	b368      	cbz	r0, 80033a6 <UART0__vIRQVectorHandler+0x76>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_SW);
            pvfCallback(UART0_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 800334a:	07e1      	lsls	r1, r4, #31
 800334c:	f100 80ee 	bmi.w	800352c <UART0__vIRQVectorHandler+0x1fc>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RING_INDICATOR);
                pvfCallback(UART0_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003350:	07a2      	lsls	r2, r4, #30
 8003352:	f100 80df 	bmi.w	8003514 <UART0__vIRQVectorHandler+0x1e4>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART0_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003356:	0763      	lsls	r3, r4, #29
 8003358:	f100 80d0 	bmi.w	80034fc <UART0__vIRQVectorHandler+0x1cc>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 800335c:	0727      	lsls	r7, r4, #28
 800335e:	f100 80c1 	bmi.w	80034e4 <UART0__vIRQVectorHandler+0x1b4>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DATA_SET_READY);
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8003362:	06e6      	lsls	r6, r4, #27
 8003364:	f100 80b2 	bmi.w	80034cc <UART0__vIRQVectorHandler+0x19c>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE);
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003368:	06a0      	lsls	r0, r4, #26
 800336a:	f100 80a3 	bmi.w	80034b4 <UART0__vIRQVectorHandler+0x184>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_TRANSMIT);
                pvfCallback(UART0_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 800336e:	0661      	lsls	r1, r4, #25
 8003370:	f100 8094 	bmi.w	800349c <UART0__vIRQVectorHandler+0x16c>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8003374:	f014 0680 	ands.w	r6, r4, #128	; 0x80
 8003378:	f040 8083 	bne.w	8003482 <UART0__vIRQVectorHandler+0x152>
                boErrorFlag = UART_enTRUE;
                UART0_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_FRAME_ERROR);
                pvfCallback(UART0_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 800337c:	05e2      	lsls	r2, r4, #23
 800337e:	d472      	bmi.n	8003466 <UART0__vIRQVectorHandler+0x136>
                boErrorFlag = UART_enTRUE;
                UART0_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_PARITY_ERROR);
                pvfCallback(UART0_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 8003380:	05a3      	lsls	r3, r4, #22
 8003382:	d462      	bmi.n	800344a <UART0__vIRQVectorHandler+0x11a>
                boErrorFlag = UART_enTRUE;
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BREAK_ERROR);
                pvfCallback(UART0_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 8003384:	0567      	lsls	r7, r4, #21
 8003386:	d452      	bmi.n	800342e <UART0__vIRQVectorHandler+0xfe>
                boErrorFlag = UART_enTRUE;
                UART0_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART0_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 8003388:	04e0      	lsls	r0, r4, #19
 800338a:	d443      	bmi.n	8003414 <UART0__vIRQVectorHandler+0xe4>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BIT9_MODE);
                pvfCallback(UART0_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 800338c:	03e1      	lsls	r1, r4, #15
 800338e:	d434      	bmi.n	80033fa <UART0__vIRQVectorHandler+0xca>
            {
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 8003390:	03a2      	lsls	r2, r4, #14
 8003392:	d421      	bmi.n	80033d8 <UART0__vIRQVectorHandler+0xa8>
                UART0_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 8003394:	0523      	lsls	r3, r4, #20
 8003396:	d412      	bmi.n	80033be <UART0__vIRQVectorHandler+0x8e>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART0_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 8003398:	2e01      	cmp	r6, #1
 800339a:	d102      	bne.n	80033a2 <UART0__vIRQVectorHandler+0x72>
            {
                UART0_ECR_R = UART_ECR_R_DATA_CLEAR;
 800339c:	4b6a      	ldr	r3, [pc, #424]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	605a      	str	r2, [r3, #4]
            }
        }
    }
}
 80033a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_SW);
 80033a6:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_SW);
 80033a8:	f001 fbf0 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART0_BASE, (void*) UART_enINT_SW);
 80033ac:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_SW);
 80033ae:	4603      	mov	r3, r0
        pvfCallback(UART0_BASE, (void*) UART_enINT_SW);
 80033b0:	4865      	ldr	r0, [pc, #404]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
}
 80033b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        pvfCallback(UART0_BASE, (void*) UART_enINT_SW);
 80033b6:	4718      	bx	r3
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_SW);
 80033b8:	210f      	movs	r1, #15
 80033ba:	4628      	mov	r0, r5
 80033bc:	e7f4      	b.n	80033a8 <UART0__vIRQVectorHandler+0x78>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80033be:	4c62      	ldr	r4, [pc, #392]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80033c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_END_OF_TRANSMISSION);
 80033c4:	210b      	movs	r1, #11
 80033c6:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80033c8:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_END_OF_TRANSMISSION);
 80033ca:	f001 fbdf 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80033ce:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_END_OF_TRANSMISSION);
 80033d0:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80033d2:	4620      	mov	r0, r4
 80033d4:	4798      	blx	r3
 80033d6:	e7df      	b.n	8003398 <UART0__vIRQVectorHandler+0x68>
                UART0_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 80033d8:	4d5b      	ldr	r5, [pc, #364]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 80033da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DMA_TRANSMIT);
 80033de:	210e      	movs	r1, #14
 80033e0:	2000      	movs	r0, #0
                UART0_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 80033e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80033e4:	f023 0302 	bic.w	r3, r3, #2
 80033e8:	64ab      	str	r3, [r5, #72]	; 0x48
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 80033ea:	646a      	str	r2, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DMA_TRANSMIT);
 80033ec:	f001 fbce 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 80033f0:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DMA_TRANSMIT);
 80033f2:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 80033f4:	4628      	mov	r0, r5
 80033f6:	4798      	blx	r3
 80033f8:	e7cc      	b.n	8003394 <UART0__vIRQVectorHandler+0x64>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 80033fa:	4d53      	ldr	r5, [pc, #332]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80033fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DMA_RECEIVE);
 8003400:	210d      	movs	r1, #13
 8003402:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003404:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DMA_RECEIVE);
 8003406:	f001 fbc1 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_RECEIVE);
 800340a:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DMA_RECEIVE);
 800340c:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_DMA_RECEIVE);
 800340e:	4628      	mov	r0, r5
 8003410:	4798      	blx	r3
 8003412:	e7bd      	b.n	8003390 <UART0__vIRQVectorHandler+0x60>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003414:	4d4c      	ldr	r5, [pc, #304]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 8003416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BIT9_MODE);
 800341a:	210c      	movs	r1, #12
 800341c:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 800341e:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BIT9_MODE);
 8003420:	f001 fbb4 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_BIT9_MODE);
 8003424:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BIT9_MODE);
 8003426:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_BIT9_MODE);
 8003428:	4628      	mov	r0, r5
 800342a:	4798      	blx	r3
 800342c:	e7ae      	b.n	800338c <UART0__vIRQVectorHandler+0x5c>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 800342e:	4f46      	ldr	r7, [pc, #280]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 8003430:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_OVERRUN_ERROR);
 8003434:	210a      	movs	r1, #10
 8003436:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003438:	647b      	str	r3, [r7, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 800343a:	462e      	mov	r6, r5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_OVERRUN_ERROR);
 800343c:	f001 fba6 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003440:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_OVERRUN_ERROR);
 8003442:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003444:	4638      	mov	r0, r7
 8003446:	4798      	blx	r3
 8003448:	e79e      	b.n	8003388 <UART0__vIRQVectorHandler+0x58>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 800344a:	4e3f      	ldr	r6, [pc, #252]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 800344c:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BREAK_ERROR);
 8003450:	2109      	movs	r1, #9
 8003452:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003454:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BREAK_ERROR);
 8003456:	f001 fb99 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_BREAK_ERROR);
 800345a:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_BREAK_ERROR);
 800345c:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_BREAK_ERROR);
 800345e:	4630      	mov	r0, r6
 8003460:	4798      	blx	r3
                boErrorFlag = UART_enTRUE;
 8003462:	462e      	mov	r6, r5
 8003464:	e78e      	b.n	8003384 <UART0__vIRQVectorHandler+0x54>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003466:	4e38      	ldr	r6, [pc, #224]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 8003468:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_PARITY_ERROR);
 800346c:	2108      	movs	r1, #8
 800346e:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003470:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_PARITY_ERROR);
 8003472:	f001 fb8b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003476:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_PARITY_ERROR);
 8003478:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_PARITY_ERROR);
 800347a:	4630      	mov	r0, r6
 800347c:	4798      	blx	r3
                boErrorFlag = UART_enTRUE;
 800347e:	462e      	mov	r6, r5
 8003480:	e77e      	b.n	8003380 <UART0__vIRQVectorHandler+0x50>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003482:	4e31      	ldr	r6, [pc, #196]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 8003484:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_FRAME_ERROR);
 8003486:	2107      	movs	r1, #7
 8003488:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 800348a:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_FRAME_ERROR);
 800348c:	f001 fb7e 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003490:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_FRAME_ERROR);
 8003492:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003494:	4630      	mov	r0, r6
 8003496:	4798      	blx	r3
                boErrorFlag = UART_enTRUE;
 8003498:	462e      	mov	r6, r5
 800349a:	e76f      	b.n	800337c <UART0__vIRQVectorHandler+0x4c>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 800349c:	4e2a      	ldr	r6, [pc, #168]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 800349e:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE_TIMEOUT);
 80034a0:	2106      	movs	r1, #6
 80034a2:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 80034a4:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE_TIMEOUT);
 80034a6:	f001 fb71 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80034aa:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE_TIMEOUT);
 80034ac:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80034ae:	4630      	mov	r0, r6
 80034b0:	4798      	blx	r3
 80034b2:	e75f      	b.n	8003374 <UART0__vIRQVectorHandler+0x44>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80034b4:	4e24      	ldr	r6, [pc, #144]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80034b6:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_TRANSMIT);
 80034b8:	2105      	movs	r1, #5
 80034ba:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80034bc:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_TRANSMIT);
 80034be:	f001 fb65 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_TRANSMIT);
 80034c2:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_TRANSMIT);
 80034c4:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_TRANSMIT);
 80034c6:	4630      	mov	r0, r6
 80034c8:	4798      	blx	r3
 80034ca:	e750      	b.n	800336e <UART0__vIRQVectorHandler+0x3e>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 80034cc:	4e1e      	ldr	r6, [pc, #120]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80034ce:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE);
 80034d0:	2104      	movs	r1, #4
 80034d2:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 80034d4:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE);
 80034d6:	f001 fb59 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE);
 80034da:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RECEIVE);
 80034dc:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_RECEIVE);
 80034de:	4630      	mov	r0, r6
 80034e0:	4798      	blx	r3
 80034e2:	e741      	b.n	8003368 <UART0__vIRQVectorHandler+0x38>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 80034e4:	4e18      	ldr	r6, [pc, #96]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80034e6:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DATA_SET_READY);
 80034e8:	2103      	movs	r1, #3
 80034ea:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 80034ec:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DATA_SET_READY);
 80034ee:	f001 fb4d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_SET_READY);
 80034f2:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_DATA_SET_READY);
 80034f4:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_SET_READY);
 80034f6:	4630      	mov	r0, r6
 80034f8:	4798      	blx	r3
 80034fa:	e732      	b.n	8003362 <UART0__vIRQVectorHandler+0x32>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 80034fc:	4e12      	ldr	r6, [pc, #72]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 80034fe:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DATA_CARRIER_DETECT);
 8003500:	2102      	movs	r1, #2
 8003502:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003504:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DATA_CARRIER_DETECT);
 8003506:	f001 fb41 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 800350a:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0,  UART_enINT_DATA_CARRIER_DETECT);
 800350c:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 800350e:	4630      	mov	r0, r6
 8003510:	4798      	blx	r3
 8003512:	e723      	b.n	800335c <UART0__vIRQVectorHandler+0x2c>
                UART0_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003514:	4e0c      	ldr	r6, [pc, #48]	; (8003548 <UART0__vIRQVectorHandler+0x218>)
 8003516:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_CLEAR_TO_SEND);
 8003518:	2101      	movs	r1, #1
 800351a:	2000      	movs	r0, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 800351c:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_CLEAR_TO_SEND);
 800351e:	f001 fb35 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003522:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_CLEAR_TO_SEND);
 8003524:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003526:	4630      	mov	r0, r6
 8003528:	4798      	blx	r3
 800352a:	e714      	b.n	8003356 <UART0__vIRQVectorHandler+0x26>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RING_INDICATOR);
 800352c:	2100      	movs	r1, #0
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 800352e:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RING_INDICATOR);
 8003530:	4608      	mov	r0, r1
                UART0_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003532:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RING_INDICATOR);
 8003534:	f001 fb2a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART0_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003538:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_0, UART_enINT_RING_INDICATOR);
 800353a:	4603      	mov	r3, r0
                pvfCallback(UART0_BASE, (void*) UART_enINT_RING_INDICATOR);
 800353c:	4630      	mov	r0, r6
 800353e:	4798      	blx	r3
 8003540:	e706      	b.n	8003350 <UART0__vIRQVectorHandler+0x20>
 8003542:	bf00      	nop
 8003544:	400fe000 	.word	0x400fe000
 8003548:	4000c000 	.word	0x4000c000
 800354c:	00031fff 	.word	0x00031fff

08003550 <UART1__vIRQVectorHandler>:
void UART1__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003550:	4b81      	ldr	r3, [pc, #516]	; (8003758 <UART1__vIRQVectorHandler+0x208>)
 8003552:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART1_NOREADY == (SYSCTL_PRUART_R_UART1_MASK & uxReady))
 8003556:	0798      	lsls	r0, r3, #30
{
 8003558:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART1_NOREADY == (SYSCTL_PRUART_R_UART1_MASK & uxReady))
 800355a:	d52e      	bpl.n	80035ba <UART1__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART1_MIS_R;
 800355c:	4d7f      	ldr	r5, [pc, #508]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 800355e:	4b80      	ldr	r3, [pc, #512]	; (8003760 <UART1__vIRQVectorHandler+0x210>)
        uxReg = (UBase_t) UART1_MIS_R;
 8003560:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003562:	4023      	ands	r3, r4
 8003564:	b34b      	cbz	r3, 80035ba <UART1__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_SW);
            pvfCallback(UART1_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 8003566:	07e1      	lsls	r1, r4, #31
 8003568:	f100 80ec 	bmi.w	8003744 <UART1__vIRQVectorHandler+0x1f4>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RING_INDICATOR);
                pvfCallback(UART1_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 800356c:	07a2      	lsls	r2, r4, #30
 800356e:	f100 80dd 	bmi.w	800372c <UART1__vIRQVectorHandler+0x1dc>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART1_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003572:	0763      	lsls	r3, r4, #29
 8003574:	f100 80ce 	bmi.w	8003714 <UART1__vIRQVectorHandler+0x1c4>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 8003578:	0726      	lsls	r6, r4, #28
 800357a:	f100 80bf 	bmi.w	80036fc <UART1__vIRQVectorHandler+0x1ac>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DATA_SET_READY);
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 800357e:	06e5      	lsls	r5, r4, #27
 8003580:	f100 80b0 	bmi.w	80036e4 <UART1__vIRQVectorHandler+0x194>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE);
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003584:	06a0      	lsls	r0, r4, #26
 8003586:	f100 80a1 	bmi.w	80036cc <UART1__vIRQVectorHandler+0x17c>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_TRANSMIT);
                pvfCallback(UART1_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 800358a:	0661      	lsls	r1, r4, #25
 800358c:	f100 8092 	bmi.w	80036b4 <UART1__vIRQVectorHandler+0x164>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8003590:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 8003594:	f040 8081 	bne.w	800369a <UART1__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART1_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_FRAME_ERROR);
                pvfCallback(UART1_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 8003598:	05e2      	lsls	r2, r4, #23
 800359a:	d470      	bmi.n	800367e <UART1__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART1_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_PARITY_ERROR);
                pvfCallback(UART1_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 800359c:	05a3      	lsls	r3, r4, #22
 800359e:	d460      	bmi.n	8003662 <UART1__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BREAK_ERROR);
                pvfCallback(UART1_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 80035a0:	0566      	lsls	r6, r4, #21
 80035a2:	d450      	bmi.n	8003646 <UART1__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART1_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART1_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 80035a4:	04e0      	lsls	r0, r4, #19
 80035a6:	d441      	bmi.n	800362c <UART1__vIRQVectorHandler+0xdc>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BIT9_MODE);
                pvfCallback(UART1_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 80035a8:	03e1      	lsls	r1, r4, #15
 80035aa:	d432      	bmi.n	8003612 <UART1__vIRQVectorHandler+0xc2>
            {
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 80035ac:	03a2      	lsls	r2, r4, #14
 80035ae:	d41f      	bmi.n	80035f0 <UART1__vIRQVectorHandler+0xa0>
                UART1_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 80035b0:	0523      	lsls	r3, r4, #20
 80035b2:	d410      	bmi.n	80035d6 <UART1__vIRQVectorHandler+0x86>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART1_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 80035b4:	2d01      	cmp	r5, #1
 80035b6:	d00a      	beq.n	80035ce <UART1__vIRQVectorHandler+0x7e>
            {
                UART1_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 80035b8:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_SW);
 80035ba:	210f      	movs	r1, #15
 80035bc:	2001      	movs	r0, #1
 80035be:	f001 fae5 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART1_BASE, (void*) UART_enINT_SW);
 80035c2:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_SW);
 80035c4:	4603      	mov	r3, r0
        pvfCallback(UART1_BASE, (void*) UART_enINT_SW);
 80035c6:	4865      	ldr	r0, [pc, #404]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
}
 80035c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART1_BASE, (void*) UART_enINT_SW);
 80035cc:	4718      	bx	r3
                UART1_ECR_R = UART_ECR_R_DATA_CLEAR;
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80035d0:	22ff      	movs	r2, #255	; 0xff
 80035d2:	605a      	str	r2, [r3, #4]
}
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
                UART1_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80035d6:	4c61      	ldr	r4, [pc, #388]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80035d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_END_OF_TRANSMISSION);
 80035dc:	210b      	movs	r1, #11
 80035de:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80035e0:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_END_OF_TRANSMISSION);
 80035e2:	f001 fad3 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80035e6:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_END_OF_TRANSMISSION);
 80035e8:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80035ea:	4620      	mov	r0, r4
 80035ec:	4798      	blx	r3
 80035ee:	e7e1      	b.n	80035b4 <UART1__vIRQVectorHandler+0x64>
                UART1_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 80035f0:	4e5a      	ldr	r6, [pc, #360]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 80035f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DMA_TRANSMIT);
 80035f6:	210e      	movs	r1, #14
 80035f8:	2001      	movs	r0, #1
                UART1_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 80035fa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80035fc:	f023 0302 	bic.w	r3, r3, #2
 8003600:	64b3      	str	r3, [r6, #72]	; 0x48
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003602:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DMA_TRANSMIT);
 8003604:	f001 fac2 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003608:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DMA_TRANSMIT);
 800360a:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 800360c:	4630      	mov	r0, r6
 800360e:	4798      	blx	r3
 8003610:	e7ce      	b.n	80035b0 <UART1__vIRQVectorHandler+0x60>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003612:	4e52      	ldr	r6, [pc, #328]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DMA_RECEIVE);
 8003618:	210d      	movs	r1, #13
 800361a:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 800361c:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DMA_RECEIVE);
 800361e:	f001 fab5 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003622:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DMA_RECEIVE);
 8003624:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003626:	4630      	mov	r0, r6
 8003628:	4798      	blx	r3
 800362a:	e7bf      	b.n	80035ac <UART1__vIRQVectorHandler+0x5c>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 800362c:	4e4b      	ldr	r6, [pc, #300]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 800362e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BIT9_MODE);
 8003632:	210c      	movs	r1, #12
 8003634:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003636:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BIT9_MODE);
 8003638:	f001 faa8 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_BIT9_MODE);
 800363c:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BIT9_MODE);
 800363e:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_BIT9_MODE);
 8003640:	4630      	mov	r0, r6
 8003642:	4798      	blx	r3
 8003644:	e7b0      	b.n	80035a8 <UART1__vIRQVectorHandler+0x58>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003646:	4e45      	ldr	r6, [pc, #276]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003648:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_OVERRUN_ERROR);
 800364c:	210a      	movs	r1, #10
 800364e:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003650:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003652:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_OVERRUN_ERROR);
 8003654:	f001 fa9a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003658:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_OVERRUN_ERROR);
 800365a:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 800365c:	4630      	mov	r0, r6
 800365e:	4798      	blx	r3
 8003660:	e7a0      	b.n	80035a4 <UART1__vIRQVectorHandler+0x54>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003662:	4e3e      	ldr	r6, [pc, #248]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003664:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BREAK_ERROR);
 8003668:	2109      	movs	r1, #9
 800366a:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 800366c:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 800366e:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BREAK_ERROR);
 8003670:	f001 fa8c 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003674:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_BREAK_ERROR);
 8003676:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003678:	4630      	mov	r0, r6
 800367a:	4798      	blx	r3
 800367c:	e790      	b.n	80035a0 <UART1__vIRQVectorHandler+0x50>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 800367e:	4e37      	ldr	r6, [pc, #220]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003680:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_PARITY_ERROR);
 8003684:	2108      	movs	r1, #8
 8003686:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003688:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 800368a:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_PARITY_ERROR);
 800368c:	f001 fa7e 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003690:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_PARITY_ERROR);
 8003692:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003694:	4630      	mov	r0, r6
 8003696:	4798      	blx	r3
 8003698:	e780      	b.n	800359c <UART1__vIRQVectorHandler+0x4c>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 800369a:	4e30      	ldr	r6, [pc, #192]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 800369c:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_FRAME_ERROR);
 800369e:	2107      	movs	r1, #7
 80036a0:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 80036a2:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80036a4:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_FRAME_ERROR);
 80036a6:	f001 fa71 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_FRAME_ERROR);
 80036aa:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_FRAME_ERROR);
 80036ac:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_FRAME_ERROR);
 80036ae:	4630      	mov	r0, r6
 80036b0:	4798      	blx	r3
 80036b2:	e771      	b.n	8003598 <UART1__vIRQVectorHandler+0x48>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 80036b4:	4d29      	ldr	r5, [pc, #164]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80036b6:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE_TIMEOUT);
 80036b8:	2106      	movs	r1, #6
 80036ba:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 80036bc:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE_TIMEOUT);
 80036be:	f001 fa65 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80036c2:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE_TIMEOUT);
 80036c4:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80036c6:	4628      	mov	r0, r5
 80036c8:	4798      	blx	r3
 80036ca:	e761      	b.n	8003590 <UART1__vIRQVectorHandler+0x40>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80036cc:	4d23      	ldr	r5, [pc, #140]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80036ce:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_TRANSMIT);
 80036d0:	2105      	movs	r1, #5
 80036d2:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80036d4:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_TRANSMIT);
 80036d6:	f001 fa59 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_TRANSMIT);
 80036da:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_TRANSMIT);
 80036dc:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_TRANSMIT);
 80036de:	4628      	mov	r0, r5
 80036e0:	4798      	blx	r3
 80036e2:	e752      	b.n	800358a <UART1__vIRQVectorHandler+0x3a>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 80036e4:	4d1d      	ldr	r5, [pc, #116]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80036e6:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE);
 80036e8:	2104      	movs	r1, #4
 80036ea:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 80036ec:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE);
 80036ee:	f001 fa4d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE);
 80036f2:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RECEIVE);
 80036f4:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_RECEIVE);
 80036f6:	4628      	mov	r0, r5
 80036f8:	4798      	blx	r3
 80036fa:	e743      	b.n	8003584 <UART1__vIRQVectorHandler+0x34>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 80036fc:	4d17      	ldr	r5, [pc, #92]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 80036fe:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DATA_SET_READY);
 8003700:	2103      	movs	r1, #3
 8003702:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003704:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DATA_SET_READY);
 8003706:	f001 fa41 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_SET_READY);
 800370a:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_DATA_SET_READY);
 800370c:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_SET_READY);
 800370e:	4628      	mov	r0, r5
 8003710:	4798      	blx	r3
 8003712:	e734      	b.n	800357e <UART1__vIRQVectorHandler+0x2e>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003714:	4d11      	ldr	r5, [pc, #68]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003716:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DATA_CARRIER_DETECT);
 8003718:	2102      	movs	r1, #2
 800371a:	2001      	movs	r0, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 800371c:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DATA_CARRIER_DETECT);
 800371e:	f001 fa35 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003722:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1,  UART_enINT_DATA_CARRIER_DETECT);
 8003724:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003726:	4628      	mov	r0, r5
 8003728:	4798      	blx	r3
 800372a:	e725      	b.n	8003578 <UART1__vIRQVectorHandler+0x28>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_CLEAR_TO_SEND);
 800372c:	2101      	movs	r1, #1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 800372e:	4d0b      	ldr	r5, [pc, #44]	; (800375c <UART1__vIRQVectorHandler+0x20c>)
 8003730:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_CLEAR_TO_SEND);
 8003732:	4608      	mov	r0, r1
                UART1_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003734:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_CLEAR_TO_SEND);
 8003736:	f001 fa29 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 800373a:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_CLEAR_TO_SEND);
 800373c:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 800373e:	4628      	mov	r0, r5
 8003740:	4798      	blx	r3
 8003742:	e716      	b.n	8003572 <UART1__vIRQVectorHandler+0x22>
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003744:	2001      	movs	r0, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RING_INDICATOR);
 8003746:	2100      	movs	r1, #0
                UART1_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003748:	6468      	str	r0, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RING_INDICATOR);
 800374a:	f001 fa1f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART1_BASE, (void*) UART_enINT_RING_INDICATOR);
 800374e:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_1, UART_enINT_RING_INDICATOR);
 8003750:	4603      	mov	r3, r0
                pvfCallback(UART1_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003752:	4628      	mov	r0, r5
 8003754:	4798      	blx	r3
 8003756:	e709      	b.n	800356c <UART1__vIRQVectorHandler+0x1c>
 8003758:	400fe000 	.word	0x400fe000
 800375c:	4000d000 	.word	0x4000d000
 8003760:	00031fff 	.word	0x00031fff

08003764 <UART2__vIRQVectorHandler>:
void UART2__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003764:	4b81      	ldr	r3, [pc, #516]	; (800396c <UART2__vIRQVectorHandler+0x208>)
 8003766:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART2_NOREADY == (SYSCTL_PRUART_R_UART2_MASK & uxReady))
 800376a:	0758      	lsls	r0, r3, #29
{
 800376c:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART2_NOREADY == (SYSCTL_PRUART_R_UART2_MASK & uxReady))
 800376e:	d52e      	bpl.n	80037ce <UART2__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART2_MIS_R;
 8003770:	4d7f      	ldr	r5, [pc, #508]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003772:	4b80      	ldr	r3, [pc, #512]	; (8003974 <UART2__vIRQVectorHandler+0x210>)
        uxReg = (UBase_t) UART2_MIS_R;
 8003774:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003776:	4023      	ands	r3, r4
 8003778:	b34b      	cbz	r3, 80037ce <UART2__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_SW);
            pvfCallback(UART2_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 800377a:	07e1      	lsls	r1, r4, #31
 800377c:	f100 80eb 	bmi.w	8003956 <UART2__vIRQVectorHandler+0x1f2>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RING_INDICATOR);
                pvfCallback(UART2_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003780:	07a2      	lsls	r2, r4, #30
 8003782:	f100 80dd 	bmi.w	8003940 <UART2__vIRQVectorHandler+0x1dc>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART2_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003786:	0763      	lsls	r3, r4, #29
 8003788:	f100 80ce 	bmi.w	8003928 <UART2__vIRQVectorHandler+0x1c4>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 800378c:	0726      	lsls	r6, r4, #28
 800378e:	f100 80bf 	bmi.w	8003910 <UART2__vIRQVectorHandler+0x1ac>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DATA_SET_READY);
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8003792:	06e5      	lsls	r5, r4, #27
 8003794:	f100 80b0 	bmi.w	80038f8 <UART2__vIRQVectorHandler+0x194>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE);
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003798:	06a0      	lsls	r0, r4, #26
 800379a:	f100 80a1 	bmi.w	80038e0 <UART2__vIRQVectorHandler+0x17c>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_TRANSMIT);
                pvfCallback(UART2_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 800379e:	0661      	lsls	r1, r4, #25
 80037a0:	f100 8092 	bmi.w	80038c8 <UART2__vIRQVectorHandler+0x164>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 80037a4:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 80037a8:	f040 8081 	bne.w	80038ae <UART2__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART2_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_FRAME_ERROR);
                pvfCallback(UART2_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 80037ac:	05e2      	lsls	r2, r4, #23
 80037ae:	d470      	bmi.n	8003892 <UART2__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART2_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_PARITY_ERROR);
                pvfCallback(UART2_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 80037b0:	05a3      	lsls	r3, r4, #22
 80037b2:	d460      	bmi.n	8003876 <UART2__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BREAK_ERROR);
                pvfCallback(UART2_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 80037b4:	0566      	lsls	r6, r4, #21
 80037b6:	d450      	bmi.n	800385a <UART2__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART2_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART2_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 80037b8:	04e0      	lsls	r0, r4, #19
 80037ba:	d441      	bmi.n	8003840 <UART2__vIRQVectorHandler+0xdc>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BIT9_MODE);
                pvfCallback(UART2_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 80037bc:	03e1      	lsls	r1, r4, #15
 80037be:	d432      	bmi.n	8003826 <UART2__vIRQVectorHandler+0xc2>
            {
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 80037c0:	03a2      	lsls	r2, r4, #14
 80037c2:	d41f      	bmi.n	8003804 <UART2__vIRQVectorHandler+0xa0>
                UART2_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 80037c4:	0523      	lsls	r3, r4, #20
 80037c6:	d410      	bmi.n	80037ea <UART2__vIRQVectorHandler+0x86>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART2_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 80037c8:	2d01      	cmp	r5, #1
 80037ca:	d00a      	beq.n	80037e2 <UART2__vIRQVectorHandler+0x7e>
            {
                UART2_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_SW);
 80037ce:	210f      	movs	r1, #15
 80037d0:	2002      	movs	r0, #2
 80037d2:	f001 f9db 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART2_BASE, (void*) UART_enINT_SW);
 80037d6:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_SW);
 80037d8:	4603      	mov	r3, r0
        pvfCallback(UART2_BASE, (void*) UART_enINT_SW);
 80037da:	4865      	ldr	r0, [pc, #404]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
}
 80037dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART2_BASE, (void*) UART_enINT_SW);
 80037e0:	4718      	bx	r3
                UART2_ECR_R = UART_ECR_R_DATA_CLEAR;
 80037e2:	4b63      	ldr	r3, [pc, #396]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80037e4:	22ff      	movs	r2, #255	; 0xff
 80037e6:	605a      	str	r2, [r3, #4]
}
 80037e8:	bd70      	pop	{r4, r5, r6, pc}
                UART2_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80037ea:	4c61      	ldr	r4, [pc, #388]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80037ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_END_OF_TRANSMISSION);
 80037f0:	210b      	movs	r1, #11
 80037f2:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80037f4:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_END_OF_TRANSMISSION);
 80037f6:	f001 f9c9 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80037fa:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_END_OF_TRANSMISSION);
 80037fc:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 80037fe:	4620      	mov	r0, r4
 8003800:	4798      	blx	r3
 8003802:	e7e1      	b.n	80037c8 <UART2__vIRQVectorHandler+0x64>
                UART2_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003804:	4e5a      	ldr	r6, [pc, #360]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003806:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DMA_TRANSMIT);
 800380a:	210e      	movs	r1, #14
 800380c:	2002      	movs	r0, #2
                UART2_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 800380e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003810:	f023 0302 	bic.w	r3, r3, #2
 8003814:	64b3      	str	r3, [r6, #72]	; 0x48
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003816:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DMA_TRANSMIT);
 8003818:	f001 f9b8 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 800381c:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DMA_TRANSMIT);
 800381e:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003820:	4630      	mov	r0, r6
 8003822:	4798      	blx	r3
 8003824:	e7ce      	b.n	80037c4 <UART2__vIRQVectorHandler+0x60>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003826:	4e52      	ldr	r6, [pc, #328]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003828:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DMA_RECEIVE);
 800382c:	210d      	movs	r1, #13
 800382e:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003830:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DMA_RECEIVE);
 8003832:	f001 f9ab 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003836:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DMA_RECEIVE);
 8003838:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_DMA_RECEIVE);
 800383a:	4630      	mov	r0, r6
 800383c:	4798      	blx	r3
 800383e:	e7bf      	b.n	80037c0 <UART2__vIRQVectorHandler+0x5c>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003840:	4e4b      	ldr	r6, [pc, #300]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BIT9_MODE);
 8003846:	210c      	movs	r1, #12
 8003848:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 800384a:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BIT9_MODE);
 800384c:	f001 f99e 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_BIT9_MODE);
 8003850:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BIT9_MODE);
 8003852:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_BIT9_MODE);
 8003854:	4630      	mov	r0, r6
 8003856:	4798      	blx	r3
 8003858:	e7b0      	b.n	80037bc <UART2__vIRQVectorHandler+0x58>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 800385a:	4e45      	ldr	r6, [pc, #276]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 800385c:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_OVERRUN_ERROR);
 8003860:	210a      	movs	r1, #10
 8003862:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003864:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003866:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_OVERRUN_ERROR);
 8003868:	f001 f990 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 800386c:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_OVERRUN_ERROR);
 800386e:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003870:	4630      	mov	r0, r6
 8003872:	4798      	blx	r3
 8003874:	e7a0      	b.n	80037b8 <UART2__vIRQVectorHandler+0x54>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003876:	4e3e      	ldr	r6, [pc, #248]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003878:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BREAK_ERROR);
 800387c:	2109      	movs	r1, #9
 800387e:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003880:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003882:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BREAK_ERROR);
 8003884:	f001 f982 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003888:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_BREAK_ERROR);
 800388a:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_BREAK_ERROR);
 800388c:	4630      	mov	r0, r6
 800388e:	4798      	blx	r3
 8003890:	e790      	b.n	80037b4 <UART2__vIRQVectorHandler+0x50>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003892:	4e37      	ldr	r6, [pc, #220]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003894:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_PARITY_ERROR);
 8003898:	2108      	movs	r1, #8
 800389a:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 800389c:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 800389e:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_PARITY_ERROR);
 80038a0:	f001 f974 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_PARITY_ERROR);
 80038a4:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_PARITY_ERROR);
 80038a6:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_PARITY_ERROR);
 80038a8:	4630      	mov	r0, r6
 80038aa:	4798      	blx	r3
 80038ac:	e780      	b.n	80037b0 <UART2__vIRQVectorHandler+0x4c>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 80038ae:	4e30      	ldr	r6, [pc, #192]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80038b0:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_FRAME_ERROR);
 80038b2:	2107      	movs	r1, #7
 80038b4:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 80038b6:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80038b8:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_FRAME_ERROR);
 80038ba:	f001 f967 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_FRAME_ERROR);
 80038be:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_FRAME_ERROR);
 80038c0:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_FRAME_ERROR);
 80038c2:	4630      	mov	r0, r6
 80038c4:	4798      	blx	r3
 80038c6:	e771      	b.n	80037ac <UART2__vIRQVectorHandler+0x48>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 80038c8:	4d29      	ldr	r5, [pc, #164]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80038ca:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE_TIMEOUT);
 80038cc:	2106      	movs	r1, #6
 80038ce:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 80038d0:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE_TIMEOUT);
 80038d2:	f001 f95b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80038d6:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE_TIMEOUT);
 80038d8:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 80038da:	4628      	mov	r0, r5
 80038dc:	4798      	blx	r3
 80038de:	e761      	b.n	80037a4 <UART2__vIRQVectorHandler+0x40>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80038e0:	4d23      	ldr	r5, [pc, #140]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80038e2:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_TRANSMIT);
 80038e4:	2105      	movs	r1, #5
 80038e6:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 80038e8:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_TRANSMIT);
 80038ea:	f001 f94f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_TRANSMIT);
 80038ee:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_TRANSMIT);
 80038f0:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_TRANSMIT);
 80038f2:	4628      	mov	r0, r5
 80038f4:	4798      	blx	r3
 80038f6:	e752      	b.n	800379e <UART2__vIRQVectorHandler+0x3a>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 80038f8:	4d1d      	ldr	r5, [pc, #116]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 80038fa:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE);
 80038fc:	2104      	movs	r1, #4
 80038fe:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003900:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE);
 8003902:	f001 f943 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE);
 8003906:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RECEIVE);
 8003908:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_RECEIVE);
 800390a:	4628      	mov	r0, r5
 800390c:	4798      	blx	r3
 800390e:	e743      	b.n	8003798 <UART2__vIRQVectorHandler+0x34>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003910:	4d17      	ldr	r5, [pc, #92]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003912:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DATA_SET_READY);
 8003914:	2103      	movs	r1, #3
 8003916:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003918:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DATA_SET_READY);
 800391a:	f001 f937 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_SET_READY);
 800391e:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_DATA_SET_READY);
 8003920:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003922:	4628      	mov	r0, r5
 8003924:	4798      	blx	r3
 8003926:	e734      	b.n	8003792 <UART2__vIRQVectorHandler+0x2e>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DATA_CARRIER_DETECT);
 8003928:	2102      	movs	r1, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 800392a:	4d11      	ldr	r5, [pc, #68]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 800392c:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DATA_CARRIER_DETECT);
 800392e:	4608      	mov	r0, r1
                UART2_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003930:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DATA_CARRIER_DETECT);
 8003932:	f001 f92b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003936:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2,  UART_enINT_DATA_CARRIER_DETECT);
 8003938:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 800393a:	4628      	mov	r0, r5
 800393c:	4798      	blx	r3
 800393e:	e725      	b.n	800378c <UART2__vIRQVectorHandler+0x28>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003940:	4d0b      	ldr	r5, [pc, #44]	; (8003970 <UART2__vIRQVectorHandler+0x20c>)
 8003942:	2002      	movs	r0, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_CLEAR_TO_SEND);
 8003944:	2101      	movs	r1, #1
                UART2_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003946:	6468      	str	r0, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_CLEAR_TO_SEND);
 8003948:	f001 f920 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 800394c:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_CLEAR_TO_SEND);
 800394e:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003950:	4628      	mov	r0, r5
 8003952:	4798      	blx	r3
 8003954:	e717      	b.n	8003786 <UART2__vIRQVectorHandler+0x22>
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003956:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RING_INDICATOR);
 8003958:	2100      	movs	r1, #0
 800395a:	2002      	movs	r0, #2
                UART2_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 800395c:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RING_INDICATOR);
 800395e:	f001 f915 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART2_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003962:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_2, UART_enINT_RING_INDICATOR);
 8003964:	4603      	mov	r3, r0
                pvfCallback(UART2_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003966:	4628      	mov	r0, r5
 8003968:	4798      	blx	r3
 800396a:	e709      	b.n	8003780 <UART2__vIRQVectorHandler+0x1c>
 800396c:	400fe000 	.word	0x400fe000
 8003970:	4000e000 	.word	0x4000e000
 8003974:	00031fff 	.word	0x00031fff

08003978 <UART3__vIRQVectorHandler>:
void UART3__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003978:	4b82      	ldr	r3, [pc, #520]	; (8003b84 <UART3__vIRQVectorHandler+0x20c>)
 800397a:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART3_NOREADY == (SYSCTL_PRUART_R_UART3_MASK & uxReady))
 800397e:	0718      	lsls	r0, r3, #28
{
 8003980:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART3_NOREADY == (SYSCTL_PRUART_R_UART3_MASK & uxReady))
 8003982:	d52e      	bpl.n	80039e2 <UART3__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART3_MIS_R;
 8003984:	4d80      	ldr	r5, [pc, #512]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003986:	4b81      	ldr	r3, [pc, #516]	; (8003b8c <UART3__vIRQVectorHandler+0x214>)
        uxReg = (UBase_t) UART3_MIS_R;
 8003988:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 800398a:	4023      	ands	r3, r4
 800398c:	b34b      	cbz	r3, 80039e2 <UART3__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_SW);
            pvfCallback(UART3_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 800398e:	07e1      	lsls	r1, r4, #31
 8003990:	f100 80ec 	bmi.w	8003b6c <UART3__vIRQVectorHandler+0x1f4>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RING_INDICATOR);
                pvfCallback(UART3_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003994:	07a2      	lsls	r2, r4, #30
 8003996:	f100 80dd 	bmi.w	8003b54 <UART3__vIRQVectorHandler+0x1dc>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART3_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 800399a:	0763      	lsls	r3, r4, #29
 800399c:	f100 80ce 	bmi.w	8003b3c <UART3__vIRQVectorHandler+0x1c4>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 80039a0:	0726      	lsls	r6, r4, #28
 80039a2:	f100 80bf 	bmi.w	8003b24 <UART3__vIRQVectorHandler+0x1ac>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DATA_SET_READY);
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 80039a6:	06e5      	lsls	r5, r4, #27
 80039a8:	f100 80b0 	bmi.w	8003b0c <UART3__vIRQVectorHandler+0x194>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE);
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 80039ac:	06a0      	lsls	r0, r4, #26
 80039ae:	f100 80a1 	bmi.w	8003af4 <UART3__vIRQVectorHandler+0x17c>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_TRANSMIT);
                pvfCallback(UART3_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 80039b2:	0661      	lsls	r1, r4, #25
 80039b4:	f100 8092 	bmi.w	8003adc <UART3__vIRQVectorHandler+0x164>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 80039b8:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 80039bc:	f040 8081 	bne.w	8003ac2 <UART3__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART3_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_FRAME_ERROR);
                pvfCallback(UART3_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 80039c0:	05e2      	lsls	r2, r4, #23
 80039c2:	d470      	bmi.n	8003aa6 <UART3__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART3_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_PARITY_ERROR);
                pvfCallback(UART3_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 80039c4:	05a3      	lsls	r3, r4, #22
 80039c6:	d460      	bmi.n	8003a8a <UART3__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BREAK_ERROR);
                pvfCallback(UART3_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 80039c8:	0566      	lsls	r6, r4, #21
 80039ca:	d450      	bmi.n	8003a6e <UART3__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART3_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART3_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 80039cc:	04e0      	lsls	r0, r4, #19
 80039ce:	d441      	bmi.n	8003a54 <UART3__vIRQVectorHandler+0xdc>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BIT9_MODE);
                pvfCallback(UART3_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 80039d0:	03e1      	lsls	r1, r4, #15
 80039d2:	d432      	bmi.n	8003a3a <UART3__vIRQVectorHandler+0xc2>
            {
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 80039d4:	03a2      	lsls	r2, r4, #14
 80039d6:	d41f      	bmi.n	8003a18 <UART3__vIRQVectorHandler+0xa0>
                UART3_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 80039d8:	0523      	lsls	r3, r4, #20
 80039da:	d410      	bmi.n	80039fe <UART3__vIRQVectorHandler+0x86>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART3_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 80039dc:	2d01      	cmp	r5, #1
 80039de:	d00a      	beq.n	80039f6 <UART3__vIRQVectorHandler+0x7e>
            {
                UART3_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_SW);
 80039e2:	210f      	movs	r1, #15
 80039e4:	2003      	movs	r0, #3
 80039e6:	f001 f8d1 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART3_BASE, (void*) UART_enINT_SW);
 80039ea:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_SW);
 80039ec:	4603      	mov	r3, r0
        pvfCallback(UART3_BASE, (void*) UART_enINT_SW);
 80039ee:	4866      	ldr	r0, [pc, #408]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
}
 80039f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART3_BASE, (void*) UART_enINT_SW);
 80039f4:	4718      	bx	r3
                UART3_ECR_R = UART_ECR_R_DATA_CLEAR;
 80039f6:	4b64      	ldr	r3, [pc, #400]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 80039f8:	22ff      	movs	r2, #255	; 0xff
 80039fa:	605a      	str	r2, [r3, #4]
}
 80039fc:	bd70      	pop	{r4, r5, r6, pc}
                UART3_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 80039fe:	4c62      	ldr	r4, [pc, #392]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_END_OF_TRANSMISSION);
 8003a04:	210b      	movs	r1, #11
 8003a06:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8003a08:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_END_OF_TRANSMISSION);
 8003a0a:	f001 f8bf 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003a0e:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_END_OF_TRANSMISSION);
 8003a10:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003a12:	4620      	mov	r0, r4
 8003a14:	4798      	blx	r3
 8003a16:	e7e1      	b.n	80039dc <UART3__vIRQVectorHandler+0x64>
                UART3_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003a18:	4e5b      	ldr	r6, [pc, #364]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DMA_TRANSMIT);
 8003a1e:	210e      	movs	r1, #14
 8003a20:	2003      	movs	r0, #3
                UART3_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003a22:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003a24:	f023 0302 	bic.w	r3, r3, #2
 8003a28:	64b3      	str	r3, [r6, #72]	; 0x48
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003a2a:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DMA_TRANSMIT);
 8003a2c:	f001 f8ae 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003a30:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DMA_TRANSMIT);
 8003a32:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003a34:	4630      	mov	r0, r6
 8003a36:	4798      	blx	r3
 8003a38:	e7ce      	b.n	80039d8 <UART3__vIRQVectorHandler+0x60>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003a3a:	4e53      	ldr	r6, [pc, #332]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DMA_RECEIVE);
 8003a40:	210d      	movs	r1, #13
 8003a42:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003a44:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DMA_RECEIVE);
 8003a46:	f001 f8a1 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003a4a:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DMA_RECEIVE);
 8003a4c:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003a4e:	4630      	mov	r0, r6
 8003a50:	4798      	blx	r3
 8003a52:	e7bf      	b.n	80039d4 <UART3__vIRQVectorHandler+0x5c>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003a54:	4e4c      	ldr	r6, [pc, #304]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BIT9_MODE);
 8003a5a:	210c      	movs	r1, #12
 8003a5c:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003a5e:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BIT9_MODE);
 8003a60:	f001 f894 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_BIT9_MODE);
 8003a64:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BIT9_MODE);
 8003a66:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_BIT9_MODE);
 8003a68:	4630      	mov	r0, r6
 8003a6a:	4798      	blx	r3
 8003a6c:	e7b0      	b.n	80039d0 <UART3__vIRQVectorHandler+0x58>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003a6e:	4e46      	ldr	r6, [pc, #280]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_OVERRUN_ERROR);
 8003a74:	210a      	movs	r1, #10
 8003a76:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003a78:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003a7a:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_OVERRUN_ERROR);
 8003a7c:	f001 f886 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003a80:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_OVERRUN_ERROR);
 8003a82:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003a84:	4630      	mov	r0, r6
 8003a86:	4798      	blx	r3
 8003a88:	e7a0      	b.n	80039cc <UART3__vIRQVectorHandler+0x54>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003a8a:	4e3f      	ldr	r6, [pc, #252]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BREAK_ERROR);
 8003a90:	2109      	movs	r1, #9
 8003a92:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003a94:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003a96:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BREAK_ERROR);
 8003a98:	f001 f878 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003a9c:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_BREAK_ERROR);
 8003a9e:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	4798      	blx	r3
 8003aa4:	e790      	b.n	80039c8 <UART3__vIRQVectorHandler+0x50>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003aa6:	4e38      	ldr	r6, [pc, #224]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_PARITY_ERROR);
 8003aac:	2108      	movs	r1, #8
 8003aae:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003ab0:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ab2:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_PARITY_ERROR);
 8003ab4:	f001 f86a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003ab8:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_PARITY_ERROR);
 8003aba:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003abc:	4630      	mov	r0, r6
 8003abe:	4798      	blx	r3
 8003ac0:	e780      	b.n	80039c4 <UART3__vIRQVectorHandler+0x4c>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003ac2:	4e31      	ldr	r6, [pc, #196]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003ac4:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_FRAME_ERROR);
 8003ac6:	2107      	movs	r1, #7
 8003ac8:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003aca:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003acc:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_FRAME_ERROR);
 8003ace:	f001 f85d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003ad2:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_FRAME_ERROR);
 8003ad4:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003ad6:	4630      	mov	r0, r6
 8003ad8:	4798      	blx	r3
 8003ada:	e771      	b.n	80039c0 <UART3__vIRQVectorHandler+0x48>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003adc:	4d2a      	ldr	r5, [pc, #168]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003ade:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE_TIMEOUT);
 8003ae0:	2106      	movs	r1, #6
 8003ae2:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003ae4:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE_TIMEOUT);
 8003ae6:	f001 f851 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003aea:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE_TIMEOUT);
 8003aec:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003aee:	4628      	mov	r0, r5
 8003af0:	4798      	blx	r3
 8003af2:	e761      	b.n	80039b8 <UART3__vIRQVectorHandler+0x40>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003af4:	4d24      	ldr	r5, [pc, #144]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003af6:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_TRANSMIT);
 8003af8:	2105      	movs	r1, #5
 8003afa:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003afc:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_TRANSMIT);
 8003afe:	f001 f845 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_TRANSMIT);
 8003b02:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_TRANSMIT);
 8003b04:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_TRANSMIT);
 8003b06:	4628      	mov	r0, r5
 8003b08:	4798      	blx	r3
 8003b0a:	e752      	b.n	80039b2 <UART3__vIRQVectorHandler+0x3a>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003b0c:	4d1e      	ldr	r5, [pc, #120]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003b0e:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE);
 8003b10:	2104      	movs	r1, #4
 8003b12:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003b14:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE);
 8003b16:	f001 f839 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE);
 8003b1a:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RECEIVE);
 8003b1c:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_RECEIVE);
 8003b1e:	4628      	mov	r0, r5
 8003b20:	4798      	blx	r3
 8003b22:	e743      	b.n	80039ac <UART3__vIRQVectorHandler+0x34>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DATA_SET_READY);
 8003b24:	2103      	movs	r1, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003b26:	4d18      	ldr	r5, [pc, #96]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003b28:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DATA_SET_READY);
 8003b2a:	4608      	mov	r0, r1
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003b2c:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DATA_SET_READY);
 8003b2e:	f001 f82d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003b32:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_DATA_SET_READY);
 8003b34:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003b36:	4628      	mov	r0, r5
 8003b38:	4798      	blx	r3
 8003b3a:	e734      	b.n	80039a6 <UART3__vIRQVectorHandler+0x2e>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003b3c:	4d12      	ldr	r5, [pc, #72]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003b3e:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DATA_CARRIER_DETECT);
 8003b40:	2102      	movs	r1, #2
 8003b42:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003b44:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DATA_CARRIER_DETECT);
 8003b46:	f001 f821 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003b4a:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3,  UART_enINT_DATA_CARRIER_DETECT);
 8003b4c:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003b4e:	4628      	mov	r0, r5
 8003b50:	4798      	blx	r3
 8003b52:	e725      	b.n	80039a0 <UART3__vIRQVectorHandler+0x28>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003b54:	4d0c      	ldr	r5, [pc, #48]	; (8003b88 <UART3__vIRQVectorHandler+0x210>)
 8003b56:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_CLEAR_TO_SEND);
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003b5c:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_CLEAR_TO_SEND);
 8003b5e:	f001 f815 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003b62:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_CLEAR_TO_SEND);
 8003b64:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003b66:	4628      	mov	r0, r5
 8003b68:	4798      	blx	r3
 8003b6a:	e716      	b.n	800399a <UART3__vIRQVectorHandler+0x22>
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003b6c:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RING_INDICATOR);
 8003b6e:	2100      	movs	r1, #0
 8003b70:	2003      	movs	r0, #3
                UART3_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003b72:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RING_INDICATOR);
 8003b74:	f001 f80a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART3_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003b78:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_3, UART_enINT_RING_INDICATOR);
 8003b7a:	4603      	mov	r3, r0
                pvfCallback(UART3_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	4798      	blx	r3
 8003b80:	e708      	b.n	8003994 <UART3__vIRQVectorHandler+0x1c>
 8003b82:	bf00      	nop
 8003b84:	400fe000 	.word	0x400fe000
 8003b88:	4000f000 	.word	0x4000f000
 8003b8c:	00031fff 	.word	0x00031fff

08003b90 <UART4__vIRQVectorHandler>:
void UART4__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003b90:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <UART4__vIRQVectorHandler+0x208>)
 8003b92:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART4_NOREADY == (SYSCTL_PRUART_R_UART4_MASK & uxReady))
 8003b96:	06d8      	lsls	r0, r3, #27
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART4_NOREADY == (SYSCTL_PRUART_R_UART4_MASK & uxReady))
 8003b9a:	d52e      	bpl.n	8003bfa <UART4__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART4_MIS_R;
 8003b9c:	4d7f      	ldr	r5, [pc, #508]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003b9e:	4b80      	ldr	r3, [pc, #512]	; (8003da0 <UART4__vIRQVectorHandler+0x210>)
        uxReg = (UBase_t) UART4_MIS_R;
 8003ba0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003ba2:	4023      	ands	r3, r4
 8003ba4:	b34b      	cbz	r3, 8003bfa <UART4__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_SW);
            pvfCallback(UART4_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 8003ba6:	07e1      	lsls	r1, r4, #31
 8003ba8:	f100 80eb 	bmi.w	8003d82 <UART4__vIRQVectorHandler+0x1f2>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RING_INDICATOR);
                pvfCallback(UART4_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003bac:	07a2      	lsls	r2, r4, #30
 8003bae:	f100 80dc 	bmi.w	8003d6a <UART4__vIRQVectorHandler+0x1da>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART4_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003bb2:	0763      	lsls	r3, r4, #29
 8003bb4:	f100 80ce 	bmi.w	8003d54 <UART4__vIRQVectorHandler+0x1c4>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 8003bb8:	0726      	lsls	r6, r4, #28
 8003bba:	f100 80bf 	bmi.w	8003d3c <UART4__vIRQVectorHandler+0x1ac>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DATA_SET_READY);
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8003bbe:	06e5      	lsls	r5, r4, #27
 8003bc0:	f100 80b0 	bmi.w	8003d24 <UART4__vIRQVectorHandler+0x194>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE);
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003bc4:	06a0      	lsls	r0, r4, #26
 8003bc6:	f100 80a1 	bmi.w	8003d0c <UART4__vIRQVectorHandler+0x17c>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_TRANSMIT);
                pvfCallback(UART4_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 8003bca:	0661      	lsls	r1, r4, #25
 8003bcc:	f100 8092 	bmi.w	8003cf4 <UART4__vIRQVectorHandler+0x164>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8003bd0:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 8003bd4:	f040 8081 	bne.w	8003cda <UART4__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART4_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_FRAME_ERROR);
                pvfCallback(UART4_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 8003bd8:	05e2      	lsls	r2, r4, #23
 8003bda:	d470      	bmi.n	8003cbe <UART4__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART4_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_PARITY_ERROR);
                pvfCallback(UART4_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 8003bdc:	05a3      	lsls	r3, r4, #22
 8003bde:	d460      	bmi.n	8003ca2 <UART4__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BREAK_ERROR);
                pvfCallback(UART4_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 8003be0:	0566      	lsls	r6, r4, #21
 8003be2:	d450      	bmi.n	8003c86 <UART4__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART4_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART4_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 8003be4:	04e0      	lsls	r0, r4, #19
 8003be6:	d441      	bmi.n	8003c6c <UART4__vIRQVectorHandler+0xdc>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BIT9_MODE);
                pvfCallback(UART4_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 8003be8:	03e1      	lsls	r1, r4, #15
 8003bea:	d432      	bmi.n	8003c52 <UART4__vIRQVectorHandler+0xc2>
            {
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 8003bec:	03a2      	lsls	r2, r4, #14
 8003bee:	d41f      	bmi.n	8003c30 <UART4__vIRQVectorHandler+0xa0>
                UART4_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 8003bf0:	0523      	lsls	r3, r4, #20
 8003bf2:	d410      	bmi.n	8003c16 <UART4__vIRQVectorHandler+0x86>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART4_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 8003bf4:	2d01      	cmp	r5, #1
 8003bf6:	d00a      	beq.n	8003c0e <UART4__vIRQVectorHandler+0x7e>
            {
                UART4_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_SW);
 8003bfa:	210f      	movs	r1, #15
 8003bfc:	2004      	movs	r0, #4
 8003bfe:	f000 ffc5 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART4_BASE, (void*) UART_enINT_SW);
 8003c02:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_SW);
 8003c04:	4603      	mov	r3, r0
        pvfCallback(UART4_BASE, (void*) UART_enINT_SW);
 8003c06:	4865      	ldr	r0, [pc, #404]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
}
 8003c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART4_BASE, (void*) UART_enINT_SW);
 8003c0c:	4718      	bx	r3
                UART4_ECR_R = UART_ECR_R_DATA_CLEAR;
 8003c0e:	4b63      	ldr	r3, [pc, #396]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003c10:	22ff      	movs	r2, #255	; 0xff
 8003c12:	605a      	str	r2, [r3, #4]
}
 8003c14:	bd70      	pop	{r4, r5, r6, pc}
                UART4_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8003c16:	4c61      	ldr	r4, [pc, #388]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_END_OF_TRANSMISSION);
 8003c1c:	210b      	movs	r1, #11
 8003c1e:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8003c20:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_END_OF_TRANSMISSION);
 8003c22:	f000 ffb3 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003c26:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_END_OF_TRANSMISSION);
 8003c28:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	4798      	blx	r3
 8003c2e:	e7e1      	b.n	8003bf4 <UART4__vIRQVectorHandler+0x64>
                UART4_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003c30:	4e5a      	ldr	r6, [pc, #360]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DMA_TRANSMIT);
 8003c36:	210e      	movs	r1, #14
 8003c38:	2004      	movs	r0, #4
                UART4_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003c3a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003c3c:	f023 0302 	bic.w	r3, r3, #2
 8003c40:	64b3      	str	r3, [r6, #72]	; 0x48
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003c42:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DMA_TRANSMIT);
 8003c44:	f000 ffa2 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003c48:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DMA_TRANSMIT);
 8003c4a:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003c4c:	4630      	mov	r0, r6
 8003c4e:	4798      	blx	r3
 8003c50:	e7ce      	b.n	8003bf0 <UART4__vIRQVectorHandler+0x60>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003c52:	4e52      	ldr	r6, [pc, #328]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DMA_RECEIVE);
 8003c58:	210d      	movs	r1, #13
 8003c5a:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003c5c:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DMA_RECEIVE);
 8003c5e:	f000 ff95 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003c62:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DMA_RECEIVE);
 8003c64:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003c66:	4630      	mov	r0, r6
 8003c68:	4798      	blx	r3
 8003c6a:	e7bf      	b.n	8003bec <UART4__vIRQVectorHandler+0x5c>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003c6c:	4e4b      	ldr	r6, [pc, #300]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BIT9_MODE);
 8003c72:	210c      	movs	r1, #12
 8003c74:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003c76:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BIT9_MODE);
 8003c78:	f000 ff88 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_BIT9_MODE);
 8003c7c:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BIT9_MODE);
 8003c7e:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_BIT9_MODE);
 8003c80:	4630      	mov	r0, r6
 8003c82:	4798      	blx	r3
 8003c84:	e7b0      	b.n	8003be8 <UART4__vIRQVectorHandler+0x58>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003c86:	4e45      	ldr	r6, [pc, #276]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_OVERRUN_ERROR);
 8003c8c:	210a      	movs	r1, #10
 8003c8e:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003c90:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003c92:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_OVERRUN_ERROR);
 8003c94:	f000 ff7a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003c98:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_OVERRUN_ERROR);
 8003c9a:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003c9c:	4630      	mov	r0, r6
 8003c9e:	4798      	blx	r3
 8003ca0:	e7a0      	b.n	8003be4 <UART4__vIRQVectorHandler+0x54>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003ca2:	4e3e      	ldr	r6, [pc, #248]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BREAK_ERROR);
 8003ca8:	2109      	movs	r1, #9
 8003caa:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003cac:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003cae:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BREAK_ERROR);
 8003cb0:	f000 ff6c 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003cb4:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_BREAK_ERROR);
 8003cb6:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003cb8:	4630      	mov	r0, r6
 8003cba:	4798      	blx	r3
 8003cbc:	e790      	b.n	8003be0 <UART4__vIRQVectorHandler+0x50>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003cbe:	4e37      	ldr	r6, [pc, #220]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_PARITY_ERROR);
 8003cc4:	2108      	movs	r1, #8
 8003cc6:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003cc8:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003cca:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_PARITY_ERROR);
 8003ccc:	f000 ff5e 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003cd0:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_PARITY_ERROR);
 8003cd2:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	4798      	blx	r3
 8003cd8:	e780      	b.n	8003bdc <UART4__vIRQVectorHandler+0x4c>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003cda:	4e30      	ldr	r6, [pc, #192]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003cdc:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_FRAME_ERROR);
 8003cde:	2107      	movs	r1, #7
 8003ce0:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003ce2:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ce4:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_FRAME_ERROR);
 8003ce6:	f000 ff51 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003cea:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_FRAME_ERROR);
 8003cec:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003cee:	4630      	mov	r0, r6
 8003cf0:	4798      	blx	r3
 8003cf2:	e771      	b.n	8003bd8 <UART4__vIRQVectorHandler+0x48>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003cf4:	4d29      	ldr	r5, [pc, #164]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003cf6:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE_TIMEOUT);
 8003cf8:	2106      	movs	r1, #6
 8003cfa:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003cfc:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE_TIMEOUT);
 8003cfe:	f000 ff45 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003d02:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE_TIMEOUT);
 8003d04:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003d06:	4628      	mov	r0, r5
 8003d08:	4798      	blx	r3
 8003d0a:	e761      	b.n	8003bd0 <UART4__vIRQVectorHandler+0x40>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003d0c:	4d23      	ldr	r5, [pc, #140]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003d0e:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_TRANSMIT);
 8003d10:	2105      	movs	r1, #5
 8003d12:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003d14:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_TRANSMIT);
 8003d16:	f000 ff39 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_TRANSMIT);
 8003d1a:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_TRANSMIT);
 8003d1c:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_TRANSMIT);
 8003d1e:	4628      	mov	r0, r5
 8003d20:	4798      	blx	r3
 8003d22:	e752      	b.n	8003bca <UART4__vIRQVectorHandler+0x3a>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE);
 8003d24:	2104      	movs	r1, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003d26:	4d1d      	ldr	r5, [pc, #116]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003d28:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE);
 8003d2a:	4608      	mov	r0, r1
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003d2c:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE);
 8003d2e:	f000 ff2d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE);
 8003d32:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RECEIVE);
 8003d34:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_RECEIVE);
 8003d36:	4628      	mov	r0, r5
 8003d38:	4798      	blx	r3
 8003d3a:	e743      	b.n	8003bc4 <UART4__vIRQVectorHandler+0x34>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003d3c:	4d17      	ldr	r5, [pc, #92]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003d3e:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DATA_SET_READY);
 8003d40:	2103      	movs	r1, #3
 8003d42:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003d44:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DATA_SET_READY);
 8003d46:	f000 ff21 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003d4a:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_DATA_SET_READY);
 8003d4c:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003d4e:	4628      	mov	r0, r5
 8003d50:	4798      	blx	r3
 8003d52:	e734      	b.n	8003bbe <UART4__vIRQVectorHandler+0x2e>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003d54:	4d11      	ldr	r5, [pc, #68]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003d56:	2004      	movs	r0, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DATA_CARRIER_DETECT);
 8003d58:	2102      	movs	r1, #2
                UART4_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003d5a:	6468      	str	r0, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DATA_CARRIER_DETECT);
 8003d5c:	f000 ff16 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003d60:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4,  UART_enINT_DATA_CARRIER_DETECT);
 8003d62:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003d64:	4628      	mov	r0, r5
 8003d66:	4798      	blx	r3
 8003d68:	e726      	b.n	8003bb8 <UART4__vIRQVectorHandler+0x28>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003d6a:	4d0c      	ldr	r5, [pc, #48]	; (8003d9c <UART4__vIRQVectorHandler+0x20c>)
 8003d6c:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_CLEAR_TO_SEND);
 8003d6e:	2101      	movs	r1, #1
 8003d70:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003d72:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_CLEAR_TO_SEND);
 8003d74:	f000 ff0a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003d78:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_CLEAR_TO_SEND);
 8003d7a:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	4798      	blx	r3
 8003d80:	e717      	b.n	8003bb2 <UART4__vIRQVectorHandler+0x22>
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003d82:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RING_INDICATOR);
 8003d84:	2100      	movs	r1, #0
 8003d86:	2004      	movs	r0, #4
                UART4_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003d88:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RING_INDICATOR);
 8003d8a:	f000 feff 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART4_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003d8e:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_4, UART_enINT_RING_INDICATOR);
 8003d90:	4603      	mov	r3, r0
                pvfCallback(UART4_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003d92:	4628      	mov	r0, r5
 8003d94:	4798      	blx	r3
 8003d96:	e709      	b.n	8003bac <UART4__vIRQVectorHandler+0x1c>
 8003d98:	400fe000 	.word	0x400fe000
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	00031fff 	.word	0x00031fff

08003da4 <UART5__vIRQVectorHandler>:
void UART5__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003da4:	4b82      	ldr	r3, [pc, #520]	; (8003fb0 <UART5__vIRQVectorHandler+0x20c>)
 8003da6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART5_NOREADY == (SYSCTL_PRUART_R_UART5_MASK & uxReady))
 8003daa:	0698      	lsls	r0, r3, #26
{
 8003dac:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART5_NOREADY == (SYSCTL_PRUART_R_UART5_MASK & uxReady))
 8003dae:	d52e      	bpl.n	8003e0e <UART5__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART5_MIS_R;
 8003db0:	4d80      	ldr	r5, [pc, #512]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003db2:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <UART5__vIRQVectorHandler+0x214>)
        uxReg = (UBase_t) UART5_MIS_R;
 8003db4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003db6:	4023      	ands	r3, r4
 8003db8:	b34b      	cbz	r3, 8003e0e <UART5__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_SW);
            pvfCallback(UART5_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 8003dba:	07e1      	lsls	r1, r4, #31
 8003dbc:	f100 80ec 	bmi.w	8003f98 <UART5__vIRQVectorHandler+0x1f4>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RING_INDICATOR);
                pvfCallback(UART5_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003dc0:	07a2      	lsls	r2, r4, #30
 8003dc2:	f100 80dd 	bmi.w	8003f80 <UART5__vIRQVectorHandler+0x1dc>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART5_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003dc6:	0763      	lsls	r3, r4, #29
 8003dc8:	f100 80ce 	bmi.w	8003f68 <UART5__vIRQVectorHandler+0x1c4>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 8003dcc:	0726      	lsls	r6, r4, #28
 8003dce:	f100 80bf 	bmi.w	8003f50 <UART5__vIRQVectorHandler+0x1ac>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DATA_SET_READY);
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8003dd2:	06e5      	lsls	r5, r4, #27
 8003dd4:	f100 80b0 	bmi.w	8003f38 <UART5__vIRQVectorHandler+0x194>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE);
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003dd8:	06a0      	lsls	r0, r4, #26
 8003dda:	f100 80a1 	bmi.w	8003f20 <UART5__vIRQVectorHandler+0x17c>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_TRANSMIT);
                pvfCallback(UART5_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 8003dde:	0661      	lsls	r1, r4, #25
 8003de0:	f100 8092 	bmi.w	8003f08 <UART5__vIRQVectorHandler+0x164>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8003de4:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 8003de8:	f040 8081 	bne.w	8003eee <UART5__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART5_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_FRAME_ERROR);
                pvfCallback(UART5_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 8003dec:	05e2      	lsls	r2, r4, #23
 8003dee:	d470      	bmi.n	8003ed2 <UART5__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART5_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_PARITY_ERROR);
                pvfCallback(UART5_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 8003df0:	05a3      	lsls	r3, r4, #22
 8003df2:	d460      	bmi.n	8003eb6 <UART5__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BREAK_ERROR);
                pvfCallback(UART5_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 8003df4:	0566      	lsls	r6, r4, #21
 8003df6:	d450      	bmi.n	8003e9a <UART5__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART5_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART5_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 8003df8:	04e0      	lsls	r0, r4, #19
 8003dfa:	d441      	bmi.n	8003e80 <UART5__vIRQVectorHandler+0xdc>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BIT9_MODE);
                pvfCallback(UART5_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 8003dfc:	03e1      	lsls	r1, r4, #15
 8003dfe:	d432      	bmi.n	8003e66 <UART5__vIRQVectorHandler+0xc2>
            {
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 8003e00:	03a2      	lsls	r2, r4, #14
 8003e02:	d41f      	bmi.n	8003e44 <UART5__vIRQVectorHandler+0xa0>
                UART5_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 8003e04:	0523      	lsls	r3, r4, #20
 8003e06:	d410      	bmi.n	8003e2a <UART5__vIRQVectorHandler+0x86>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART5_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 8003e08:	2d01      	cmp	r5, #1
 8003e0a:	d00a      	beq.n	8003e22 <UART5__vIRQVectorHandler+0x7e>
            {
                UART5_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 8003e0c:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_SW);
 8003e0e:	210f      	movs	r1, #15
 8003e10:	2005      	movs	r0, #5
 8003e12:	f000 febb 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART5_BASE, (void*) UART_enINT_SW);
 8003e16:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_SW);
 8003e18:	4603      	mov	r3, r0
        pvfCallback(UART5_BASE, (void*) UART_enINT_SW);
 8003e1a:	4866      	ldr	r0, [pc, #408]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
}
 8003e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART5_BASE, (void*) UART_enINT_SW);
 8003e20:	4718      	bx	r3
                UART5_ECR_R = UART_ECR_R_DATA_CLEAR;
 8003e22:	4b64      	ldr	r3, [pc, #400]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003e24:	22ff      	movs	r2, #255	; 0xff
 8003e26:	605a      	str	r2, [r3, #4]
}
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
                UART5_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8003e2a:	4c62      	ldr	r4, [pc, #392]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_END_OF_TRANSMISSION);
 8003e30:	210b      	movs	r1, #11
 8003e32:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8003e34:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_END_OF_TRANSMISSION);
 8003e36:	f000 fea9 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003e3a:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_END_OF_TRANSMISSION);
 8003e3c:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4798      	blx	r3
 8003e42:	e7e1      	b.n	8003e08 <UART5__vIRQVectorHandler+0x64>
                UART5_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003e44:	4e5b      	ldr	r6, [pc, #364]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003e46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DMA_TRANSMIT);
 8003e4a:	210e      	movs	r1, #14
 8003e4c:	2005      	movs	r0, #5
                UART5_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8003e4e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8003e50:	f023 0302 	bic.w	r3, r3, #2
 8003e54:	64b3      	str	r3, [r6, #72]	; 0x48
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8003e56:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DMA_TRANSMIT);
 8003e58:	f000 fe98 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003e5c:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DMA_TRANSMIT);
 8003e5e:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8003e60:	4630      	mov	r0, r6
 8003e62:	4798      	blx	r3
 8003e64:	e7ce      	b.n	8003e04 <UART5__vIRQVectorHandler+0x60>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003e66:	4e53      	ldr	r6, [pc, #332]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DMA_RECEIVE);
 8003e6c:	210d      	movs	r1, #13
 8003e6e:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8003e70:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DMA_RECEIVE);
 8003e72:	f000 fe8b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003e76:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DMA_RECEIVE);
 8003e78:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8003e7a:	4630      	mov	r0, r6
 8003e7c:	4798      	blx	r3
 8003e7e:	e7bf      	b.n	8003e00 <UART5__vIRQVectorHandler+0x5c>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003e80:	4e4c      	ldr	r6, [pc, #304]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003e82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BIT9_MODE);
 8003e86:	210c      	movs	r1, #12
 8003e88:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8003e8a:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BIT9_MODE);
 8003e8c:	f000 fe7e 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_BIT9_MODE);
 8003e90:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BIT9_MODE);
 8003e92:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_BIT9_MODE);
 8003e94:	4630      	mov	r0, r6
 8003e96:	4798      	blx	r3
 8003e98:	e7b0      	b.n	8003dfc <UART5__vIRQVectorHandler+0x58>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003e9a:	4e46      	ldr	r6, [pc, #280]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_OVERRUN_ERROR);
 8003ea0:	210a      	movs	r1, #10
 8003ea2:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 8003ea4:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ea6:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_OVERRUN_ERROR);
 8003ea8:	f000 fe70 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003eac:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_OVERRUN_ERROR);
 8003eae:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 8003eb0:	4630      	mov	r0, r6
 8003eb2:	4798      	blx	r3
 8003eb4:	e7a0      	b.n	8003df8 <UART5__vIRQVectorHandler+0x54>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003eb6:	4e3f      	ldr	r6, [pc, #252]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BREAK_ERROR);
 8003ebc:	2109      	movs	r1, #9
 8003ebe:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 8003ec0:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ec2:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BREAK_ERROR);
 8003ec4:	f000 fe62 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003ec8:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_BREAK_ERROR);
 8003eca:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_BREAK_ERROR);
 8003ecc:	4630      	mov	r0, r6
 8003ece:	4798      	blx	r3
 8003ed0:	e790      	b.n	8003df4 <UART5__vIRQVectorHandler+0x50>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003ed2:	4e38      	ldr	r6, [pc, #224]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_PARITY_ERROR);
 8003ed8:	2108      	movs	r1, #8
 8003eda:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8003edc:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ede:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_PARITY_ERROR);
 8003ee0:	f000 fe54 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003ee4:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_PARITY_ERROR);
 8003ee6:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_PARITY_ERROR);
 8003ee8:	4630      	mov	r0, r6
 8003eea:	4798      	blx	r3
 8003eec:	e780      	b.n	8003df0 <UART5__vIRQVectorHandler+0x4c>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003eee:	4e31      	ldr	r6, [pc, #196]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003ef0:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_FRAME_ERROR);
 8003ef2:	2107      	movs	r1, #7
 8003ef4:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8003ef6:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8003ef8:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_FRAME_ERROR);
 8003efa:	f000 fe47 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003efe:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_FRAME_ERROR);
 8003f00:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_FRAME_ERROR);
 8003f02:	4630      	mov	r0, r6
 8003f04:	4798      	blx	r3
 8003f06:	e771      	b.n	8003dec <UART5__vIRQVectorHandler+0x48>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003f08:	4d2a      	ldr	r5, [pc, #168]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f0a:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE_TIMEOUT);
 8003f0c:	2106      	movs	r1, #6
 8003f0e:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8003f10:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE_TIMEOUT);
 8003f12:	f000 fe3b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003f16:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE_TIMEOUT);
 8003f18:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8003f1a:	4628      	mov	r0, r5
 8003f1c:	4798      	blx	r3
 8003f1e:	e761      	b.n	8003de4 <UART5__vIRQVectorHandler+0x40>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_TRANSMIT);
 8003f20:	2105      	movs	r1, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003f22:	4d24      	ldr	r5, [pc, #144]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f24:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_TRANSMIT);
 8003f26:	4608      	mov	r0, r1
                UART5_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8003f28:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_TRANSMIT);
 8003f2a:	f000 fe2f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_TRANSMIT);
 8003f2e:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_TRANSMIT);
 8003f30:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_TRANSMIT);
 8003f32:	4628      	mov	r0, r5
 8003f34:	4798      	blx	r3
 8003f36:	e752      	b.n	8003dde <UART5__vIRQVectorHandler+0x3a>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003f38:	4d1e      	ldr	r5, [pc, #120]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f3a:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE);
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8003f40:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE);
 8003f42:	f000 fe23 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE);
 8003f46:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RECEIVE);
 8003f48:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_RECEIVE);
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	4798      	blx	r3
 8003f4e:	e743      	b.n	8003dd8 <UART5__vIRQVectorHandler+0x34>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003f50:	4d18      	ldr	r5, [pc, #96]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f52:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DATA_SET_READY);
 8003f54:	2103      	movs	r1, #3
 8003f56:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8003f58:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DATA_SET_READY);
 8003f5a:	f000 fe17 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003f5e:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_DATA_SET_READY);
 8003f60:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_SET_READY);
 8003f62:	4628      	mov	r0, r5
 8003f64:	4798      	blx	r3
 8003f66:	e734      	b.n	8003dd2 <UART5__vIRQVectorHandler+0x2e>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003f68:	4d12      	ldr	r5, [pc, #72]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f6a:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DATA_CARRIER_DETECT);
 8003f6c:	2102      	movs	r1, #2
 8003f6e:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8003f70:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DATA_CARRIER_DETECT);
 8003f72:	f000 fe0b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003f76:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5,  UART_enINT_DATA_CARRIER_DETECT);
 8003f78:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	4798      	blx	r3
 8003f7e:	e725      	b.n	8003dcc <UART5__vIRQVectorHandler+0x28>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003f80:	4d0c      	ldr	r5, [pc, #48]	; (8003fb4 <UART5__vIRQVectorHandler+0x210>)
 8003f82:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_CLEAR_TO_SEND);
 8003f84:	2101      	movs	r1, #1
 8003f86:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8003f88:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_CLEAR_TO_SEND);
 8003f8a:	f000 fdff 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003f8e:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_CLEAR_TO_SEND);
 8003f90:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 8003f92:	4628      	mov	r0, r5
 8003f94:	4798      	blx	r3
 8003f96:	e716      	b.n	8003dc6 <UART5__vIRQVectorHandler+0x22>
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003f98:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RING_INDICATOR);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	2005      	movs	r0, #5
                UART5_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 8003f9e:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RING_INDICATOR);
 8003fa0:	f000 fdf4 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART5_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003fa4:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_5, UART_enINT_RING_INDICATOR);
 8003fa6:	4603      	mov	r3, r0
                pvfCallback(UART5_BASE, (void*) UART_enINT_RING_INDICATOR);
 8003fa8:	4628      	mov	r0, r5
 8003faa:	4798      	blx	r3
 8003fac:	e708      	b.n	8003dc0 <UART5__vIRQVectorHandler+0x1c>
 8003fae:	bf00      	nop
 8003fb0:	400fe000 	.word	0x400fe000
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	00031fff 	.word	0x00031fff

08003fbc <UART6__vIRQVectorHandler>:
void UART6__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 8003fbc:	4b82      	ldr	r3, [pc, #520]	; (80041c8 <UART6__vIRQVectorHandler+0x20c>)
 8003fbe:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART6_NOREADY == (SYSCTL_PRUART_R_UART6_MASK & uxReady))
 8003fc2:	0658      	lsls	r0, r3, #25
{
 8003fc4:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART6_NOREADY == (SYSCTL_PRUART_R_UART6_MASK & uxReady))
 8003fc6:	d52e      	bpl.n	8004026 <UART6__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART6_MIS_R;
 8003fc8:	4d80      	ldr	r5, [pc, #512]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003fca:	4b81      	ldr	r3, [pc, #516]	; (80041d0 <UART6__vIRQVectorHandler+0x214>)
        uxReg = (UBase_t) UART6_MIS_R;
 8003fcc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 8003fce:	4023      	ands	r3, r4
 8003fd0:	b34b      	cbz	r3, 8004026 <UART6__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_SW);
            pvfCallback(UART6_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 8003fd2:	07e1      	lsls	r1, r4, #31
 8003fd4:	f100 80ec 	bmi.w	80041b0 <UART6__vIRQVectorHandler+0x1f4>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RING_INDICATOR);
                pvfCallback(UART6_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 8003fd8:	07a2      	lsls	r2, r4, #30
 8003fda:	f100 80dd 	bmi.w	8004198 <UART6__vIRQVectorHandler+0x1dc>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART6_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 8003fde:	0763      	lsls	r3, r4, #29
 8003fe0:	f100 80ce 	bmi.w	8004180 <UART6__vIRQVectorHandler+0x1c4>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 8003fe4:	0726      	lsls	r6, r4, #28
 8003fe6:	f100 80bf 	bmi.w	8004168 <UART6__vIRQVectorHandler+0x1ac>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DATA_SET_READY);
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8003fea:	06e5      	lsls	r5, r4, #27
 8003fec:	f100 80b0 	bmi.w	8004150 <UART6__vIRQVectorHandler+0x194>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE);
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8003ff0:	06a0      	lsls	r0, r4, #26
 8003ff2:	f100 80a1 	bmi.w	8004138 <UART6__vIRQVectorHandler+0x17c>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_TRANSMIT);
                pvfCallback(UART6_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 8003ff6:	0661      	lsls	r1, r4, #25
 8003ff8:	f100 8092 	bmi.w	8004120 <UART6__vIRQVectorHandler+0x164>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8003ffc:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 8004000:	f040 8081 	bne.w	8004106 <UART6__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART6_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_FRAME_ERROR);
                pvfCallback(UART6_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 8004004:	05e2      	lsls	r2, r4, #23
 8004006:	d470      	bmi.n	80040ea <UART6__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART6_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_PARITY_ERROR);
                pvfCallback(UART6_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 8004008:	05a3      	lsls	r3, r4, #22
 800400a:	d460      	bmi.n	80040ce <UART6__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BREAK_ERROR);
                pvfCallback(UART6_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 800400c:	0566      	lsls	r6, r4, #21
 800400e:	d450      	bmi.n	80040b2 <UART6__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART6_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART6_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 8004010:	04e0      	lsls	r0, r4, #19
 8004012:	d441      	bmi.n	8004098 <UART6__vIRQVectorHandler+0xdc>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BIT9_MODE);
                pvfCallback(UART6_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 8004014:	03e1      	lsls	r1, r4, #15
 8004016:	d432      	bmi.n	800407e <UART6__vIRQVectorHandler+0xc2>
            {
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 8004018:	03a2      	lsls	r2, r4, #14
 800401a:	d41f      	bmi.n	800405c <UART6__vIRQVectorHandler+0xa0>
                UART6_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 800401c:	0523      	lsls	r3, r4, #20
 800401e:	d410      	bmi.n	8004042 <UART6__vIRQVectorHandler+0x86>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART6_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 8004020:	2d01      	cmp	r5, #1
 8004022:	d00a      	beq.n	800403a <UART6__vIRQVectorHandler+0x7e>
            {
                UART6_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 8004024:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_SW);
 8004026:	210f      	movs	r1, #15
 8004028:	2006      	movs	r0, #6
 800402a:	f000 fdaf 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART6_BASE, (void*) UART_enINT_SW);
 800402e:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_SW);
 8004030:	4603      	mov	r3, r0
        pvfCallback(UART6_BASE, (void*) UART_enINT_SW);
 8004032:	4866      	ldr	r0, [pc, #408]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
}
 8004034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART6_BASE, (void*) UART_enINT_SW);
 8004038:	4718      	bx	r3
                UART6_ECR_R = UART_ECR_R_DATA_CLEAR;
 800403a:	4b64      	ldr	r3, [pc, #400]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	605a      	str	r2, [r3, #4]
}
 8004040:	bd70      	pop	{r4, r5, r6, pc}
                UART6_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8004042:	4c62      	ldr	r4, [pc, #392]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004044:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_END_OF_TRANSMISSION);
 8004048:	210b      	movs	r1, #11
 800404a:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 800404c:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_END_OF_TRANSMISSION);
 800404e:	f000 fd9d 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8004052:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_END_OF_TRANSMISSION);
 8004054:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 8004056:	4620      	mov	r0, r4
 8004058:	4798      	blx	r3
 800405a:	e7e1      	b.n	8004020 <UART6__vIRQVectorHandler+0x64>
                UART6_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 800405c:	4e5b      	ldr	r6, [pc, #364]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 800405e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DMA_TRANSMIT);
 8004062:	210e      	movs	r1, #14
 8004064:	2006      	movs	r0, #6
                UART6_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8004066:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004068:	f023 0302 	bic.w	r3, r3, #2
 800406c:	64b3      	str	r3, [r6, #72]	; 0x48
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 800406e:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DMA_TRANSMIT);
 8004070:	f000 fd8c 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8004074:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DMA_TRANSMIT);
 8004076:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8004078:	4630      	mov	r0, r6
 800407a:	4798      	blx	r3
 800407c:	e7ce      	b.n	800401c <UART6__vIRQVectorHandler+0x60>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 800407e:	4e53      	ldr	r6, [pc, #332]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DMA_RECEIVE);
 8004084:	210d      	movs	r1, #13
 8004086:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8004088:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DMA_RECEIVE);
 800408a:	f000 fd7f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_RECEIVE);
 800408e:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DMA_RECEIVE);
 8004090:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_DMA_RECEIVE);
 8004092:	4630      	mov	r0, r6
 8004094:	4798      	blx	r3
 8004096:	e7bf      	b.n	8004018 <UART6__vIRQVectorHandler+0x5c>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 8004098:	4e4c      	ldr	r6, [pc, #304]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 800409a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BIT9_MODE);
 800409e:	210c      	movs	r1, #12
 80040a0:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 80040a2:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BIT9_MODE);
 80040a4:	f000 fd72 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_BIT9_MODE);
 80040a8:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BIT9_MODE);
 80040aa:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_BIT9_MODE);
 80040ac:	4630      	mov	r0, r6
 80040ae:	4798      	blx	r3
 80040b0:	e7b0      	b.n	8004014 <UART6__vIRQVectorHandler+0x58>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 80040b2:	4e46      	ldr	r6, [pc, #280]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 80040b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_OVERRUN_ERROR);
 80040b8:	210a      	movs	r1, #10
 80040ba:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 80040bc:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80040be:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_OVERRUN_ERROR);
 80040c0:	f000 fd64 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 80040c4:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_OVERRUN_ERROR);
 80040c6:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 80040c8:	4630      	mov	r0, r6
 80040ca:	4798      	blx	r3
 80040cc:	e7a0      	b.n	8004010 <UART6__vIRQVectorHandler+0x54>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 80040ce:	4e3f      	ldr	r6, [pc, #252]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 80040d0:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BREAK_ERROR);
 80040d4:	2109      	movs	r1, #9
 80040d6:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 80040d8:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80040da:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BREAK_ERROR);
 80040dc:	f000 fd56 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_BREAK_ERROR);
 80040e0:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_BREAK_ERROR);
 80040e2:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_BREAK_ERROR);
 80040e4:	4630      	mov	r0, r6
 80040e6:	4798      	blx	r3
 80040e8:	e790      	b.n	800400c <UART6__vIRQVectorHandler+0x50>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 80040ea:	4e38      	ldr	r6, [pc, #224]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 80040ec:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_PARITY_ERROR);
 80040f0:	2108      	movs	r1, #8
 80040f2:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 80040f4:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80040f6:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_PARITY_ERROR);
 80040f8:	f000 fd48 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_PARITY_ERROR);
 80040fc:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_PARITY_ERROR);
 80040fe:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_PARITY_ERROR);
 8004100:	4630      	mov	r0, r6
 8004102:	4798      	blx	r3
 8004104:	e780      	b.n	8004008 <UART6__vIRQVectorHandler+0x4c>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8004106:	4e31      	ldr	r6, [pc, #196]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004108:	2380      	movs	r3, #128	; 0x80
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_FRAME_ERROR);
 800410a:	2107      	movs	r1, #7
 800410c:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 800410e:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 8004110:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_FRAME_ERROR);
 8004112:	f000 fd3b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_FRAME_ERROR);
 8004116:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_FRAME_ERROR);
 8004118:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_FRAME_ERROR);
 800411a:	4630      	mov	r0, r6
 800411c:	4798      	blx	r3
 800411e:	e771      	b.n	8004004 <UART6__vIRQVectorHandler+0x48>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE_TIMEOUT);
 8004120:	2106      	movs	r1, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8004122:	4d2a      	ldr	r5, [pc, #168]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004124:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE_TIMEOUT);
 8004126:	4608      	mov	r0, r1
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8004128:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE_TIMEOUT);
 800412a:	f000 fd2f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 800412e:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE_TIMEOUT);
 8004130:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8004132:	4628      	mov	r0, r5
 8004134:	4798      	blx	r3
 8004136:	e761      	b.n	8003ffc <UART6__vIRQVectorHandler+0x40>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8004138:	4d24      	ldr	r5, [pc, #144]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 800413a:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_TRANSMIT);
 800413c:	2105      	movs	r1, #5
 800413e:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8004140:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_TRANSMIT);
 8004142:	f000 fd23 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_TRANSMIT);
 8004146:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_TRANSMIT);
 8004148:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_TRANSMIT);
 800414a:	4628      	mov	r0, r5
 800414c:	4798      	blx	r3
 800414e:	e752      	b.n	8003ff6 <UART6__vIRQVectorHandler+0x3a>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8004150:	4d1e      	ldr	r5, [pc, #120]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004152:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE);
 8004154:	2104      	movs	r1, #4
 8004156:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8004158:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE);
 800415a:	f000 fd17 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE);
 800415e:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RECEIVE);
 8004160:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_RECEIVE);
 8004162:	4628      	mov	r0, r5
 8004164:	4798      	blx	r3
 8004166:	e743      	b.n	8003ff0 <UART6__vIRQVectorHandler+0x34>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8004168:	4d18      	ldr	r5, [pc, #96]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 800416a:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DATA_SET_READY);
 800416c:	2103      	movs	r1, #3
 800416e:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8004170:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DATA_SET_READY);
 8004172:	f000 fd0b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_SET_READY);
 8004176:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_DATA_SET_READY);
 8004178:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_SET_READY);
 800417a:	4628      	mov	r0, r5
 800417c:	4798      	blx	r3
 800417e:	e734      	b.n	8003fea <UART6__vIRQVectorHandler+0x2e>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8004180:	4d12      	ldr	r5, [pc, #72]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 8004182:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DATA_CARRIER_DETECT);
 8004184:	2102      	movs	r1, #2
 8004186:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8004188:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DATA_CARRIER_DETECT);
 800418a:	f000 fcff 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 800418e:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6,  UART_enINT_DATA_CARRIER_DETECT);
 8004190:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 8004192:	4628      	mov	r0, r5
 8004194:	4798      	blx	r3
 8004196:	e725      	b.n	8003fe4 <UART6__vIRQVectorHandler+0x28>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 8004198:	4d0c      	ldr	r5, [pc, #48]	; (80041cc <UART6__vIRQVectorHandler+0x210>)
 800419a:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_CLEAR_TO_SEND);
 800419c:	2101      	movs	r1, #1
 800419e:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 80041a0:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_CLEAR_TO_SEND);
 80041a2:	f000 fcf3 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 80041a6:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_CLEAR_TO_SEND);
 80041a8:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 80041aa:	4628      	mov	r0, r5
 80041ac:	4798      	blx	r3
 80041ae:	e716      	b.n	8003fde <UART6__vIRQVectorHandler+0x22>
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 80041b0:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RING_INDICATOR);
 80041b2:	2100      	movs	r1, #0
 80041b4:	2006      	movs	r0, #6
                UART6_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 80041b6:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RING_INDICATOR);
 80041b8:	f000 fce8 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART6_BASE, (void*) UART_enINT_RING_INDICATOR);
 80041bc:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_6, UART_enINT_RING_INDICATOR);
 80041be:	4603      	mov	r3, r0
                pvfCallback(UART6_BASE, (void*) UART_enINT_RING_INDICATOR);
 80041c0:	4628      	mov	r0, r5
 80041c2:	4798      	blx	r3
 80041c4:	e708      	b.n	8003fd8 <UART6__vIRQVectorHandler+0x1c>
 80041c6:	bf00      	nop
 80041c8:	400fe000 	.word	0x400fe000
 80041cc:	40012000 	.word	0x40012000
 80041d0:	00031fff 	.word	0x00031fff

080041d4 <UART7__vIRQVectorHandler>:
void UART7__vIRQVectorHandler(void)
{
    UBase_t uxReady;
    UART_pvfIRQSourceHandler_t pvfCallback;

    uxReady = SYSCTL_PRUART_R;
 80041d4:	4b82      	ldr	r3, [pc, #520]	; (80043e0 <UART7__vIRQVectorHandler+0x20c>)
 80041d6:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
    if(SYSCTL_PRUART_R_UART7_NOREADY == (SYSCTL_PRUART_R_UART7_MASK & uxReady))
 80041da:	0618      	lsls	r0, r3, #24
{
 80041dc:	b570      	push	{r4, r5, r6, lr}
    if(SYSCTL_PRUART_R_UART7_NOREADY == (SYSCTL_PRUART_R_UART7_MASK & uxReady))
 80041de:	d52e      	bpl.n	800423e <UART7__vIRQVectorHandler+0x6a>
    {
        UART_nBOOLEAN boErrorFlag;
        UBase_t uxReg;

        boErrorFlag = UART_enFALSE;
        uxReg = (UBase_t) UART7_MIS_R;
 80041e0:	4d80      	ldr	r5, [pc, #512]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 80041e2:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <UART7__vIRQVectorHandler+0x214>)
        uxReg = (UBase_t) UART7_MIS_R;
 80041e4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
        if(0UL == ((UBase_t) UART_enINTMASK_ALL & uxReg))
 80041e6:	4023      	ands	r3, r4
 80041e8:	b34b      	cbz	r3, 800423e <UART7__vIRQVectorHandler+0x6a>
            pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_SW);
            pvfCallback(UART7_BASE, (void*) UART_enINT_SW);
        }
        else
        {
            if((UBase_t) UART_enINTMASK_RING_INDICATOR & uxReg)
 80041ea:	07e1      	lsls	r1, r4, #31
 80041ec:	f100 80ec 	bmi.w	80043c8 <UART7__vIRQVectorHandler+0x1f4>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RING_INDICATOR);
                pvfCallback(UART7_BASE, (void*) UART_enINT_RING_INDICATOR);
            }
            if((UBase_t) UART_enINTMASK_CLEAR_TO_SEND & uxReg)
 80041f0:	07a2      	lsls	r2, r4, #30
 80041f2:	f100 80dd 	bmi.w	80043b0 <UART7__vIRQVectorHandler+0x1dc>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_CLEAR_TO_SEND);
                pvfCallback(UART7_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
            }
            if((UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT & uxReg)
 80041f6:	0763      	lsls	r3, r4, #29
 80041f8:	f100 80ce 	bmi.w	8004398 <UART7__vIRQVectorHandler+0x1c4>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DATA_CARRIER_DETECT);
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
            }
            if((UBase_t) UART_enINTMASK_DATA_SET_READY & uxReg)
 80041fc:	0726      	lsls	r6, r4, #28
 80041fe:	f100 80bf 	bmi.w	8004380 <UART7__vIRQVectorHandler+0x1ac>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DATA_SET_READY);
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_SET_READY);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE & uxReg)
 8004202:	06e5      	lsls	r5, r4, #27
 8004204:	f100 80b0 	bmi.w	8004368 <UART7__vIRQVectorHandler+0x194>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE);
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_TRANSMIT & uxReg)
 8004208:	06a0      	lsls	r0, r4, #26
 800420a:	f100 80a1 	bmi.w	8004350 <UART7__vIRQVectorHandler+0x17c>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_TRANSMIT);
                pvfCallback(UART7_BASE, (void*) UART_enINT_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT & uxReg)
 800420e:	0661      	lsls	r1, r4, #25
 8004210:	f100 8092 	bmi.w	8004338 <UART7__vIRQVectorHandler+0x164>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE_TIMEOUT);
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
            }
            if((UBase_t) UART_enINTMASK_FRAME_ERROR & uxReg)
 8004214:	f014 0580 	ands.w	r5, r4, #128	; 0x80
 8004218:	f040 8081 	bne.w	800431e <UART7__vIRQVectorHandler+0x14a>
                boErrorFlag = UART_enTRUE;
                UART7_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_FRAME_ERROR);
                pvfCallback(UART7_BASE, (void*) UART_enINT_FRAME_ERROR);
            }
            if((UBase_t) UART_enINTMASK_PARITY_ERROR & uxReg)
 800421c:	05e2      	lsls	r2, r4, #23
 800421e:	d470      	bmi.n	8004302 <UART7__vIRQVectorHandler+0x12e>
                boErrorFlag = UART_enTRUE;
                UART7_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_PARITY_ERROR);
                pvfCallback(UART7_BASE, (void*) UART_enINT_PARITY_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BREAK_ERROR & uxReg)
 8004220:	05a3      	lsls	r3, r4, #22
 8004222:	d460      	bmi.n	80042e6 <UART7__vIRQVectorHandler+0x112>
                boErrorFlag = UART_enTRUE;
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BREAK_ERROR);
                pvfCallback(UART7_BASE, (void*) UART_enINT_BREAK_ERROR);
            }
            if((UBase_t) UART_enINTMASK_OVERRUN_ERROR & uxReg)
 8004224:	0566      	lsls	r6, r4, #21
 8004226:	d450      	bmi.n	80042ca <UART7__vIRQVectorHandler+0xf6>
                boErrorFlag = UART_enTRUE;
                UART7_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_OVERRUN_ERROR);
                pvfCallback(UART7_BASE, (void*) UART_enINT_OVERRUN_ERROR);
            }
            if((UBase_t) UART_enINTMASK_BIT9_MODE & uxReg)
 8004228:	04e0      	lsls	r0, r4, #19
 800422a:	d441      	bmi.n	80042b0 <UART7__vIRQVectorHandler+0xdc>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BIT9_MODE);
                pvfCallback(UART7_BASE, (void*) UART_enINT_BIT9_MODE);
            }
            if((UBase_t) UART_enINTMASK_DMA_RECEIVE & uxReg)
 800422c:	03e1      	lsls	r1, r4, #15
 800422e:	d432      	bmi.n	8004296 <UART7__vIRQVectorHandler+0xc2>
            {
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DMA_RECEIVE);
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_RECEIVE);
            }
            if((UBase_t) UART_enINTMASK_DMA_TRANSMIT & uxReg)
 8004230:	03a2      	lsls	r2, r4, #14
 8004232:	d41f      	bmi.n	8004274 <UART7__vIRQVectorHandler+0xa0>
                UART7_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DMA_TRANSMIT);
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_TRANSMIT);
            }
            if((UBase_t) UART_enINTMASK_END_OF_TRANSMISSION & uxReg)
 8004234:	0523      	lsls	r3, r4, #20
 8004236:	d410      	bmi.n	800425a <UART7__vIRQVectorHandler+0x86>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_END_OF_TRANSMISSION);
                pvfCallback(UART7_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
            }

            if(UART_enTRUE == boErrorFlag)
 8004238:	2d01      	cmp	r5, #1
 800423a:	d00a      	beq.n	8004252 <UART7__vIRQVectorHandler+0x7e>
            {
                UART7_ECR_R = UART_ECR_R_DATA_CLEAR;
            }
        }
    }
}
 800423c:	bd70      	pop	{r4, r5, r6, pc}
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_SW);
 800423e:	210f      	movs	r1, #15
 8004240:	2007      	movs	r0, #7
 8004242:	f000 fca3 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
        pvfCallback(UART7_BASE, (void*) UART_enINT_SW);
 8004246:	210f      	movs	r1, #15
        pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_SW);
 8004248:	4603      	mov	r3, r0
        pvfCallback(UART7_BASE, (void*) UART_enINT_SW);
 800424a:	4866      	ldr	r0, [pc, #408]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
}
 800424c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pvfCallback(UART7_BASE, (void*) UART_enINT_SW);
 8004250:	4718      	bx	r3
                UART7_ECR_R = UART_ECR_R_DATA_CLEAR;
 8004252:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004254:	22ff      	movs	r2, #255	; 0xff
 8004256:	605a      	str	r2, [r3, #4]
}
 8004258:	bd70      	pop	{r4, r5, r6, pc}
                UART7_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 800425a:	4c62      	ldr	r4, [pc, #392]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 800425c:	f44f 6300 	mov.w	r3, #2048	; 0x800
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_END_OF_TRANSMISSION);
 8004260:	210b      	movs	r1, #11
 8004262:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_END_OF_TRANSMISSION;
 8004264:	6463      	str	r3, [r4, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_END_OF_TRANSMISSION);
 8004266:	f000 fc91 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 800426a:	210b      	movs	r1, #11
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_END_OF_TRANSMISSION);
 800426c:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_END_OF_TRANSMISSION);
 800426e:	4620      	mov	r0, r4
 8004270:	4798      	blx	r3
 8004272:	e7e1      	b.n	8004238 <UART7__vIRQVectorHandler+0x64>
                UART7_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 8004274:	4e5b      	ldr	r6, [pc, #364]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8004276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DMA_TRANSMIT);
 800427a:	210e      	movs	r1, #14
 800427c:	2007      	movs	r0, #7
                UART7_DMACTL_R &= ~UART_DMACTL_R_TXDMAE_MASK;
 800427e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	64b3      	str	r3, [r6, #72]	; 0x48
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_TRANSMIT;
 8004286:	6472      	str	r2, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DMA_TRANSMIT);
 8004288:	f000 fc80 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 800428c:	210e      	movs	r1, #14
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DMA_TRANSMIT);
 800428e:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_TRANSMIT);
 8004290:	4630      	mov	r0, r6
 8004292:	4798      	blx	r3
 8004294:	e7ce      	b.n	8004234 <UART7__vIRQVectorHandler+0x60>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 8004296:	4e53      	ldr	r6, [pc, #332]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DMA_RECEIVE);
 800429c:	210d      	movs	r1, #13
 800429e:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DMA_RECEIVE;
 80042a0:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DMA_RECEIVE);
 80042a2:	f000 fc73 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_RECEIVE);
 80042a6:	210d      	movs	r1, #13
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DMA_RECEIVE);
 80042a8:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_DMA_RECEIVE);
 80042aa:	4630      	mov	r0, r6
 80042ac:	4798      	blx	r3
 80042ae:	e7bf      	b.n	8004230 <UART7__vIRQVectorHandler+0x5c>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 80042b0:	4e4c      	ldr	r6, [pc, #304]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 80042b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BIT9_MODE);
 80042b6:	210c      	movs	r1, #12
 80042b8:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BIT9_MODE;
 80042ba:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BIT9_MODE);
 80042bc:	f000 fc66 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_BIT9_MODE);
 80042c0:	210c      	movs	r1, #12
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BIT9_MODE);
 80042c2:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_BIT9_MODE);
 80042c4:	4630      	mov	r0, r6
 80042c6:	4798      	blx	r3
 80042c8:	e7b0      	b.n	800422c <UART7__vIRQVectorHandler+0x58>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 80042ca:	4e46      	ldr	r6, [pc, #280]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 80042cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_OVERRUN_ERROR);
 80042d0:	210a      	movs	r1, #10
 80042d2:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_OVERRUN_ERROR;
 80042d4:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80042d6:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_OVERRUN_ERROR);
 80042d8:	f000 fc58 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 80042dc:	210a      	movs	r1, #10
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_OVERRUN_ERROR);
 80042de:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_OVERRUN_ERROR);
 80042e0:	4630      	mov	r0, r6
 80042e2:	4798      	blx	r3
 80042e4:	e7a0      	b.n	8004228 <UART7__vIRQVectorHandler+0x54>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 80042e6:	4e3f      	ldr	r6, [pc, #252]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 80042e8:	f44f 7300 	mov.w	r3, #512	; 0x200
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BREAK_ERROR);
 80042ec:	2109      	movs	r1, #9
 80042ee:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_BREAK_ERROR;
 80042f0:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 80042f2:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BREAK_ERROR);
 80042f4:	f000 fc4a 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_BREAK_ERROR);
 80042f8:	2109      	movs	r1, #9
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_BREAK_ERROR);
 80042fa:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_BREAK_ERROR);
 80042fc:	4630      	mov	r0, r6
 80042fe:	4798      	blx	r3
 8004300:	e790      	b.n	8004224 <UART7__vIRQVectorHandler+0x50>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 8004302:	4e38      	ldr	r6, [pc, #224]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004304:	f44f 7380 	mov.w	r3, #256	; 0x100
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_PARITY_ERROR);
 8004308:	2108      	movs	r1, #8
 800430a:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_PARITY_ERROR;
 800430c:	6473      	str	r3, [r6, #68]	; 0x44
                boErrorFlag = UART_enTRUE;
 800430e:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_PARITY_ERROR);
 8004310:	f000 fc3c 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_PARITY_ERROR);
 8004314:	2108      	movs	r1, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_PARITY_ERROR);
 8004316:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_PARITY_ERROR);
 8004318:	4630      	mov	r0, r6
 800431a:	4798      	blx	r3
 800431c:	e780      	b.n	8004220 <UART7__vIRQVectorHandler+0x4c>
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_FRAME_ERROR);
 800431e:	2107      	movs	r1, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8004320:	4e30      	ldr	r6, [pc, #192]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004322:	2380      	movs	r3, #128	; 0x80
                boErrorFlag = UART_enTRUE;
 8004324:	2501      	movs	r5, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_FRAME_ERROR);
 8004326:	4608      	mov	r0, r1
                UART7_ICR_R = (UBase_t) UART_enINTMASK_FRAME_ERROR;
 8004328:	6473      	str	r3, [r6, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_FRAME_ERROR);
 800432a:	f000 fc2f 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_FRAME_ERROR);
 800432e:	2107      	movs	r1, #7
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_FRAME_ERROR);
 8004330:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_FRAME_ERROR);
 8004332:	4630      	mov	r0, r6
 8004334:	4798      	blx	r3
 8004336:	e771      	b.n	800421c <UART7__vIRQVectorHandler+0x48>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8004338:	4d2a      	ldr	r5, [pc, #168]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 800433a:	2340      	movs	r3, #64	; 0x40
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE_TIMEOUT);
 800433c:	2106      	movs	r1, #6
 800433e:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE_TIMEOUT;
 8004340:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE_TIMEOUT);
 8004342:	f000 fc23 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 8004346:	2106      	movs	r1, #6
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE_TIMEOUT);
 8004348:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE_TIMEOUT);
 800434a:	4628      	mov	r0, r5
 800434c:	4798      	blx	r3
 800434e:	e761      	b.n	8004214 <UART7__vIRQVectorHandler+0x40>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8004350:	4d24      	ldr	r5, [pc, #144]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004352:	2320      	movs	r3, #32
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_TRANSMIT);
 8004354:	2105      	movs	r1, #5
 8004356:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_TRANSMIT;
 8004358:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_TRANSMIT);
 800435a:	f000 fc17 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_TRANSMIT);
 800435e:	2105      	movs	r1, #5
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_TRANSMIT);
 8004360:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_TRANSMIT);
 8004362:	4628      	mov	r0, r5
 8004364:	4798      	blx	r3
 8004366:	e752      	b.n	800420e <UART7__vIRQVectorHandler+0x3a>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8004368:	4d1e      	ldr	r5, [pc, #120]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 800436a:	2310      	movs	r3, #16
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE);
 800436c:	2104      	movs	r1, #4
 800436e:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RECEIVE;
 8004370:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE);
 8004372:	f000 fc0b 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE);
 8004376:	2104      	movs	r1, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RECEIVE);
 8004378:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_RECEIVE);
 800437a:	4628      	mov	r0, r5
 800437c:	4798      	blx	r3
 800437e:	e743      	b.n	8004208 <UART7__vIRQVectorHandler+0x34>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8004380:	4d18      	ldr	r5, [pc, #96]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 8004382:	2308      	movs	r3, #8
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DATA_SET_READY);
 8004384:	2103      	movs	r1, #3
 8004386:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_SET_READY;
 8004388:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DATA_SET_READY);
 800438a:	f000 fbff 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_SET_READY);
 800438e:	2103      	movs	r1, #3
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_DATA_SET_READY);
 8004390:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_SET_READY);
 8004392:	4628      	mov	r0, r5
 8004394:	4798      	blx	r3
 8004396:	e734      	b.n	8004202 <UART7__vIRQVectorHandler+0x2e>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 8004398:	4d12      	ldr	r5, [pc, #72]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 800439a:	2304      	movs	r3, #4
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DATA_CARRIER_DETECT);
 800439c:	2102      	movs	r1, #2
 800439e:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_DATA_CARRIER_DETECT;
 80043a0:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DATA_CARRIER_DETECT);
 80043a2:	f000 fbf3 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 80043a6:	2102      	movs	r1, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7,  UART_enINT_DATA_CARRIER_DETECT);
 80043a8:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_DATA_CARRIER_DETECT);
 80043aa:	4628      	mov	r0, r5
 80043ac:	4798      	blx	r3
 80043ae:	e725      	b.n	80041fc <UART7__vIRQVectorHandler+0x28>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 80043b0:	4d0c      	ldr	r5, [pc, #48]	; (80043e4 <UART7__vIRQVectorHandler+0x210>)
 80043b2:	2302      	movs	r3, #2
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_CLEAR_TO_SEND);
 80043b4:	2101      	movs	r1, #1
 80043b6:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_CLEAR_TO_SEND;
 80043b8:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_CLEAR_TO_SEND);
 80043ba:	f000 fbe7 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 80043be:	2101      	movs	r1, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_CLEAR_TO_SEND);
 80043c0:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_CLEAR_TO_SEND);
 80043c2:	4628      	mov	r0, r5
 80043c4:	4798      	blx	r3
 80043c6:	e716      	b.n	80041f6 <UART7__vIRQVectorHandler+0x22>
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 80043c8:	2301      	movs	r3, #1
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RING_INDICATOR);
 80043ca:	2100      	movs	r1, #0
 80043cc:	2007      	movs	r0, #7
                UART7_ICR_R = (UBase_t) UART_enINTMASK_RING_INDICATOR;
 80043ce:	646b      	str	r3, [r5, #68]	; 0x44
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RING_INDICATOR);
 80043d0:	f000 fbdc 	bl	8004b8c <UART__pvfGetIRQSourceHandler>
                pvfCallback(UART7_BASE, (void*) UART_enINT_RING_INDICATOR);
 80043d4:	2100      	movs	r1, #0
                pvfCallback = UART__pvfGetIRQSourceHandler(UART_enMODULE_7, UART_enINT_RING_INDICATOR);
 80043d6:	4603      	mov	r3, r0
                pvfCallback(UART7_BASE, (void*) UART_enINT_RING_INDICATOR);
 80043d8:	4628      	mov	r0, r5
 80043da:	4798      	blx	r3
 80043dc:	e708      	b.n	80041f0 <UART7__vIRQVectorHandler+0x1c>
 80043de:	bf00      	nop
 80043e0:	400fe000 	.word	0x400fe000
 80043e4:	40013000 	.word	0x40013000
 80043e8:	00031fff 	.word	0x00031fff

080043ec <UART__enSetReadyOnRunMode>:
 SYSCTL_enUART0, SYSCTL_enUART1, SYSCTL_enUART2, SYSCTL_enUART3,
 SYSCTL_enUART4, SYSCTL_enUART5, SYSCTL_enUART6, SYSCTL_enUART7
};

UART_nERROR UART__enSetReadyOnRunMode(UART_nMODULE enModuleArg)
{
 80043ec:	b510      	push	{r4, lr}
    UART_nERROR enErrorReg;
    SYSCTL_nPERIPHERAL enPeripheralReg;

    enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 80043ee:	2108      	movs	r1, #8
{
 80043f0:	4604      	mov	r4, r0
    enErrorReg = (UART_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) UART_enMODULE_MAX);
 80043f2:	f7fd f8b1 	bl	8001558 <MCU__enCheckParams>
    if(UART_enERROR_OK == enErrorReg)
 80043f6:	b100      	cbz	r0, 80043fa <UART__enSetReadyOnRunMode+0xe>
    {
        enPeripheralReg = SYSCTL_VECTOR_UART[(UBase_t) enModuleArg];
        enErrorReg = (UART_nERROR) SYSCTL__enSetReadyOnRunMode(SYSCTL_enMODULE_0, enPeripheralReg);
    }
    return (enErrorReg);
}
 80043f8:	bd10      	pop	{r4, pc}
        enPeripheralReg = SYSCTL_VECTOR_UART[(UBase_t) enModuleArg];
 80043fa:	4b03      	ldr	r3, [pc, #12]	; (8004408 <UART__enSetReadyOnRunMode+0x1c>)
        enErrorReg = (UART_nERROR) SYSCTL__enSetReadyOnRunMode(SYSCTL_enMODULE_0, enPeripheralReg);
 80043fc:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
}
 8004400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        enErrorReg = (UART_nERROR) SYSCTL__enSetReadyOnRunMode(SYSCTL_enMODULE_0, enPeripheralReg);
 8004404:	f000 ba0a 	b.w	800481c <SYSCTL__enSetReadyOnRunMode>
 8004408:	08007f44 	.word	0x08007f44

0800440c <UART__enSetLineControlStructure_BaudRate>:
}

UART_nERROR UART__enSetLineControlStructure_BaudRate(UART_nMODULE enModuleArg,
                                             const UART_LINE_CONTROL_t stLineControl,
                                             UBase_t uxBaudRateArg)
{
 800440c:	b084      	sub	sp, #16
 800440e:	b530      	push	{r4, r5, lr}
 8004410:	b085      	sub	sp, #20
 8004412:	4605      	mov	r5, r0
 8004414:	ac09      	add	r4, sp, #36	; 0x24
 8004416:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    UART_nERROR enErrorReg;
    enErrorReg = UART__enSetBaudRate(enModuleArg, uxBaudRateArg);
 800441a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800441c:	f000 fbcc 	bl	8004bb8 <UART__enSetBaudRate>
    if(UART_enERROR_OK == enErrorReg)
 8004420:	b120      	cbz	r0, 800442c <UART__enSetLineControlStructure_BaudRate+0x20>
    {
        enErrorReg = UART__enSetLineControlStructure(enModuleArg, stLineControl);
    }
    return (enErrorReg);
}
 8004422:	b005      	add	sp, #20
 8004424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004428:	b004      	add	sp, #16
 800442a:	4770      	bx	lr
        enErrorReg = UART__enSetLineControlStructure(enModuleArg, stLineControl);
 800442c:	ab0c      	add	r3, sp, #48	; 0x30
 800442e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004432:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8004436:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800443a:	4628      	mov	r0, r5
 800443c:	f7fe fde6 	bl	800300c <UART__enSetLineControlStructure>
}
 8004440:	b005      	add	sp, #20
 8004442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004446:	b004      	add	sp, #16
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop

0800444c <UART__enSetLineControlStructurePointer_BaudRate>:

UART_nERROR UART__enSetLineControlStructurePointer_BaudRate(UART_nMODULE enModuleArg,
                                                const UART_LINE_CONTROL_t* pstLineControl,
                                                UBase_t uxBaudRateArg)
{
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	460d      	mov	r5, r1
    UART_nERROR enErrorReg;
    enErrorReg = UART__enSetBaudRate(enModuleArg, uxBaudRateArg);
 8004450:	4611      	mov	r1, r2
{
 8004452:	4604      	mov	r4, r0
    enErrorReg = UART__enSetBaudRate(enModuleArg, uxBaudRateArg);
 8004454:	f000 fbb0 	bl	8004bb8 <UART__enSetBaudRate>
    if(UART_enERROR_OK == enErrorReg)
 8004458:	b100      	cbz	r0, 800445c <UART__enSetLineControlStructurePointer_BaudRate+0x10>
    {
        enErrorReg = UART__enSetLineControlStructurePointer(enModuleArg, pstLineControl);
    }
    return (enErrorReg);
}
 800445a:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = UART__enSetLineControlStructurePointer(enModuleArg, pstLineControl);
 800445c:	4629      	mov	r1, r5
 800445e:	4620      	mov	r0, r4
}
 8004460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = UART__enSetLineControlStructurePointer(enModuleArg, pstLineControl);
 8004464:	f7fe be0a 	b.w	800307c <UART__enSetLineControlStructurePointer>

08004468 <GPIO__enSetConfigStructureByNumber>:
GPIO_nERROR GPIO__enSetConfigStructureByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                               const GPIO_CONFIG_t *pstConfigArg)
{
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO_enERROR_OK;
    if(0UL == (UBase_t) pstConfigArg)
 8004468:	b33a      	cbz	r2, 80044ba <GPIO__enSetConfigStructureByNumber+0x52>
{
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	4614      	mov	r4, r2
    {
        enErrorReg = GPIO_enERROR_POINTER;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = GPIO__enSetCommitStateByNumber(enPortArg, enPinArg, GPIO_enSTATE_ENA);
 800446e:	2201      	movs	r2, #1
 8004470:	4605      	mov	r5, r0
 8004472:	460e      	mov	r6, r1
 8004474:	f7fe faf0 	bl	8002a58 <GPIO__enSetCommitStateByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004478:	b9f0      	cbnz	r0, 80044b8 <GPIO__enSetConfigStructureByNumber+0x50>
    {
        enErrorReg = GPIO__enSetResistorModeByNumber(enPortArg, enPinArg, pstConfigArg->enResistorMode);
 800447a:	68e2      	ldr	r2, [r4, #12]
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f96e 	bl	8004760 <GPIO__enSetResistorModeByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004484:	b9c0      	cbnz	r0, 80044b8 <GPIO__enSetConfigStructureByNumber+0x50>
    {
        enErrorReg = GPIO__enSetOutputModeByNumber(enPortArg, enPinArg, pstConfigArg->enOutputMode);
 8004486:	68a2      	ldr	r2, [r4, #8]
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	f000 f94e 	bl	800472c <GPIO__enSetOutputModeByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004490:	b990      	cbnz	r0, 80044b8 <GPIO__enSetConfigStructureByNumber+0x50>
    {
        enErrorReg = GPIO__enSetDirectionByNumber(enPortArg, enPinArg, pstConfigArg->enDirection);
 8004492:	6862      	ldr	r2, [r4, #4]
 8004494:	4631      	mov	r1, r6
 8004496:	4628      	mov	r0, r5
 8004498:	f000 f87e 	bl	8004598 <GPIO__enSetDirectionByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 800449c:	b960      	cbnz	r0, 80044b8 <GPIO__enSetConfigStructureByNumber+0x50>
    {
        enErrorReg = GPIO__enSetDriveByNumber(enPortArg, enPinArg, pstConfigArg->enDrive);
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	4631      	mov	r1, r6
 80044a2:	4628      	mov	r0, r5
 80044a4:	f000 f892 	bl	80045cc <GPIO__enSetDriveByNumber>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 80044a8:	b930      	cbnz	r0, 80044b8 <GPIO__enSetConfigStructureByNumber+0x50>
    {
        enErrorReg = GPIO__enSetCommitStateByNumber(enPortArg, enPinArg, GPIO_enSTATE_DIS);
 80044aa:	4602      	mov	r2, r0
 80044ac:	4631      	mov	r1, r6
 80044ae:	4628      	mov	r0, r5
    }
    return (enErrorReg);
}
 80044b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        enErrorReg = GPIO__enSetCommitStateByNumber(enPortArg, enPinArg, GPIO_enSTATE_DIS);
 80044b4:	f7fe bad0 	b.w	8002a58 <GPIO__enSetCommitStateByNumber>
}
 80044b8:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 80044ba:	2001      	movs	r0, #1
}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <GPIO__enSetConfigByNumber>:
{
 80044c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044c2:	b083      	sub	sp, #12
    pstConfigReg = (GPIO_CONFIG_t *) 0UL;
 80044c4:	2700      	movs	r7, #0
{
 80044c6:	4605      	mov	r5, r0
 80044c8:	460e      	mov	r6, r1
    enErrorReg = GPIO__enConvertConfigStructure_Create(enConfigArg, &pstConfigReg);
 80044ca:	4610      	mov	r0, r2
 80044cc:	a901      	add	r1, sp, #4
    pstConfigReg = (GPIO_CONFIG_t *) 0UL;
 80044ce:	9701      	str	r7, [sp, #4]
    enErrorReg = GPIO__enConvertConfigStructure_Create(enConfigArg, &pstConfigReg);
 80044d0:	f000 f814 	bl	80044fc <GPIO__enConvertConfigStructure_Create>
    if(GPIO_enERROR_OK == enErrorReg)
 80044d4:	b130      	cbz	r0, 80044e4 <GPIO__enSetConfigByNumber+0x24>
 80044d6:	4604      	mov	r4, r0
    GPIO__vDeleteConfigStruct(pstConfigReg);
 80044d8:	9801      	ldr	r0, [sp, #4]
 80044da:	f000 f82b 	bl	8004534 <GPIO__vDeleteConfigStruct>
}
 80044de:	4620      	mov	r0, r4
 80044e0:	b003      	add	sp, #12
 80044e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        enErrorReg = GPIO__enSetConfigStructureByNumber(enPortArg, enPinArg, pstConfigReg);
 80044e4:	9a01      	ldr	r2, [sp, #4]
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	f7ff ffbd 	bl	8004468 <GPIO__enSetConfigStructureByNumber>
 80044ee:	4604      	mov	r4, r0
    GPIO__vDeleteConfigStruct(pstConfigReg);
 80044f0:	9801      	ldr	r0, [sp, #4]
 80044f2:	f000 f81f 	bl	8004534 <GPIO__vDeleteConfigStruct>
}
 80044f6:	4620      	mov	r0, r4
 80044f8:	b003      	add	sp, #12
 80044fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080044fc <GPIO__enConvertConfigStructure_Create>:
{
    GPIO_CONFIG_t *pstConfigReg;
    GPIO_nERROR enErrorReg;

    enErrorReg = GPIO_enERROR_OK;
    if(0UL == (uintptr_t) pstConfigArg)
 80044fc:	b1b9      	cbz	r1, 800452e <GPIO__enConvertConfigStructure_Create+0x32>
{
 80044fe:	b538      	push	{r3, r4, r5, lr}
 8004500:	4604      	mov	r4, r0
    {
#if defined (__TI_ARM__ ) || defined (__MSP430__ )
        pstConfigReg = (GPIO_CONFIG_t*) memalign( (size_t) 4,
                                                     (size_t) (sizeof(GPIO_CONFIG_t)));
#elif defined (__GNUC__ )
        pstConfigReg = (GPIO_CONFIG_t*) malloc((size_t) sizeof(GPIO_CONFIG_t));
 8004502:	2010      	movs	r0, #16
 8004504:	460d      	mov	r5, r1
 8004506:	f001 fdd7 	bl	80060b8 <malloc>
    if(0UL == (uintptr_t) pstConfigArg)
 800450a:	4603      	mov	r3, r0
 800450c:	b168      	cbz	r0, 800452a <GPIO__enConvertConfigStructure_Create+0x2e>
        uxResistorReg &= 0xFUL;
 800450e:	f004 010f 	and.w	r1, r4, #15
        uxOutputReg &= 0xFUL;
 8004512:	f3c4 1203 	ubfx	r2, r4, #4, #4
#endif
        enErrorReg = GPIO__enConvertConfigStructure(enConfigArg, pstConfigReg);
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        *pstConfigArg = pstConfigReg;
 8004516:	6028      	str	r0, [r5, #0]
    enErrorReg = GPIO_enERROR_OK;
 8004518:	2000      	movs	r0, #0
        pstConfigArg->enOutputMode = (GPIO_nOUTMODE) uxOutputReg;
 800451a:	e9c3 2102 	strd	r2, r1, [r3, #8]
        uxDirectionReg &= 0xFFUL;
 800451e:	f3c4 2207 	ubfx	r2, r4, #8, #8
        uxDriveReg >>= 16UL;
 8004522:	0c24      	lsrs	r4, r4, #16
        pstConfigArg->enDrive = (GPIO_nDRIVE) uxDriveReg;
 8004524:	e9c3 4200 	strd	r4, r2, [r3]
    }
    return (enErrorReg);
}
 8004528:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 800452a:	2001      	movs	r0, #1
}
 800452c:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 800452e:	2001      	movs	r0, #1
}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop

08004534 <GPIO__vDeleteConfigStruct>:

void GPIO__vDeleteConfigStruct(GPIO_CONFIG_t *pstConfigArg)
{
    free(pstConfigArg);
 8004534:	f001 bdc8 	b.w	80060c8 <free>

08004538 <GPIO__enReadRegister>:
GPIO_nERROR GPIO__enReadRegister(GPIO_nPORT enPortArg, GPIO_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004538:	b199      	cbz	r1, 8004562 <GPIO__enReadRegister+0x2a>
{
 800453a:	b538      	push	{r3, r4, r5, lr}
 800453c:	460c      	mov	r4, r1
    {
        enErrorReg = GPIO_enERROR_POINTER;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPortArg, (UBase_t) GPIO_enPORT_MAX);
 800453e:	210f      	movs	r1, #15
 8004540:	4605      	mov	r5, r0
 8004542:	f7fd f809 	bl	8001558 <MCU__enCheckParams>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004546:	b958      	cbnz	r0, 8004560 <GPIO__enReadRegister+0x28>
    {
        uptrModuleBase = GPIO__uptrBlockBaseAddress(enPortArg);
 8004548:	4628      	mov	r0, r5
 800454a:	f000 f94b 	bl	80047e4 <GPIO__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 800454e:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = GPIO__uptrBlockBaseAddress(enPortArg);
 8004550:	4602      	mov	r2, r0
        enErrorReg = (GPIO_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 8004552:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8004554:	4413      	add	r3, r2
 8004556:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 8004558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (GPIO_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 800455c:	f7fd b802 	b.w	8001564 <MCU__enReadRegister>
}
 8004560:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 8004562:	2001      	movs	r0, #1
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop

08004568 <GPIO__enWriteRegister>:
GPIO_nERROR GPIO__enWriteRegister(GPIO_nPORT enPortArg, GPIO_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004568:	b199      	cbz	r1, 8004592 <GPIO__enWriteRegister+0x2a>
{
 800456a:	b538      	push	{r3, r4, r5, lr}
 800456c:	460c      	mov	r4, r1
    {
        enErrorReg = GPIO_enERROR_POINTER;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPortArg, (UBase_t) GPIO_enPORT_MAX);
 800456e:	210f      	movs	r1, #15
 8004570:	4605      	mov	r5, r0
 8004572:	f7fc fff1 	bl	8001558 <MCU__enCheckParams>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004576:	b958      	cbnz	r0, 8004590 <GPIO__enWriteRegister+0x28>
    {
        uptrModuleBase = GPIO__uptrBlockBaseAddress(enPortArg);
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f933 	bl	80047e4 <GPIO__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 800457e:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = GPIO__uptrBlockBaseAddress(enPortArg);
 8004580:	4602      	mov	r2, r0
        enErrorReg = (GPIO_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 8004582:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8004584:	4413      	add	r3, r2
 8004586:	60e3      	str	r3, [r4, #12]
    }

    return (enErrorReg);
}
 8004588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (GPIO_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 800458c:	f7fd bb60 	b.w	8001c50 <MCU__enWriteRegister>
}
 8004590:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 8004592:	2001      	movs	r0, #1
}
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop

08004598 <GPIO__enSetDirectionByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetDirectionByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                             GPIO_nDIR enDirectionArg)
{
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	460c      	mov	r4, r1
 800459c:	b084      	sub	sp, #16
 800459e:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80045a0:	2108      	movs	r1, #8
 80045a2:	4620      	mov	r0, r4
{
 80045a4:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80045a6:	f7fc ffd7 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 80045aa:	b108      	cbz	r0, 80045b0 <GPIO__enSetDirectionByNumber+0x18>
        stRegister.uxValue = (UBase_t) enDirectionArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 80045ac:	b004      	add	sp, #16
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_DIR_PIN0_MASK;
 80045b0:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_DIR_OFFSET;
 80045b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80045b6:	4669      	mov	r1, sp
 80045b8:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_DIR_OFFSET;
 80045ba:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enDirectionArg;
 80045bc:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_DIR_PIN0_MASK;
 80045be:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80045c2:	f7ff ffd1 	bl	8004568 <GPIO__enWriteRegister>
}
 80045c6:	b004      	add	sp, #16
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	bf00      	nop

080045cc <GPIO__enSetDriveByNumber>:
    return (enErrorReg);
}


GPIO_nERROR GPIO__enSetDriveByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg, GPIO_nDRIVE enDriveArg)
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	460d      	mov	r5, r1
 80045d0:	b083      	sub	sp, #12
 80045d2:	4606      	mov	r6, r0

    uxNormalDriveReg = 0UL;
    uxExtendedDriveReg = 0UL;
    uxExtendedModeReg = 0UL;
    uxSlewRateReg = 0UL;
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80045d4:	2108      	movs	r1, #8
 80045d6:	4628      	mov	r0, r5
{
 80045d8:	4614      	mov	r4, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80045da:	f7fc ffbd 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 80045de:	b108      	cbz	r0, 80045e4 <GPIO__enSetDriveByNumber+0x18>
    if(GPIO_enERROR_OK == enErrorReg)
    {
        enErrorReg = GPIO__enSetSlewRateByNumber(enPortArg, enPinArg, (GPIO_nSTATE) uxSlewRateReg);
    }
    return (enErrorReg);
}
 80045e0:	b003      	add	sp, #12
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        enExtendedCapabilityReg = GPIO_enDRIVE_CAPABILITY_NORMAL;
 80045e4:	9001      	str	r0, [sp, #4]
        enErrorReg = GPIO__enGetDriveCapability(enPortArg, &enExtendedCapabilityReg);
 80045e6:	a901      	add	r1, sp, #4
 80045e8:	4630      	mov	r0, r6
        uxExtendedModeReg &= 0xFUL;
 80045ea:	f3c4 3703 	ubfx	r7, r4, #12, #4
        enErrorReg = GPIO__enGetDriveCapability(enPortArg, &enExtendedCapabilityReg);
 80045ee:	f000 fbb5 	bl	8004d5c <GPIO__enGetDriveCapability>
    if(GPIO_enERROR_OK == enErrorReg)
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d1f4      	bne.n	80045e0 <GPIO__enSetDriveByNumber+0x14>
        if(GPIO_enDRIVE_CAPABILITY_EXTENDED == enExtendedCapabilityReg)
 80045f6:	9b01      	ldr	r3, [sp, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d02f      	beq.n	800465c <GPIO__enSetDriveByNumber+0x90>
        else if(0UL != uxExtendedModeReg)
 80045fc:	bb5f      	cbnz	r7, 8004656 <GPIO__enSetDriveByNumber+0x8a>
        if(0UL != (1U & uxNormalDriveReg))
 80045fe:	07e1      	lsls	r1, r4, #31
 8004600:	d40b      	bmi.n	800461a <GPIO__enSetDriveByNumber+0x4e>
        if(0UL != (2U & uxNormalDriveReg))
 8004602:	07a2      	lsls	r2, r4, #30
 8004604:	d413      	bmi.n	800462e <GPIO__enSetDriveByNumber+0x62>
        if(0UL != (4U & uxNormalDriveReg))
 8004606:	0763      	lsls	r3, r4, #29
 8004608:	d41b      	bmi.n	8004642 <GPIO__enSetDriveByNumber+0x76>
        enErrorReg = GPIO__enSetSlewRateByNumber(enPortArg, enPinArg, (GPIO_nSTATE) uxSlewRateReg);
 800460a:	f3c4 2203 	ubfx	r2, r4, #8, #4
 800460e:	4629      	mov	r1, r5
 8004610:	4630      	mov	r0, r6
 8004612:	f000 f8cd 	bl	80047b0 <GPIO__enSetSlewRateByNumber>
}
 8004616:	b003      	add	sp, #12
 8004618:	bdf0      	pop	{r4, r5, r6, r7, pc}
            enErrorReg = GPIO__enSetNormalDriveByNumber(enPortArg, enPinArg, GPIO_enNORMAL_DRIVE_2mA, GPIO_enSTATE_ENA);
 800461a:	2301      	movs	r3, #1
 800461c:	2200      	movs	r2, #0
 800461e:	4629      	mov	r1, r5
 8004620:	4630      	mov	r0, r6
 8004622:	f000 f85f 	bl	80046e4 <GPIO__enSetNormalDriveByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8004626:	2800      	cmp	r0, #0
 8004628:	d1da      	bne.n	80045e0 <GPIO__enSetDriveByNumber+0x14>
        if(0UL != (2U & uxNormalDriveReg))
 800462a:	07a2      	lsls	r2, r4, #30
 800462c:	d5eb      	bpl.n	8004606 <GPIO__enSetDriveByNumber+0x3a>
            enErrorReg = GPIO__enSetNormalDriveByNumber(enPortArg, enPinArg, GPIO_enNORMAL_DRIVE_4mA, GPIO_enSTATE_ENA);
 800462e:	2301      	movs	r3, #1
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	461a      	mov	r2, r3
 8004636:	f000 f855 	bl	80046e4 <GPIO__enSetNormalDriveByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 800463a:	2800      	cmp	r0, #0
 800463c:	d1d0      	bne.n	80045e0 <GPIO__enSetDriveByNumber+0x14>
        if(0UL != (4U & uxNormalDriveReg))
 800463e:	0763      	lsls	r3, r4, #29
 8004640:	d5e3      	bpl.n	800460a <GPIO__enSetDriveByNumber+0x3e>
            enErrorReg = GPIO__enSetNormalDriveByNumber(enPortArg, enPinArg, GPIO_enNORMAL_DRIVE_8mA, GPIO_enSTATE_ENA);
 8004642:	2301      	movs	r3, #1
 8004644:	2202      	movs	r2, #2
 8004646:	4629      	mov	r1, r5
 8004648:	4630      	mov	r0, r6
 800464a:	f000 f84b 	bl	80046e4 <GPIO__enSetNormalDriveByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 800464e:	2800      	cmp	r0, #0
 8004650:	d0db      	beq.n	800460a <GPIO__enSetDriveByNumber+0x3e>
}
 8004652:	b003      	add	sp, #12
 8004654:	bdf0      	pop	{r4, r5, r6, r7, pc}
            enErrorReg = GPIO_enERROR_VALUE;
 8004656:	2002      	movs	r0, #2
}
 8004658:	b003      	add	sp, #12
 800465a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            enErrorReg = GPIO__enSetDriveModeByNumber(enPortArg, enPinArg, (GPIO_nDRIVE_MODE) uxExtendedModeReg);
 800465c:	463a      	mov	r2, r7
 800465e:	4629      	mov	r1, r5
 8004660:	4630      	mov	r0, r6
 8004662:	f000 f80b 	bl	800467c <GPIO__enSetDriveModeByNumber>
            if(GPIO_enERROR_OK == enErrorReg)
 8004666:	2800      	cmp	r0, #0
 8004668:	d1ba      	bne.n	80045e0 <GPIO__enSetDriveByNumber+0x14>
                enErrorReg = GPIO__enSetExtendedDriveByNumber(enPortArg, enPinArg, (GPIO_nSTATE) uxExtendedDriveReg);
 800466a:	f3c4 1203 	ubfx	r2, r4, #4, #4
 800466e:	4629      	mov	r1, r5
 8004670:	4630      	mov	r0, r6
 8004672:	f000 f81d 	bl	80046b0 <GPIO__enSetExtendedDriveByNumber>
    if(GPIO_enERROR_OK == enErrorReg)
 8004676:	2800      	cmp	r0, #0
 8004678:	d0c1      	beq.n	80045fe <GPIO__enSetDriveByNumber+0x32>
 800467a:	e7b1      	b.n	80045e0 <GPIO__enSetDriveByNumber+0x14>

0800467c <GPIO__enSetDriveModeByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetDriveModeByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                         GPIO_nDRIVE_MODE enModeArg)
{
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	b084      	sub	sp, #16
 8004682:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004684:	2108      	movs	r1, #8
 8004686:	4620      	mov	r0, r4
{
 8004688:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 800468a:	f7fc ff65 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 800468e:	b108      	cbz	r0, 8004694 <GPIO__enSetDriveModeByNumber+0x18>
        stRegister.uxValue = (UBase_t) enModeArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 8004690:	b004      	add	sp, #16
 8004692:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_PC_PIN0_MASK;
 8004694:	2203      	movs	r2, #3
        stRegister.uptrAddress = GPIO_PC_OFFSET;
 8004696:	f640 73c4 	movw	r3, #4036	; 0xfc4
        stRegister.uxShift *= (GPIO_PC_R_PIN1_BIT - GPIO_PC_R_PIN0_BIT);
 800469a:	0064      	lsls	r4, r4, #1
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 800469c:	4669      	mov	r1, sp
 800469e:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_PC_OFFSET;
 80046a0:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enModeArg;
 80046a2:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_PC_PIN0_MASK;
 80046a4:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80046a8:	f7ff ff5e 	bl	8004568 <GPIO__enWriteRegister>
}
 80046ac:	b004      	add	sp, #16
 80046ae:	bd70      	pop	{r4, r5, r6, pc}

080046b0 <GPIO__enSetExtendedDriveByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetExtendedDriveByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                             GPIO_nSTATE enStateArg)
{
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	460c      	mov	r4, r1
 80046b4:	b084      	sub	sp, #16
 80046b6:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80046b8:	2108      	movs	r1, #8
 80046ba:	4620      	mov	r0, r4
{
 80046bc:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80046be:	f7fc ff4b 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 80046c2:	b108      	cbz	r0, 80046c8 <GPIO__enSetExtendedDriveByNumber+0x18>
        stRegister.uxValue = (UBase_t) enStateArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 80046c4:	b004      	add	sp, #16
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_DR12R_PIN0_MASK;
 80046c8:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_DR12R_OFFSET;
 80046ca:	f240 533c 	movw	r3, #1340	; 0x53c
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80046ce:	4669      	mov	r1, sp
 80046d0:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_DR12R_OFFSET;
 80046d2:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 80046d4:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_DR12R_PIN0_MASK;
 80046d6:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80046da:	f7ff ff45 	bl	8004568 <GPIO__enWriteRegister>
}
 80046de:	b004      	add	sp, #16
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	bf00      	nop

080046e4 <GPIO__enSetNormalDriveByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetNormalDriveByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                           GPIO_nNORMAL_DRIVE enDriveArg, GPIO_nSTATE enStateArg)
{
 80046e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	b085      	sub	sp, #20
 80046ea:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80046ec:	2108      	movs	r1, #8
 80046ee:	4620      	mov	r0, r4
{
 80046f0:	4617      	mov	r7, r2
 80046f2:	461d      	mov	r5, r3
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80046f4:	f7fc ff30 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 80046f8:	b108      	cbz	r0, 80046fe <GPIO__enSetNormalDriveByNumber+0x1a>
        stRegister.uxValue = (UBase_t) enStateArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 80046fa:	b005      	add	sp, #20
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enDriveArg, (UBase_t) GPIO_enNORMAL_DRIVE_MAX);
 80046fe:	2103      	movs	r1, #3
 8004700:	4638      	mov	r0, r7
 8004702:	f7fc ff29 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004706:	2800      	cmp	r0, #0
 8004708:	d1f7      	bne.n	80046fa <GPIO__enSetNormalDriveByNumber+0x16>
        stRegister.uptrAddress = GPIO_uptrDriveOffset[(uintptr_t) enDriveArg];
 800470a:	4b07      	ldr	r3, [pc, #28]	; (8004728 <GPIO__enSetNormalDriveByNumber+0x44>)
        stRegister.uxMask = GPIO_DR2R_PIN0_MASK;
 800470c:	2201      	movs	r2, #1
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 800470e:	4669      	mov	r1, sp
 8004710:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_uptrDriveOffset[(uintptr_t) enDriveArg];
 8004712:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004716:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_DR2R_PIN0_MASK;
 8004718:	9201      	str	r2, [sp, #4]
        stRegister.uptrAddress = GPIO_uptrDriveOffset[(uintptr_t) enDriveArg];
 800471a:	e9cd 4302 	strd	r4, r3, [sp, #8]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 800471e:	f7ff ff23 	bl	8004568 <GPIO__enWriteRegister>
}
 8004722:	b005      	add	sp, #20
 8004724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004726:	bf00      	nop
 8004728:	08007f64 	.word	0x08007f64

0800472c <GPIO__enSetOutputModeByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetOutputModeByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                          GPIO_nOUTMODE enStateArg)
{
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	460c      	mov	r4, r1
 8004730:	b084      	sub	sp, #16
 8004732:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004734:	2108      	movs	r1, #8
 8004736:	4620      	mov	r0, r4
{
 8004738:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 800473a:	f7fc ff0d 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 800473e:	b108      	cbz	r0, 8004744 <GPIO__enSetOutputModeByNumber+0x18>
        stRegister.uxValue = (UBase_t) enStateArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 8004740:	b004      	add	sp, #16
 8004742:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_ODR_PIN0_MASK;
 8004744:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_ODR_OFFSET;
 8004746:	f240 530c 	movw	r3, #1292	; 0x50c
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 800474a:	4669      	mov	r1, sp
 800474c:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_ODR_OFFSET;
 800474e:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004750:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_ODR_PIN0_MASK;
 8004752:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004756:	f7ff ff07 	bl	8004568 <GPIO__enWriteRegister>
}
 800475a:	b004      	add	sp, #16
 800475c:	bd70      	pop	{r4, r5, r6, pc}
 800475e:	bf00      	nop

08004760 <GPIO__enSetResistorModeByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetResistorModeByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                             GPIO_nRESMODE enModeArg)
{
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	460d      	mov	r5, r1
 8004764:	4606      	mov	r6, r0
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004766:	2108      	movs	r1, #8
{
 8004768:	4614      	mov	r4, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 800476a:	4628      	mov	r0, r5
 800476c:	f7fc fef4 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004770:	b928      	cbnz	r0, 800477e <GPIO__enSetResistorModeByNumber+0x1e>
    {
        switch(enModeArg)
 8004772:	2c01      	cmp	r4, #1
 8004774:	d016      	beq.n	80047a4 <GPIO__enSetResistorModeByNumber+0x44>
 8004776:	2c02      	cmp	r4, #2
 8004778:	d002      	beq.n	8004780 <GPIO__enSetResistorModeByNumber+0x20>
 800477a:	b13c      	cbz	r4, 800478c <GPIO__enSetResistorModeByNumber+0x2c>
 800477c:	2002      	movs	r0, #2
                enErrorReg = GPIO_enERROR_VALUE;
                break;
        }
    }
    return (enErrorReg);
}
 800477e:	bd70      	pop	{r4, r5, r6, pc}
                enErrorReg = GPIO__enEnablePullDownResistorByNumber(enPortArg, enPinArg);
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
}
 8004784:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                enErrorReg = GPIO__enEnablePullDownResistorByNumber(enPortArg, enPinArg);
 8004788:	f000 bafe 	b.w	8004d88 <GPIO__enEnablePullDownResistorByNumber>
                enErrorReg = GPIO__enDisablePullUpResistorByNumber(enPortArg, enPinArg);
 800478c:	4629      	mov	r1, r5
 800478e:	4630      	mov	r0, r6
 8004790:	f000 fb48 	bl	8004e24 <GPIO__enDisablePullUpResistorByNumber>
                if(GPIO_enERROR_OK == enErrorReg)
 8004794:	2800      	cmp	r0, #0
 8004796:	d1f2      	bne.n	800477e <GPIO__enSetResistorModeByNumber+0x1e>
                    enErrorReg = GPIO__enDisablePullDownResistorByNumber(enPortArg, enPinArg);
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
}
 800479c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    enErrorReg = GPIO__enDisablePullDownResistorByNumber(enPortArg, enPinArg);
 80047a0:	f000 bb0c 	b.w	8004dbc <GPIO__enDisablePullDownResistorByNumber>
                enErrorReg = GPIO__enEnablePullUpResistorByNumber(enPortArg, enPinArg);
 80047a4:	4629      	mov	r1, r5
 80047a6:	4630      	mov	r0, r6
}
 80047a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                enErrorReg = GPIO__enEnablePullUpResistorByNumber(enPortArg, enPinArg);
 80047ac:	f000 bb20 	b.w	8004df0 <GPIO__enEnablePullUpResistorByNumber>

080047b0 <GPIO__enSetSlewRateByNumber>:
    return (enErrorReg);
}

GPIO_nERROR GPIO__enSetSlewRateByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg,
                                           GPIO_nSTATE enStateArg)
{
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	b084      	sub	sp, #16
 80047b6:	4606      	mov	r6, r0
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80047b8:	2108      	movs	r1, #8
 80047ba:	4620      	mov	r0, r4
{
 80047bc:	4615      	mov	r5, r2
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 80047be:	f7fc fecb 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 80047c2:	b108      	cbz	r0, 80047c8 <GPIO__enSetSlewRateByNumber+0x18>
        stRegister.uxValue = (UBase_t) enStateArg;
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
    }

    return (enErrorReg);
}
 80047c4:	b004      	add	sp, #16
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxMask = GPIO_SLR_PIN0_MASK;
 80047c8:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_SLR_OFFSET;
 80047ca:	f44f 63a3 	mov.w	r3, #1304	; 0x518
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80047ce:	4669      	mov	r1, sp
 80047d0:	4630      	mov	r0, r6
        stRegister.uptrAddress = GPIO_SLR_OFFSET;
 80047d2:	9303      	str	r3, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 80047d4:	9500      	str	r5, [sp, #0]
        stRegister.uxMask = GPIO_SLR_PIN0_MASK;
 80047d6:	e9cd 2401 	strd	r2, r4, [sp, #4]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 80047da:	f7ff fec5 	bl	8004568 <GPIO__enWriteRegister>
}
 80047de:	b004      	add	sp, #16
 80047e0:	bd70      	pop	{r4, r5, r6, pc}
 80047e2:	bf00      	nop

080047e4 <GPIO__uptrBlockBaseAddress>:
 * 9 jul. 2021     InDeviceMex    1.0         initial Version@endverbatim
 */
#include <xDriver_MCU/GPIO/Peripheral/Register/RegisterPeripheral/GPIO_RegisterPeripheral.h>

uintptr_t GPIO__uptrBlockBaseAddress(GPIO_nPORT enPortArg)
{
 80047e4:	b510      	push	{r4, lr}
 80047e6:	b090      	sub	sp, #64	; 0x40
    const uintptr_t GPIO_BLOCK_BASE[(UBase_t) GPIO_enPORT_MAX] =
 80047e8:	4c0b      	ldr	r4, [pc, #44]	; (8004818 <GPIO__uptrBlockBaseAddress+0x34>)
     GPIOA_BASE, GPIOB_BASE, GPIOC_BASE, GPIOD_BASE,
     GPIOE_BASE, GPIOF_BASE, GPIOG_BASE, GPIOH_BASE,
     GPIOJ_BASE, GPIOK_BASE, GPIOL_BASE, GPIOM_BASE,
     GPION_BASE, GPIOP_BASE, GPIOQ_BASE
    };
    return (GPIO_BLOCK_BASE[(UBase_t) enPortArg]);
 80047ea:	ab10      	add	r3, sp, #64	; 0x40
    const uintptr_t GPIO_BLOCK_BASE[(UBase_t) GPIO_enPORT_MAX] =
 80047ec:	f10d 0c04 	add.w	ip, sp, #4
    return (GPIO_BLOCK_BASE[(UBase_t) enPortArg]);
 80047f0:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
    const uintptr_t GPIO_BLOCK_BASE[(UBase_t) GPIO_enPORT_MAX] =
 80047f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80047fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004802:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004806:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800480a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 800480e:	f85e 0c3c 	ldr.w	r0, [lr, #-60]
 8004812:	b010      	add	sp, #64	; 0x40
 8004814:	bd10      	pop	{r4, pc}
 8004816:	bf00      	nop
 8004818:	080073a0 	.word	0x080073a0

0800481c <SYSCTL__enSetReadyOnRunMode>:
#include <xDriver_MCU/SYSCTL/App/xHeader/SYSCTL_Ready.h>

#include <xDriver_MCU/SYSCTL/Driver/SYSCTL_Driver.h>

SYSCTL_nERROR SYSCTL__enSetReadyOnRunMode(SYSCTL_nMODULE enModuleArg, SYSCTL_nPERIPHERAL enPeripheralArg)
{
 800481c:	b530      	push	{r4, r5, lr}
 800481e:	b083      	sub	sp, #12
    SYSCTL_nERROR enErrorReg;
    SYSCTL_nBOOLEAN enReady;
    enReady = SYSCTL_enFALSE;
 8004820:	2300      	movs	r3, #0
{
 8004822:	4604      	mov	r4, r0
 8004824:	460d      	mov	r5, r1
    enErrorReg = SYSCTL__enIsPeripheralReady(enModuleArg, enPeripheralArg, &enReady);
 8004826:	aa01      	add	r2, sp, #4
    enReady = SYSCTL_enFALSE;
 8004828:	9301      	str	r3, [sp, #4]
    enErrorReg = SYSCTL__enIsPeripheralReady(enModuleArg, enPeripheralArg, &enReady);
 800482a:	f000 f95b 	bl	8004ae4 <SYSCTL__enIsPeripheralReady>
    if(SYSCTL_enERROR_OK == enErrorReg)
 800482e:	b908      	cbnz	r0, 8004834 <SYSCTL__enSetReadyOnRunMode+0x18>
    {
        if(SYSCTL_enFALSE == enReady)
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	b10b      	cbz	r3, 8004838 <SYSCTL__enSetReadyOnRunMode+0x1c>
                enErrorReg = SYSCTL__enSetPeripheralReset(enModuleArg, enPeripheralArg);
            }
        }
    }
    return (enErrorReg);
}
 8004834:	b003      	add	sp, #12
 8004836:	bd30      	pop	{r4, r5, pc}
            enErrorReg = SYSCTL__enEnableRunMode(enModuleArg, enPeripheralArg);
 8004838:	4629      	mov	r1, r5
 800483a:	4620      	mov	r0, r4
 800483c:	f7fe f9c8 	bl	8002bd0 <SYSCTL__enEnableRunMode>
            if(SYSCTL_enERROR_OK == enErrorReg)
 8004840:	2800      	cmp	r0, #0
 8004842:	d1f7      	bne.n	8004834 <SYSCTL__enSetReadyOnRunMode+0x18>
                enErrorReg = SYSCTL__enSetPeripheralReset(enModuleArg, enPeripheralArg);
 8004844:	4629      	mov	r1, r5
 8004846:	4620      	mov	r0, r4
 8004848:	f000 f95e 	bl	8004b08 <SYSCTL__enSetPeripheralReset>
    return (enErrorReg);
 800484c:	e7f2      	b.n	8004834 <SYSCTL__enSetReadyOnRunMode+0x18>
 800484e:	bf00      	nop

08004850 <SYSCTL__enReadRegister>:
SYSCTL_nERROR SYSCTL__enReadRegister(SYSCTL_nMODULE enModuleArg, SYSCTL_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    SYSCTL_nERROR enErrorReg;
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004850:	b199      	cbz	r1, 800487a <SYSCTL__enReadRegister+0x2a>
{
 8004852:	b538      	push	{r3, r4, r5, lr}
 8004854:	460c      	mov	r4, r1
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        enErrorReg = (SYSCTL_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SYSCTL_enMODULE_MAX);
 8004856:	2101      	movs	r1, #1
 8004858:	4605      	mov	r5, r0
 800485a:	f7fc fe7d 	bl	8001558 <MCU__enCheckParams>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 800485e:	b958      	cbnz	r0, 8004878 <SYSCTL__enReadRegister+0x28>
    {
        uptrModuleBase = SYSCTL__uptrBlockBaseAddress(enModuleArg);
 8004860:	4628      	mov	r0, r5
 8004862:	f000 f977 	bl	8004b54 <SYSCTL__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8004866:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = SYSCTL__uptrBlockBaseAddress(enModuleArg);
 8004868:	4602      	mov	r2, r0
        enErrorReg = (SYSCTL_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 800486a:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 800486c:	4413      	add	r3, r2
 800486e:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
 8004870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (SYSCTL_nERROR) MCU__enReadRegister(pstRegisterDataArg);
 8004874:	f7fc be76 	b.w	8001564 <MCU__enReadRegister>
}
 8004878:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 800487a:	2001      	movs	r0, #1
}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <SYSCTL__enWriteRegister>:
SYSCTL_nERROR SYSCTL__enWriteRegister(SYSCTL_nMODULE enModuleArg, SYSCTL_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    SYSCTL_nERROR enErrorReg;
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004880:	b199      	cbz	r1, 80048aa <SYSCTL__enWriteRegister+0x2a>
{
 8004882:	b538      	push	{r3, r4, r5, lr}
 8004884:	460c      	mov	r4, r1
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        enErrorReg = (SYSCTL_nERROR) MCU__enCheckParams((UBase_t) enModuleArg, (UBase_t) SYSCTL_enMODULE_MAX);
 8004886:	2101      	movs	r1, #1
 8004888:	4605      	mov	r5, r0
 800488a:	f7fc fe65 	bl	8001558 <MCU__enCheckParams>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 800488e:	b958      	cbnz	r0, 80048a8 <SYSCTL__enWriteRegister+0x28>
    {
        uptrModuleBase = SYSCTL__uptrBlockBaseAddress(enModuleArg);
 8004890:	4628      	mov	r0, r5
 8004892:	f000 f95f 	bl	8004b54 <SYSCTL__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 8004896:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = SYSCTL__uptrBlockBaseAddress(enModuleArg);
 8004898:	4602      	mov	r2, r0
        enErrorReg = (SYSCTL_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 800489a:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
 800489c:	4413      	add	r3, r2
 800489e:	60e3      	str	r3, [r4, #12]
    }

    return (enErrorReg);
}
 80048a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (SYSCTL_nERROR) MCU__enWriteRegister(pstRegisterDataArg);
 80048a4:	f7fd b9d4 	b.w	8001c50 <MCU__enWriteRegister>
}
 80048a8:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 80048aa:	2001      	movs	r0, #1
}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop

080048b0 <SYSCTL__enGetAlternateClockSource>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penSourceArg)
 80048b0:	b189      	cbz	r1, 80048d6 <SYSCTL__enGetAlternateClockSource+0x26>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = ALTCLK_CFG_R_ALTCLK_BIT;
        stRegister.uxMask = ALTCLK_CFG_ALTCLK_MASK;
 80048b2:	220f      	movs	r2, #15
        stRegister.uptrAddress = ALTCLK_CFG_OFFSET;
 80048b4:	f44f 739c 	mov.w	r3, #312	; 0x138
{
 80048b8:	b510      	push	{r4, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	b084      	sub	sp, #16
        stRegister.uxShift = ALTCLK_CFG_R_ALTCLK_BIT;
 80048be:	2100      	movs	r1, #0
        stRegister.uptrAddress = ALTCLK_CFG_OFFSET;
 80048c0:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = ALTCLK_CFG_ALTCLK_MASK;
 80048c2:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 80048c6:	4669      	mov	r1, sp
 80048c8:	f7ff ffc2 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 80048cc:	b908      	cbnz	r0, 80048d2 <SYSCTL__enGetAlternateClockSource+0x22>
    {
        *penSourceArg = (SYSCTL_nALTCLK_SRC) stRegister.uxValue;
 80048ce:	9b00      	ldr	r3, [sp, #0]
 80048d0:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 80048d2:	b004      	add	sp, #16
 80048d4:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 80048d6:	2001      	movs	r0, #1
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <SYSCTL__enGetSystemClockSource>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penSourceArg)
 80048dc:	b181      	cbz	r1, 8004900 <SYSCTL__enGetSystemClockSource+0x24>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = RSCLK_CFG_R_USEPLL_BIT;
        stRegister.uxMask = RSCLK_CFG_USEPLL_MASK;
 80048de:	2201      	movs	r2, #1
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 80048e0:	23b0      	movs	r3, #176	; 0xb0
{
 80048e2:	b510      	push	{r4, lr}
 80048e4:	460c      	mov	r4, r1
 80048e6:	b084      	sub	sp, #16
        stRegister.uxShift = RSCLK_CFG_R_USEPLL_BIT;
 80048e8:	211c      	movs	r1, #28
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 80048ea:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = RSCLK_CFG_USEPLL_MASK;
 80048ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 80048f0:	4669      	mov	r1, sp
 80048f2:	f7ff ffad 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 80048f6:	b908      	cbnz	r0, 80048fc <SYSCTL__enGetSystemClockSource+0x20>
    {
        *penSourceArg = (SYSCTL_nSYSCLK_SRC) stRegister.uxValue;
 80048f8:	9b00      	ldr	r3, [sp, #0]
 80048fa:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 80048fc:	b004      	add	sp, #16
 80048fe:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004900:	2001      	movs	r0, #1
}
 8004902:	4770      	bx	lr

08004904 <SYSCTL__enGetPLLClockSource>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penSourceArg)
 8004904:	b181      	cbz	r1, 8004928 <SYSCTL__enGetPLLClockSource+0x24>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = RSCLK_CFG_R_PLL_SRC_BIT;
        stRegister.uxMask = RSCLK_CFG_PLL_SRC_MASK;
 8004906:	220f      	movs	r2, #15
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004908:	23b0      	movs	r3, #176	; 0xb0
{
 800490a:	b510      	push	{r4, lr}
 800490c:	460c      	mov	r4, r1
 800490e:	b084      	sub	sp, #16
        stRegister.uxShift = RSCLK_CFG_R_PLL_SRC_BIT;
 8004910:	2118      	movs	r1, #24
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004912:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = RSCLK_CFG_PLL_SRC_MASK;
 8004914:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004918:	4669      	mov	r1, sp
 800491a:	f7ff ff99 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 800491e:	b908      	cbnz	r0, 8004924 <SYSCTL__enGetPLLClockSource+0x20>
    {
        *penSourceArg = (SYSCTL_nOSCCLK_SRC) stRegister.uxValue;
 8004920:	9b00      	ldr	r3, [sp, #0]
 8004922:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004924:	b004      	add	sp, #16
 8004926:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004928:	2001      	movs	r0, #1
}
 800492a:	4770      	bx	lr

0800492c <SYSCTL__enGetOscillatorClockSource>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penSourceArg)
 800492c:	b181      	cbz	r1, 8004950 <SYSCTL__enGetOscillatorClockSource+0x24>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = RSCLK_CFG_R_OSC_SRC_BIT;
        stRegister.uxMask = RSCLK_CFG_OSC_SRC_MASK;
 800492e:	220f      	movs	r2, #15
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004930:	23b0      	movs	r3, #176	; 0xb0
{
 8004932:	b510      	push	{r4, lr}
 8004934:	460c      	mov	r4, r1
 8004936:	b084      	sub	sp, #16
        stRegister.uxShift = RSCLK_CFG_R_OSC_SRC_BIT;
 8004938:	2114      	movs	r1, #20
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 800493a:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = RSCLK_CFG_OSC_SRC_MASK;
 800493c:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004940:	4669      	mov	r1, sp
 8004942:	f7ff ff85 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004946:	b908      	cbnz	r0, 800494c <SYSCTL__enGetOscillatorClockSource+0x20>
    {
        *penSourceArg = (SYSCTL_nOSCCLK_SRC) stRegister.uxValue;
 8004948:	9b00      	ldr	r3, [sp, #0]
 800494a:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 800494c:	b004      	add	sp, #16
 800494e:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004950:	2001      	movs	r0, #1
}
 8004952:	4770      	bx	lr

08004954 <SYSCTL__enGetOscillatorClockDivisor>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxDivisorArg)
 8004954:	b189      	cbz	r1, 800497a <SYSCTL__enGetOscillatorClockDivisor+0x26>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = RSCLK_CFG_R_OSC_SYSDIV_BIT;
        stRegister.uxMask = RSCLK_CFG_OSC_SYSDIV_MASK;
 8004956:	f240 32ff 	movw	r2, #1023	; 0x3ff
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 800495a:	23b0      	movs	r3, #176	; 0xb0
{
 800495c:	b510      	push	{r4, lr}
 800495e:	460c      	mov	r4, r1
 8004960:	b084      	sub	sp, #16
        stRegister.uxShift = RSCLK_CFG_R_OSC_SYSDIV_BIT;
 8004962:	210a      	movs	r1, #10
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004964:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = RSCLK_CFG_OSC_SYSDIV_MASK;
 8004966:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 800496a:	4669      	mov	r1, sp
 800496c:	f7ff ff70 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004970:	b908      	cbnz	r0, 8004976 <SYSCTL__enGetOscillatorClockDivisor+0x22>
    {
        *puxDivisorArg = (UBase_t) stRegister.uxValue;
 8004972:	9b00      	ldr	r3, [sp, #0]
 8004974:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004976:	b004      	add	sp, #16
 8004978:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 800497a:	2001      	movs	r0, #1
}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop

08004980 <SYSCTL__enGetPLLClockDivisor>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxDivisorArg)
 8004980:	b189      	cbz	r1, 80049a6 <SYSCTL__enGetPLLClockDivisor+0x26>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = RSCLK_CFG_R_PLL_SYSDIV_BIT;
        stRegister.uxMask = RSCLK_CFG_PLL_SYSDIV_MASK;
 8004982:	f240 32ff 	movw	r2, #1023	; 0x3ff
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004986:	23b0      	movs	r3, #176	; 0xb0
{
 8004988:	b510      	push	{r4, lr}
 800498a:	460c      	mov	r4, r1
 800498c:	b084      	sub	sp, #16
        stRegister.uxShift = RSCLK_CFG_R_PLL_SYSDIV_BIT;
 800498e:	2100      	movs	r1, #0
        stRegister.uptrAddress = RSCLK_CFG_OFFSET;
 8004990:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = RSCLK_CFG_PLL_SYSDIV_MASK;
 8004992:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004996:	4669      	mov	r1, sp
 8004998:	f7ff ff5a 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 800499c:	b908      	cbnz	r0, 80049a2 <SYSCTL__enGetPLLClockDivisor+0x22>
    {
        *puxDivisorArg = (UBase_t) stRegister.uxValue;
 800499e:	9b00      	ldr	r3, [sp, #0]
 80049a0:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 80049a2:	b004      	add	sp, #16
 80049a4:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 80049a6:	2001      	movs	r0, #1
}
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop

080049ac <SYSCTL__enGetMOSCState>:
    SYSCTL_Register_t stRegister;
    SYSCTL_nSTATE enStateReg;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
 80049ac:	b199      	cbz	r1, 80049d6 <SYSCTL__enGetMOSCState+0x2a>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = MOSC_CTL_R_NOXTAL_BIT;
        stRegister.uxMask = MOSC_CTL_NOXTAL_MASK;
 80049ae:	2201      	movs	r2, #1
        stRegister.uptrAddress = MOSC_CTL_OFFSET;
 80049b0:	237c      	movs	r3, #124	; 0x7c
{
 80049b2:	b510      	push	{r4, lr}
 80049b4:	460c      	mov	r4, r1
 80049b6:	b084      	sub	sp, #16
        stRegister.uxShift = MOSC_CTL_R_NOXTAL_BIT;
 80049b8:	2102      	movs	r1, #2
        stRegister.uptrAddress = MOSC_CTL_OFFSET;
 80049ba:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = MOSC_CTL_NOXTAL_MASK;
 80049bc:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 80049c0:	4669      	mov	r1, sp
 80049c2:	f7ff ff45 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 80049c6:	b920      	cbnz	r0, 80049d2 <SYSCTL__enGetMOSCState+0x26>
    {
        if(MOSC_CTL_NOXTAL_CONNECTED == stRegister.uxValue)
 80049c8:	9b00      	ldr	r3, [sp, #0]
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	095b      	lsrs	r3, r3, #5
        }
        else
        {
            enStateReg = SYSCTL_enSTATE_DIS;
        }
        *penStateArg = enStateReg;
 80049d0:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 80049d2:	b004      	add	sp, #16
 80049d4:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 80049d6:	2001      	movs	r0, #1
}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <SYSCTL__enGetPLLClockIntegerValue_M>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxValueArg)
 80049dc:	b191      	cbz	r1, 8004a04 <SYSCTL__enGetPLLClockIntegerValue_M+0x28>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = PLL_FREQ0_R_PLL_M_INT_BIT;
        stRegister.uxMask = PLL_FREQ0_PLL_M_INT_MASK;
 80049de:	f240 32ff 	movw	r2, #1023	; 0x3ff
        stRegister.uptrAddress = PLL_FREQ0_OFFSET;
 80049e2:	f44f 73b0 	mov.w	r3, #352	; 0x160
{
 80049e6:	b510      	push	{r4, lr}
 80049e8:	460c      	mov	r4, r1
 80049ea:	b084      	sub	sp, #16
        stRegister.uxShift = PLL_FREQ0_R_PLL_M_INT_BIT;
 80049ec:	2100      	movs	r1, #0
        stRegister.uptrAddress = PLL_FREQ0_OFFSET;
 80049ee:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = PLL_FREQ0_PLL_M_INT_MASK;
 80049f0:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 80049f4:	4669      	mov	r1, sp
 80049f6:	f7ff ff2b 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 80049fa:	b908      	cbnz	r0, 8004a00 <SYSCTL__enGetPLLClockIntegerValue_M+0x24>
    {
        *puxValueArg = (UBase_t) stRegister.uxValue;
 80049fc:	9b00      	ldr	r3, [sp, #0]
 80049fe:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004a00:	b004      	add	sp, #16
 8004a02:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004a04:	2001      	movs	r0, #1
}
 8004a06:	4770      	bx	lr

08004a08 <SYSCTL__enGetPLLClockFractionalValue_M>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxValueArg)
 8004a08:	b191      	cbz	r1, 8004a30 <SYSCTL__enGetPLLClockFractionalValue_M+0x28>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = PLL_FREQ0_R_PLL_M_FRAC_BIT;
        stRegister.uxMask = PLL_FREQ0_PLL_M_FRAC_MASK;
 8004a0a:	f240 32ff 	movw	r2, #1023	; 0x3ff
        stRegister.uptrAddress = PLL_FREQ0_OFFSET;
 8004a0e:	f44f 73b0 	mov.w	r3, #352	; 0x160
{
 8004a12:	b510      	push	{r4, lr}
 8004a14:	460c      	mov	r4, r1
 8004a16:	b084      	sub	sp, #16
        stRegister.uxShift = PLL_FREQ0_R_PLL_M_FRAC_BIT;
 8004a18:	210a      	movs	r1, #10
        stRegister.uptrAddress = PLL_FREQ0_OFFSET;
 8004a1a:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = PLL_FREQ0_PLL_M_FRAC_MASK;
 8004a1c:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004a20:	4669      	mov	r1, sp
 8004a22:	f7ff ff15 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004a26:	b908      	cbnz	r0, 8004a2c <SYSCTL__enGetPLLClockFractionalValue_M+0x24>
    {
        *puxValueArg = (UBase_t) stRegister.uxValue;
 8004a28:	9b00      	ldr	r3, [sp, #0]
 8004a2a:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004a2c:	b004      	add	sp, #16
 8004a2e:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004a30:	2001      	movs	r0, #1
}
 8004a32:	4770      	bx	lr

08004a34 <SYSCTL__enGetPLLClockValue_Q>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxValueArg)
 8004a34:	b189      	cbz	r1, 8004a5a <SYSCTL__enGetPLLClockValue_Q+0x26>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = PLL_FREQ1_R_PLL_Q_VALUE_BIT;
        stRegister.uxMask = PLL_FREQ1_PLL_Q_VALUE_MASK;
 8004a36:	221f      	movs	r2, #31
        stRegister.uptrAddress = PLL_FREQ1_OFFSET;
 8004a38:	f44f 73b2 	mov.w	r3, #356	; 0x164
{
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	460c      	mov	r4, r1
 8004a40:	b084      	sub	sp, #16
        stRegister.uxShift = PLL_FREQ1_R_PLL_Q_VALUE_BIT;
 8004a42:	2108      	movs	r1, #8
        stRegister.uptrAddress = PLL_FREQ1_OFFSET;
 8004a44:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = PLL_FREQ1_PLL_Q_VALUE_MASK;
 8004a46:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004a4a:	4669      	mov	r1, sp
 8004a4c:	f7ff ff00 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004a50:	b908      	cbnz	r0, 8004a56 <SYSCTL__enGetPLLClockValue_Q+0x22>
    {
        *puxValueArg = (UBase_t) stRegister.uxValue;
 8004a52:	9b00      	ldr	r3, [sp, #0]
 8004a54:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004a56:	b004      	add	sp, #16
 8004a58:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004a5a:	2001      	movs	r0, #1
}
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop

08004a60 <SYSCTL__enGetPLLClockValue_N>:
{
    SYSCTL_Register_t stRegister;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) puxValueArg)
 8004a60:	b189      	cbz	r1, 8004a86 <SYSCTL__enGetPLLClockValue_N+0x26>
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = PLL_FREQ1_R_PLL_N_VALUE_BIT;
        stRegister.uxMask = PLL_FREQ1_PLL_N_VALUE_MASK;
 8004a62:	221f      	movs	r2, #31
        stRegister.uptrAddress = PLL_FREQ1_OFFSET;
 8004a64:	f44f 73b2 	mov.w	r3, #356	; 0x164
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	460c      	mov	r4, r1
 8004a6c:	b084      	sub	sp, #16
        stRegister.uxShift = PLL_FREQ1_R_PLL_N_VALUE_BIT;
 8004a6e:	2100      	movs	r1, #0
        stRegister.uptrAddress = PLL_FREQ1_OFFSET;
 8004a70:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = PLL_FREQ1_PLL_N_VALUE_MASK;
 8004a72:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, &stRegister);
 8004a76:	4669      	mov	r1, sp
 8004a78:	f7ff feea 	bl	8004850 <SYSCTL__enReadRegister>
    }
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004a7c:	b908      	cbnz	r0, 8004a82 <SYSCTL__enGetPLLClockValue_N+0x22>
    {
        *puxValueArg = (UBase_t) stRegister.uxValue;
 8004a7e:	9b00      	ldr	r3, [sp, #0]
 8004a80:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004a82:	b004      	add	sp, #16
 8004a84:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004a86:	2001      	movs	r0, #1
}
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop

08004a8c <SYSCTL__enWritePeripheral>:
    UBase_t uxBitNumber;
    UBase_t uxPeripheralIndex;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004a8c:	b1a2      	cbz	r2, 8004ab8 <SYSCTL__enWritePeripheral+0x2c>


        uxBitNumber = (UBase_t) enPeripheralArg;
        uxBitNumber &= 0xFFUL;

        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004a8e:	68d3      	ldr	r3, [r2, #12]
{
 8004a90:	b510      	push	{r4, lr}
        uxPeripheralIndex &= 0xFFUL;
 8004a92:	f3c1 2407 	ubfx	r4, r1, #8, #8
        uxBitNumber &= 0xFFUL;
 8004a96:	b2c9      	uxtb	r1, r1
        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004a98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        pstRegisterDataArg->uxShift = (UBase_t) uxBitNumber;
        pstRegisterDataArg->uxMask = 1UL;
 8004a9c:	2401      	movs	r4, #1
        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004a9e:	e9c2 1302 	strd	r1, r3, [r2, #8]
        pstRegisterDataArg->uxMask = 1UL;
 8004aa2:	6054      	str	r4, [r2, #4]
        enErrorReg = SYSCTL__enWriteRegister(enModuleArg, pstRegisterDataArg);
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f7ff feeb 	bl	8004880 <SYSCTL__enWriteRegister>
    }
    if(SYSCTL_enERROR_OK ==  enErrorReg)
 8004aaa:	b920      	cbnz	r0, 8004ab6 <SYSCTL__enWritePeripheral+0x2a>
    {
        MCU__vNoOperation();
 8004aac:	bf00      	nop
        MCU__vNoOperation();
 8004aae:	bf00      	nop
        MCU__vNoOperation();
 8004ab0:	bf00      	nop
        MCU__vNoOperation();
 8004ab2:	bf00      	nop
        MCU__vNoOperation();
 8004ab4:	bf00      	nop
    }

    return (enErrorReg);
}
 8004ab6:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004ab8:	2001      	movs	r0, #1
}
 8004aba:	4770      	bx	lr

08004abc <SYSCTL__enReadPeripheral>:
    UBase_t uxBitNumber;
    UBase_t uxPeripheralIndex;
    SYSCTL_nERROR enErrorReg;

    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
 8004abc:	b17a      	cbz	r2, 8004ade <SYSCTL__enReadPeripheral+0x22>


        uxBitNumber = (UBase_t) enPeripheralArg;
        uxBitNumber &= 0xFFUL;

        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004abe:	68d3      	ldr	r3, [r2, #12]
{
 8004ac0:	b410      	push	{r4}
        uxPeripheralIndex &= 0xFFUL;
 8004ac2:	f3c1 2407 	ubfx	r4, r1, #8, #8
        uxBitNumber &= 0xFFUL;
 8004ac6:	b2c9      	uxtb	r1, r1
        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004ac8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
        pstRegisterDataArg->uxShift = (UBase_t) uxBitNumber;
        pstRegisterDataArg->uxMask = 1UL;
 8004acc:	2401      	movs	r4, #1
        pstRegisterDataArg->uptrAddress += uxPeripheralIndex;
 8004ace:	e9c2 1302 	strd	r1, r3, [r2, #8]
        pstRegisterDataArg->uxMask = 1UL;
 8004ad2:	6054      	str	r4, [r2, #4]
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, pstRegisterDataArg);
 8004ad4:	4611      	mov	r1, r2
    }
    return (enErrorReg);
}
 8004ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
        enErrorReg = SYSCTL__enReadRegister(enModuleArg, pstRegisterDataArg);
 8004ada:	f7ff beb9 	b.w	8004850 <SYSCTL__enReadRegister>
}
 8004ade:	2001      	movs	r0, #1
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <SYSCTL__enIsPeripheralReady>:
SYSCTL_nERROR SYSCTL__enIsPeripheralReady(SYSCTL_nMODULE enModuleArg, SYSCTL_nPERIPHERAL enPeripheralArg, SYSCTL_nBOOLEAN* penStateArg)
{
    SYSCTL_Register_t enRegister;
    SYSCTL_nERROR enErrorReg;
    enErrorReg = SYSCTL_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
 8004ae4:	b16a      	cbz	r2, 8004b02 <SYSCTL__enIsPeripheralReady+0x1e>
    {
        enErrorReg = SYSCTL_enERROR_POINTER;
    }
    if(SYSCTL_enERROR_OK ==  enErrorReg)
    {
        enRegister.uptrAddress = SYSCTL_PR_OFFSET;
 8004ae6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
{
 8004aea:	b510      	push	{r4, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	4614      	mov	r4, r2
        enErrorReg =SYSCTL__enReadPeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004af0:	466a      	mov	r2, sp
        enRegister.uptrAddress = SYSCTL_PR_OFFSET;
 8004af2:	9303      	str	r3, [sp, #12]
        enErrorReg =SYSCTL__enReadPeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004af4:	f7ff ffe2 	bl	8004abc <SYSCTL__enReadPeripheral>
    }
    if(SYSCTL_enERROR_OK ==  enErrorReg)
 8004af8:	b908      	cbnz	r0, 8004afe <SYSCTL__enIsPeripheralReady+0x1a>
    {
        *penStateArg = (SYSCTL_nBOOLEAN) enRegister.uxValue;
 8004afa:	9b00      	ldr	r3, [sp, #0]
 8004afc:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
 8004afe:	b004      	add	sp, #16
 8004b00:	bd10      	pop	{r4, pc}
        enErrorReg = SYSCTL_enERROR_POINTER;
 8004b02:	2001      	movs	r0, #1
}
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <SYSCTL__enSetPeripheralReset>:
#include <xDriver_MCU/SYSCTL/Driver/xHeader/SYSCTL_PeripheralGeneric.h>
#include <xDriver_MCU/SYSCTL/Peripheral/SYSCTL_Peripheral.h>


SYSCTL_nERROR SYSCTL__enSetPeripheralReset(SYSCTL_nMODULE enModuleArg, SYSCTL_nPERIPHERAL enPeripheralArg)
{
 8004b08:	b570      	push	{r4, r5, r6, lr}
 8004b0a:	b086      	sub	sp, #24
    SYSCTL_Register_t enRegister;
    SYSCTL_nERROR enErrorReg;

    enRegister.uptrAddress = SYSCTL_SR_OFFSET;
 8004b0c:	f44f 66a0 	mov.w	r6, #1280	; 0x500
    enRegister.uxValue = (UBase_t) 1UL;
 8004b10:	2301      	movs	r3, #1
{
 8004b12:	4604      	mov	r4, r0

    enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004b14:	aa02      	add	r2, sp, #8
{
 8004b16:	460d      	mov	r5, r1
    enRegister.uptrAddress = SYSCTL_SR_OFFSET;
 8004b18:	9605      	str	r6, [sp, #20]
    enRegister.uxValue = (UBase_t) 1UL;
 8004b1a:	9302      	str	r3, [sp, #8]
    enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004b1c:	f7ff ffb6 	bl	8004a8c <SYSCTL__enWritePeripheral>

    if(SYSCTL_enERROR_OK == enErrorReg)
 8004b20:	b108      	cbz	r0, 8004b26 <SYSCTL__enSetPeripheralReset+0x1e>
        }while((SYSCTL_enERROR_OK == enErrorReg) &&
               (SYSCTL_enFALSE == enStatusReg));
    }

    return (enErrorReg);
}
 8004b22:	b006      	add	sp, #24
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
        enRegister.uxValue = (UBase_t) 0UL;
 8004b26:	9002      	str	r0, [sp, #8]
        enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004b28:	aa02      	add	r2, sp, #8
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	4620      	mov	r0, r4
        enRegister.uptrAddress = SYSCTL_SR_OFFSET;
 8004b2e:	9605      	str	r6, [sp, #20]
        enErrorReg =SYSCTL__enWritePeripheral(enModuleArg, enPeripheralArg, &enRegister);
 8004b30:	f7ff ffac 	bl	8004a8c <SYSCTL__enWritePeripheral>
    if(SYSCTL_enERROR_OK == enErrorReg)
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d1f4      	bne.n	8004b22 <SYSCTL__enSetPeripheralReset+0x1a>
        enStatusReg = SYSCTL_enFALSE;
 8004b38:	9001      	str	r0, [sp, #4]
 8004b3a:	e002      	b.n	8004b42 <SYSCTL__enSetPeripheralReset+0x3a>
        }while((SYSCTL_enERROR_OK == enErrorReg) &&
 8004b3c:	9b01      	ldr	r3, [sp, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1ef      	bne.n	8004b22 <SYSCTL__enSetPeripheralReset+0x1a>
            enErrorReg = SYSCTL__enIsPeripheralReady(enModuleArg, enPeripheralArg, &enStatusReg);
 8004b42:	aa01      	add	r2, sp, #4
 8004b44:	4629      	mov	r1, r5
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff ffcc 	bl	8004ae4 <SYSCTL__enIsPeripheralReady>
               (SYSCTL_enFALSE == enStatusReg));
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0f5      	beq.n	8004b3c <SYSCTL__enSetPeripheralReset+0x34>
}
 8004b50:	b006      	add	sp, #24
 8004b52:	bd70      	pop	{r4, r5, r6, pc}

08004b54 <SYSCTL__uptrBlockBaseAddress>:
    const uintptr_t SYSCTL_BLOCK_BASE[(UBase_t) SYSCTL_enMODULE_MAX] =
    {
     SYSCTL0_BASE,
    };
    return (SYSCTL_BLOCK_BASE[(UBase_t) enModuleArg]);
}
 8004b54:	4800      	ldr	r0, [pc, #0]	; (8004b58 <SYSCTL__uptrBlockBaseAddress+0x4>)
 8004b56:	4770      	bx	lr
 8004b58:	400fe000 	.word	0x400fe000

08004b5c <UART__enIsTransmitFifoFull>:
{
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
 8004b5c:	b199      	cbz	r1, 8004b86 <UART__enIsTransmitFifoFull+0x2a>
    {
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = UART_FR_R_TXFF_BIT;
 8004b5e:	2205      	movs	r2, #5
        stRegister.uxMask = UART_FR_TXFF_MASK;
        stRegister.uptrAddress = UART_FR_OFFSET;
 8004b60:	2318      	movs	r3, #24
{
 8004b62:	b530      	push	{r4, r5, lr}
 8004b64:	b085      	sub	sp, #20
        stRegister.uxMask = UART_FR_TXFF_MASK;
 8004b66:	2501      	movs	r5, #1
 8004b68:	460c      	mov	r4, r1
        enErrorReg = UART__enReadRegister(enModuleArg, &stRegister);
 8004b6a:	4669      	mov	r1, sp
        stRegister.uptrAddress = UART_FR_OFFSET;
 8004b6c:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = UART_FR_TXFF_MASK;
 8004b6e:	e9cd 5201 	strd	r5, r2, [sp, #4]
        enErrorReg = UART__enReadRegister(enModuleArg, &stRegister);
 8004b72:	f7fe fa0d 	bl	8002f90 <UART__enReadRegister>
    }
    if(UART_enERROR_OK == enErrorReg)
 8004b76:	b920      	cbnz	r0, 8004b82 <UART__enIsTransmitFifoFull+0x26>
    {
        if(UART_FR_TXFF_NOFULL == stRegister.uxValue)
 8004b78:	9b00      	ldr	r3, [sp, #0]
        {
            *penStateArg = UART_enFALSE;
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	bf08      	it	eq
 8004b7e:	4605      	moveq	r5, r0
 8004b80:	6025      	str	r5, [r4, #0]
            *penStateArg = UART_enTRUE;
        }
    }

    return (enErrorReg);
}
 8004b82:	b005      	add	sp, #20
 8004b84:	bd30      	pop	{r4, r5, pc}
        enErrorReg = UART_enERROR_POINTER;
 8004b86:	2001      	movs	r0, #1
}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop

08004b8c <UART__pvfGetIRQSourceHandler>:
};

UART_pvfIRQSourceHandler_t UART__pvfGetIRQSourceHandler(UART_nMODULE enModuleArg, UART_nINT enIntSourceArg)
{
    UART_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = UART_vIRQSourceHandler[(UBase_t) enModuleArg][(UBase_t) enIntSourceArg];
 8004b8c:	4b02      	ldr	r3, [pc, #8]	; (8004b98 <UART__pvfGetIRQSourceHandler+0xc>)
 8004b8e:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    return (pvfFunctionReg);
}
 8004b92:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004b96:	4770      	bx	lr
 8004b98:	20020220 	.word	0x20020220

08004b9c <UART__enSetDataLength>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetDataLength(UART_nMODULE enModuleArg, UART_nLENGTH enLengthArg)
{
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_LCRH_R_WLEN_BIT;
    stRegister.uxMask = UART_LCRH_WLEN_MASK;
 8004ba0:	2203      	movs	r2, #3
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 8004ba2:	232c      	movs	r3, #44	; 0x2c
    stRegister.uxShift = UART_LCRH_R_WLEN_BIT;
 8004ba4:	2405      	movs	r4, #5
    stRegister.uxValue = (UBase_t) enLengthArg;
 8004ba6:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004ba8:	4669      	mov	r1, sp
    stRegister.uxShift = UART_LCRH_R_WLEN_BIT;
 8004baa:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_LCRH_WLEN_MASK;
 8004bac:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_LCRH_OFFSET;
 8004bae:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004bb0:	f7fe fa06 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	bd10      	pop	{r4, pc}

08004bb8 <UART__enSetBaudRate>:
#include <xApplication_MCU/UART/LineControl/BaudRate/UART_BaudRate.h>

#include <xApplication_MCU/UART/Intrinsics/xHeader/UART_Dependencies.h>

UART_nERROR UART__enSetBaudRate(UART_nMODULE enModuleArg, UBase_t uxBaudRateArg)
{
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	ed2d 8b02 	vpush	{d8}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	4606      	mov	r6, r0
 8004bc2:	9101      	str	r1, [sp, #4]
    MCU_nSTATUS enFPUActive = MCU__enGetFPUContextActive();
 8004bc4:	f7fb feec 	bl	80009a0 <MCU__enGetFPUContextActive>
    UBase_t uxBaudRateInteger;
    UBase_t uxBaudRateFractional;
    UBase_t uxCurrentClock;
    float32_t f32BaudRateDivisor;

    uxCurrentClock = 0UL;
 8004bc8:	2300      	movs	r3, #0
    MCU_nSTATUS enFPUActive = MCU__enGetFPUContextActive();
 8004bca:	4605      	mov	r5, r0
    uxBaudRateFractional = 0UL;
    f32BaudRateDivisor = 0.0f;
    enClockDividerReg = UART_enCLOCK_DIVIDER_8;
    enSmartCardMode = UART_enSTATE_DIS;
    enUartClock = UART_enCLOCK_SYSCLK;
    enErrorReg = UART__enGetClockSource(enModuleArg, &enUartClock);
 8004bcc:	a903      	add	r1, sp, #12
 8004bce:	4630      	mov	r0, r6
    enUartClock = UART_enCLOCK_SYSCLK;
 8004bd0:	9303      	str	r3, [sp, #12]
    enSmartCardMode = UART_enSTATE_DIS;
 8004bd2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    enErrorReg = UART__enGetClockSource(enModuleArg, &enUartClock);
 8004bd6:	f000 f96b 	bl	8004eb0 <UART__enGetClockSource>
    if(UART_enERROR_OK == enErrorReg)
 8004bda:	4604      	mov	r4, r0
 8004bdc:	2800      	cmp	r0, #0
 8004bde:	f040 809f 	bne.w	8004d20 <UART__enSetBaudRate+0x168>
    {
        if(UART_enCLOCK_SYSCLK == enUartClock)
 8004be2:	9b03      	ldr	r3, [sp, #12]
        {
            enErrorReg = (UART_nERROR) SYSCTL__enGetSystemClockFrequency(SYSCTL_enMODULE_0, &uxCurrentClock);
 8004be4:	a905      	add	r1, sp, #20
        if(UART_enCLOCK_SYSCLK == enUartClock)
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f040 80a2 	bne.w	8004d30 <UART__enSetBaudRate+0x178>
            enErrorReg = (UART_nERROR) SYSCTL__enGetSystemClockFrequency(SYSCTL_enMODULE_0, &uxCurrentClock);
 8004bec:	f7fe f89e 	bl	8002d2c <SYSCTL__enGetSystemClockFrequency>
 8004bf0:	4604      	mov	r4, r0
        {
            enErrorReg = (UART_nERROR) SYSCTL__enGetAlternateClockFrequency(SYSCTL_enMODULE_0, &uxCurrentClock);
        }

    }
    if(UART_enERROR_OK == enErrorReg)
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	f040 8094 	bne.w	8004d20 <UART__enSetBaudRate+0x168>
    {
        enErrorReg = UART__enGetSmartCardState(enModuleArg, &enSmartCardMode);
 8004bf8:	a904      	add	r1, sp, #16
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f7fe f992 	bl	8002f24 <UART__enGetSmartCardState>
    }
    if(UART_enERROR_OK == enErrorReg)
 8004c00:	4604      	mov	r4, r0
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f040 808c 	bne.w	8004d20 <UART__enSetBaudRate+0x168>
    {
        f32BaudRateDivisor = (float32_t) uxCurrentClock;
        f32BaudRateDivisor /= (float32_t) uxBaudRateArg;
 8004c08:	eddd 7a01 	vldr	s15, [sp, #4]
        f32BaudRateDivisor = (float32_t) uxCurrentClock;
 8004c0c:	eddd 6a05 	vldr	s13, [sp, #20]
        f32BaudRateDivisor /= (float32_t) uxBaudRateArg;
 8004c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
        f32BaudRateDivisor /= 8.0f;

        if((65535.0f < f32BaudRateDivisor) || (UART_enSTATE_ENA == enSmartCardMode))
 8004c14:	eddf 5a4d 	vldr	s11, [pc, #308]	; 8004d4c <UART__enSetBaudRate+0x194>
        f32BaudRateDivisor = (float32_t) uxCurrentClock;
 8004c18:	eef8 6a66 	vcvt.f32.u32	s13, s13
        f32BaudRateDivisor /= 8.0f;
 8004c1c:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
        f32BaudRateDivisor /= (float32_t) uxBaudRateArg;
 8004c20:	ee86 6a87 	vdiv.f32	s12, s13, s14
        if((65535.0f < f32BaudRateDivisor) || (UART_enSTATE_ENA == enSmartCardMode))
 8004c24:	eeb4 6ae5 	vcmpe.f32	s12, s11
        f32BaudRateDivisor /= 8.0f;
 8004c28:	ee66 7a27 	vmul.f32	s15, s12, s15
        if((65535.0f < f32BaudRateDivisor) || (UART_enSTATE_ENA == enSmartCardMode))
 8004c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c30:	dc4c      	bgt.n	8004ccc <UART__enSetBaudRate+0x114>
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d049      	beq.n	8004ccc <UART__enSetBaudRate+0x114>
        float32_t f32DiffError1Reg;
        float32_t f32DiffError2Reg;
        UBase_t uxBaudRateFractional2;
        UBase_t uxBaudRateInteger2;

        uxBaudRateInteger = (UBase_t) f32BaudRateDivisor;
 8004c38:	eefc 8ae7 	vcvt.u32.f32	s17, s15
        f32BaudRateFractional = f32BaudRateDivisor;
        f32BaudRateFractional -= (float32_t) uxBaudRateInteger;
        f32BaudRateFractional *= 64.0f;
        f32BaudRateFractional += 0.5f;
 8004c3c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8004d50 <UART__enSetBaudRate+0x198>
 8004c40:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
        uxBaudRateFractional = (UBase_t) f32BaudRateFractional;

        f32DiffError1Reg = f32BaudRateFractional;
        f32DiffError1Reg -= (float32_t) uxBaudRateFractional;
        f32DiffError1Reg *= 100.0f;
 8004c44:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004d54 <UART__enSetBaudRate+0x19c>
        f32BaudRateFractional -= (float32_t) uxBaudRateInteger;
 8004c48:	eeb8 6a68 	vcvt.f32.u32	s12, s17
        f32BaudRateFractional += 0.5f;
 8004c4c:	eeb0 7a65 	vmov.f32	s14, s11
        f32BaudRateFractional -= (float32_t) uxBaudRateInteger;
 8004c50:	ee37 6ac6 	vsub.f32	s12, s15, s12
        f32BaudRateFractional += 0.5f;
 8004c54:	eea6 7a05 	vfma.f32	s14, s12, s10
        uxBaudRateFractional = (UBase_t) f32BaudRateFractional;
 8004c58:	eebc 8ac7 	vcvt.u32.f32	s16, s14
        f32DiffError1Reg -= (float32_t) uxBaudRateFractional;
 8004c5c:	eeb8 6a48 	vcvt.f32.u32	s12, s16
 8004c60:	ee37 7a46 	vsub.f32	s14, s14, s12

        if(50.0f <= f32DiffError1Reg)
 8004c64:	eeb4 7ae5 	vcmpe.f32	s14, s11
        f32DiffError1Reg *= 100.0f;
 8004c68:	ee67 6a26 	vmul.f32	s13, s14, s13
        if(50.0f <= f32DiffError1Reg)
 8004c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c70:	da64      	bge.n	8004d3c <UART__enSetBaudRate+0x184>
            f32DiffError1Reg = 1.0f - f32DiffError1Reg;
        }

        if(UART_enCLOCK_DIVIDER_8 == enClockDividerReg)
        {
            f32BaudRateDivisor /= 2.0f;
 8004c72:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5

            uxBaudRateInteger2 = (UBase_t) f32BaudRateDivisor;
            f32BaudRateFractional = f32BaudRateDivisor;
            f32BaudRateFractional -= (float32_t) uxBaudRateInteger2;
            f32BaudRateFractional *= 64.0f;
            f32BaudRateFractional += 0.5f;
 8004c76:	eddf 4a36 	vldr	s9, [pc, #216]	; 8004d50 <UART__enSetBaudRate+0x198>
            uxBaudRateFractional2 = (UBase_t) f32BaudRateFractional;

            f32DiffError2Reg = f32BaudRateFractional;
            f32DiffError2Reg -= (float32_t) uxBaudRateFractional2;
            f32DiffError2Reg *= 100.0f;
 8004c7a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8004d54 <UART__enSetBaudRate+0x19c>
            f32BaudRateDivisor /= 2.0f;
 8004c7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
            uxBaudRateInteger2 = (UBase_t) f32BaudRateDivisor;
 8004c82:	eebc 5ae7 	vcvt.u32.f32	s10, s15
            f32BaudRateFractional -= (float32_t) uxBaudRateInteger2;
 8004c86:	eeb8 7a45 	vcvt.f32.u32	s14, s10
 8004c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
            f32BaudRateFractional += 0.5f;
 8004c8e:	eeb0 7a65 	vmov.f32	s14, s11
 8004c92:	eea7 7aa4 	vfma.f32	s14, s15, s9
            uxBaudRateFractional2 = (UBase_t) f32BaudRateFractional;
 8004c96:	eefc 4ac7 	vcvt.u32.f32	s9, s14
            f32DiffError2Reg -= (float32_t) uxBaudRateFractional2;
 8004c9a:	eef8 7a64 	vcvt.f32.u32	s15, s9
 8004c9e:	ee77 7a67 	vsub.f32	s15, s14, s15

            if(50.0f <= f32DiffError2Reg)
 8004ca2:	eef4 7ae5 	vcmpe.f32	s15, s11
            f32DiffError2Reg *= 100.0f;
 8004ca6:	ee27 7a86 	vmul.f32	s14, s15, s12
            if(50.0f <= f32DiffError2Reg)
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	db03      	blt.n	8004cb8 <UART__enSetBaudRate+0x100>
            {
                f32DiffError2Reg = 1.0f - f32DiffError2Reg;
 8004cb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004cb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
            }

            if(f32DiffError2Reg < f32DiffError1Reg)
 8004cb8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d541      	bpl.n	8004d46 <UART__enSetBaudRate+0x18e>
            {
                enClockDividerReg = UART_enCLOCK_DIVIDER_16;
                /*Set HSE to 16*/
                uxBaudRateFractional = uxBaudRateFractional2;
 8004cc2:	eeb0 8a64 	vmov.f32	s16, s9
                uxBaudRateInteger = uxBaudRateInteger2;
 8004cc6:	eef0 8a45 	vmov.f32	s17, s10
 8004cca:	e016      	b.n	8004cfa <UART__enSetBaudRate+0x142>
            if(65535.0f < f32BaudRateDivisor)
 8004ccc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004d58 <UART__enSetBaudRate+0x1a0>
 8004cd0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	dc2e      	bgt.n	8004d38 <UART__enSetBaudRate+0x180>
            f32BaudRateDivisor /= 2.0f; /*Divisor by 2, 16 in total HighSpeed feature*/
 8004cda:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
        f32BaudRateFractional += 0.5f;
 8004cde:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004d50 <UART__enSetBaudRate+0x198>
            f32BaudRateDivisor /= 2.0f; /*Divisor by 2, 16 in total HighSpeed feature*/
 8004ce2:	ee67 7a88 	vmul.f32	s15, s15, s16
        uxBaudRateInteger = (UBase_t) f32BaudRateDivisor;
 8004ce6:	eefc 8ae7 	vcvt.u32.f32	s17, s15
        f32BaudRateFractional -= (float32_t) uxBaudRateInteger;
 8004cea:	eef8 6a68 	vcvt.f32.u32	s13, s17
 8004cee:	ee77 7ae6 	vsub.f32	s15, s15, s13
        f32BaudRateFractional += 0.5f;
 8004cf2:	eea7 8a87 	vfma.f32	s16, s15, s14
        uxBaudRateFractional = (UBase_t) f32BaudRateFractional;
 8004cf6:	eebc 8ac8 	vcvt.u32.f32	s16, s16
            }
        }
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        enErrorReg = UART__enSetClockSourceDivider(enModuleArg, enClockDividerReg);
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 f8ab 	bl	8004e58 <UART__enSetClockSourceDivider>
    }
    if(UART_enERROR_OK == enErrorReg)
 8004d02:	4604      	mov	r4, r0
 8004d04:	b960      	cbnz	r0, 8004d20 <UART__enSetBaudRate+0x168>
    {
        enErrorReg = UART__enSetBaudRateIntegerPart(enModuleArg, uxBaudRateInteger);
 8004d06:	ee18 1a90 	vmov	r1, s17
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f000 f8b2 	bl	8004e74 <UART__enSetBaudRateIntegerPart>
    }
    if(UART_enERROR_OK == enErrorReg)
 8004d10:	4604      	mov	r4, r0
 8004d12:	b928      	cbnz	r0, 8004d20 <UART__enSetBaudRate+0x168>
    {
        enErrorReg = UART__enSetBaudRateFractionalPart(enModuleArg, uxBaudRateFractional);
 8004d14:	ee18 1a10 	vmov	r1, s16
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f8bb 	bl	8004e94 <UART__enSetBaudRateFractionalPart>
 8004d1e:	4604      	mov	r4, r0
    }
    MCU__vSetFPUContextActive(enFPUActive);
 8004d20:	4628      	mov	r0, r5
 8004d22:	f7fb fe1d 	bl	8000960 <MCU__vSetFPUContextActive>
    return (enErrorReg);
}
 8004d26:	4620      	mov	r0, r4
 8004d28:	b006      	add	sp, #24
 8004d2a:	ecbd 8b02 	vpop	{d8}
 8004d2e:	bd70      	pop	{r4, r5, r6, pc}
            enErrorReg = (UART_nERROR) SYSCTL__enGetAlternateClockFrequency(SYSCTL_enMODULE_0, &uxCurrentClock);
 8004d30:	f7fd ffda 	bl	8002ce8 <SYSCTL__enGetAlternateClockFrequency>
 8004d34:	4604      	mov	r4, r0
 8004d36:	e75c      	b.n	8004bf2 <UART__enSetBaudRate+0x3a>
                enErrorReg = UART_enERROR_VALUE;
 8004d38:	2402      	movs	r4, #2
 8004d3a:	e7f1      	b.n	8004d20 <UART__enSetBaudRate+0x168>
            f32DiffError1Reg = 1.0f - f32DiffError1Reg;
 8004d3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d40:	ee77 6a66 	vsub.f32	s13, s14, s13
        if(UART_enCLOCK_DIVIDER_8 == enClockDividerReg)
 8004d44:	e795      	b.n	8004c72 <UART__enSetBaudRate+0xba>
 8004d46:	2401      	movs	r4, #1
 8004d48:	e7d7      	b.n	8004cfa <UART__enSetBaudRate+0x142>
 8004d4a:	bf00      	nop
 8004d4c:	48ffff00 	.word	0x48ffff00
 8004d50:	42800000 	.word	0x42800000
 8004d54:	42c80000 	.word	0x42c80000
 8004d58:	497fff00 	.word	0x497fff00

08004d5c <GPIO__enGetDriveCapability>:
{
    GPIO_Register_t stRegister;
    GPIO_nERROR enErrorReg;

    enErrorReg = GPIO_enERROR_OK;
    if(0UL == (uintptr_t) penDriveArg)
 8004d5c:	b189      	cbz	r1, 8004d82 <GPIO__enGetDriveCapability+0x26>
        enErrorReg = GPIO_enERROR_POINTER;
    }
    if(GPIO_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = GPIO_PP_R_PIN_BIT;
        stRegister.uxMask = GPIO_PP_PIN_MASK;
 8004d5e:	2201      	movs	r2, #1
        stRegister.uptrAddress = GPIO_PP_OFFSET;
 8004d60:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
 8004d64:	b510      	push	{r4, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	b084      	sub	sp, #16
        stRegister.uxShift = GPIO_PP_R_PIN_BIT;
 8004d6a:	2100      	movs	r1, #0
        stRegister.uptrAddress = GPIO_PP_OFFSET;
 8004d6c:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = GPIO_PP_PIN_MASK;
 8004d6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = GPIO__enReadRegister(enPortArg, &stRegister);
 8004d72:	4669      	mov	r1, sp
 8004d74:	f7ff fbe0 	bl	8004538 <GPIO__enReadRegister>
    }
    if(GPIO_enERROR_OK == enErrorReg)
 8004d78:	b908      	cbnz	r0, 8004d7e <GPIO__enGetDriveCapability+0x22>
    {
        *penDriveArg = (GPIO_nDRIVE_CAPABILITY) stRegister.uxValue;
 8004d7a:	9b00      	ldr	r3, [sp, #0]
 8004d7c:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd10      	pop	{r4, pc}
        enErrorReg = GPIO_enERROR_POINTER;
 8004d82:	2001      	movs	r0, #1
}
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop

08004d88 <GPIO__enEnablePullDownResistorByNumber>:
    enErrorReg = GPIO__enSetPullDownResistorByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enEnablePullDownResistorByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004d90:	2108      	movs	r1, #8
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7fc fbe0 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004d98:	b108      	cbz	r0, 8004d9e <GPIO__enEnablePullDownResistorByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetPullDownResistorByNumber(enPortArg, enPinArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}
 8004d9a:	b004      	add	sp, #16
 8004d9c:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_PDR_OFFSET;
 8004da2:	f240 5614 	movw	r6, #1300	; 0x514
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004da6:	4669      	mov	r1, sp
 8004da8:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8004daa:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_PDR_OFFSET;
 8004dac:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004dae:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004db2:	f7ff fbd9 	bl	8004568 <GPIO__enWriteRegister>
}
 8004db6:	b004      	add	sp, #16
 8004db8:	bd70      	pop	{r4, r5, r6, pc}
 8004dba:	bf00      	nop

08004dbc <GPIO__enDisablePullDownResistorByNumber>:
    enErrorReg = GPIO__enSetPullDownResistorByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enDisablePullDownResistorByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7fc fbc6 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004dcc:	b108      	cbz	r0, 8004dd2 <GPIO__enDisablePullDownResistorByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetPullDownResistorByNumber(enPortArg, enPinArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_PDR_OFFSET;
 8004dd6:	f240 5614 	movw	r6, #1300	; 0x514
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004dda:	4669      	mov	r1, sp
 8004ddc:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8004dde:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_PDR_OFFSET;
 8004de0:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004de2:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004de6:	f7ff fbbf 	bl	8004568 <GPIO__enWriteRegister>
}
 8004dea:	b004      	add	sp, #16
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
 8004dee:	bf00      	nop

08004df0 <GPIO__enEnablePullUpResistorByNumber>:
    enErrorReg = GPIO__enSetPullUpResistorByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enEnablePullUpResistorByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	460c      	mov	r4, r1
 8004df4:	b084      	sub	sp, #16
 8004df6:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004df8:	2108      	movs	r1, #8
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7fc fbac 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004e00:	b108      	cbz	r0, 8004e06 <GPIO__enEnablePullUpResistorByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetPullUpResistorByNumber(enPortArg, enPinArg, GPIO_enSTATE_ENA);
    return (enErrorReg);
}
 8004e02:	b004      	add	sp, #16
 8004e04:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8004e06:	2201      	movs	r2, #1
 8004e08:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_PUR_OFFSET;
 8004e0a:	f44f 66a2 	mov.w	r6, #1296	; 0x510
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004e0e:	4669      	mov	r1, sp
 8004e10:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8004e12:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_PUR_OFFSET;
 8004e14:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004e16:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004e1a:	f7ff fba5 	bl	8004568 <GPIO__enWriteRegister>
}
 8004e1e:	b004      	add	sp, #16
 8004e20:	bd70      	pop	{r4, r5, r6, pc}
 8004e22:	bf00      	nop

08004e24 <GPIO__enDisablePullUpResistorByNumber>:
    enErrorReg = GPIO__enSetPullUpResistorByMask(enPortArg, enPinMaskArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}

GPIO_nERROR GPIO__enDisablePullUpResistorByNumber(GPIO_nPORT enPortArg, GPIO_nPIN enPinArg)
{
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	460c      	mov	r4, r1
 8004e28:	b084      	sub	sp, #16
 8004e2a:	4605      	mov	r5, r0
    enErrorReg = (GPIO_nERROR) MCU__enCheckParams((UBase_t) enPinArg, (UBase_t) GPIO_enPIN_MAX);
 8004e2c:	2108      	movs	r1, #8
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f7fc fb92 	bl	8001558 <MCU__enCheckParams>
    if(GPIO_enERROR_OK == enErrorReg)
 8004e34:	b108      	cbz	r0, 8004e3a <GPIO__enDisablePullUpResistorByNumber+0x16>
    GPIO_nERROR enErrorReg;
    enErrorReg = GPIO__enSetPullUpResistorByNumber(enPortArg, enPinArg, GPIO_enSTATE_DIS);
    return (enErrorReg);
}
 8004e36:	b004      	add	sp, #16
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = (UBase_t) enStateArg;
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2301      	movs	r3, #1
        stRegister.uptrAddress = GPIO_PUR_OFFSET;
 8004e3e:	f44f 66a2 	mov.w	r6, #1296	; 0x510
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004e42:	4669      	mov	r1, sp
 8004e44:	4628      	mov	r0, r5
        stRegister.uxShift = (UBase_t) enPinArg;
 8004e46:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = GPIO_PUR_OFFSET;
 8004e48:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = (UBase_t) enStateArg;
 8004e4a:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = GPIO__enWriteRegister(enPortArg, &stRegister);
 8004e4e:	f7ff fb8b 	bl	8004568 <GPIO__enWriteRegister>
}
 8004e52:	b004      	add	sp, #16
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	bf00      	nop

08004e58 <UART__enSetClockSourceDivider>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetClockSourceDivider(UART_nMODULE enModuleArg, UART_nCLOCK_DIVIDER enDividerArg)
{
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_CTL_R_HSE_BIT;
    stRegister.uxMask = UART_CTL_HSE_MASK;
 8004e5c:	2201      	movs	r2, #1
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8004e5e:	2330      	movs	r3, #48	; 0x30
    stRegister.uxShift = UART_CTL_R_HSE_BIT;
 8004e60:	2405      	movs	r4, #5
    stRegister.uxValue = (UBase_t) enDividerArg;
 8004e62:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004e64:	4669      	mov	r1, sp
    stRegister.uxShift = UART_CTL_R_HSE_BIT;
 8004e66:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_CTL_HSE_MASK;
 8004e68:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_CTL_OFFSET;
 8004e6a:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004e6c:	f7fe f8a8 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8004e70:	b004      	add	sp, #16
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <UART__enSetBaudRateIntegerPart>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/UART/Driver/Intrinsics/Primitives/UART_Primitives.h>
#include <xDriver_MCU/UART/Peripheral/UART_Peripheral.h>

UART_nERROR UART__enSetBaudRateIntegerPart(UART_nMODULE enModuleArg, UBase_t uxIntegerArg)
{
 8004e74:	b510      	push	{r4, lr}
 8004e76:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_IBRD_R_DIVINT_BIT;
    stRegister.uxMask = UART_IBRD_DIVINT_MASK;
 8004e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
    stRegister.uptrAddress = UART_IBRD_OFFSET;
 8004e7c:	2324      	movs	r3, #36	; 0x24
    stRegister.uxShift = UART_IBRD_R_DIVINT_BIT;
 8004e7e:	2400      	movs	r4, #0
    stRegister.uxValue = (UBase_t) uxIntegerArg;
 8004e80:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004e82:	4669      	mov	r1, sp
    stRegister.uxShift = UART_IBRD_R_DIVINT_BIT;
 8004e84:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_IBRD_DIVINT_MASK;
 8004e86:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_IBRD_OFFSET;
 8004e88:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004e8a:	f7fe f899 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	bf00      	nop

08004e94 <UART__enSetBaudRateFractionalPart>:
    return (enErrorReg);
}


UART_nERROR UART__enSetBaudRateFractionalPart(UART_nMODULE enModuleArg, UBase_t uxFractionalArg)
{
 8004e94:	b510      	push	{r4, lr}
 8004e96:	b084      	sub	sp, #16
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    stRegister.uxShift = UART_FBRD_R_DIVFRAC_BIT;
    stRegister.uxMask = UART_FBRD_DIVFRAC_MASK;
 8004e98:	223f      	movs	r2, #63	; 0x3f
    stRegister.uptrAddress = UART_FBRD_OFFSET;
 8004e9a:	2328      	movs	r3, #40	; 0x28
    stRegister.uxShift = UART_FBRD_R_DIVFRAC_BIT;
 8004e9c:	2400      	movs	r4, #0
    stRegister.uxValue = (UBase_t) uxFractionalArg;
 8004e9e:	9100      	str	r1, [sp, #0]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004ea0:	4669      	mov	r1, sp
    stRegister.uxShift = UART_FBRD_R_DIVFRAC_BIT;
 8004ea2:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = UART_FBRD_DIVFRAC_MASK;
 8004ea4:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = UART_FBRD_OFFSET;
 8004ea6:	9303      	str	r3, [sp, #12]
    enErrorReg = UART__enWriteRegister(enModuleArg, &stRegister);
 8004ea8:	f7fe f88a 	bl	8002fc0 <UART__enWriteRegister>
    return (enErrorReg);
}
 8004eac:	b004      	add	sp, #16
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <UART__enGetClockSource>:
{
    UART_Register_t stRegister;
    UART_nERROR enErrorReg;

    enErrorReg = UART_enERROR_OK;
    if(0UL == (uintptr_t) penClockArg)
 8004eb0:	b189      	cbz	r1, 8004ed6 <UART__enGetClockSource+0x26>
        enErrorReg = UART_enERROR_POINTER;
    }
    if(UART_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = UART_CC_R_CS_BIT;
        stRegister.uxMask = UART_CC_CS_MASK;
 8004eb2:	220f      	movs	r2, #15
        stRegister.uptrAddress = UART_CC_OFFSET;
 8004eb4:	f640 73c8 	movw	r3, #4040	; 0xfc8
{
 8004eb8:	b510      	push	{r4, lr}
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b084      	sub	sp, #16
        stRegister.uxShift = UART_CC_R_CS_BIT;
 8004ebe:	2100      	movs	r1, #0
        stRegister.uptrAddress = UART_CC_OFFSET;
 8004ec0:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = UART_CC_CS_MASK;
 8004ec2:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = UART__enReadRegister(enModuleArg, &stRegister);
 8004ec6:	4669      	mov	r1, sp
 8004ec8:	f7fe f862 	bl	8002f90 <UART__enReadRegister>
    }
    if(UART_enERROR_OK == enErrorReg)
 8004ecc:	b908      	cbnz	r0, 8004ed2 <UART__enGetClockSource+0x22>
    {
        *penClockArg = (UART_nCLOCK) stRegister.uxValue;
 8004ece:	9b00      	ldr	r3, [sp, #0]
 8004ed0:	6023      	str	r3, [r4, #0]
    }

    return (enErrorReg);
}
 8004ed2:	b004      	add	sp, #16
 8004ed4:	bd10      	pop	{r4, pc}
        enErrorReg = UART_enERROR_POINTER;
 8004ed6:	2001      	movs	r0, #1
}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	0000      	movs	r0, r0
	...

08004ee0 <vsnprintf__uxUserGeneric>:
#if defined (__TI_ARM__ ) || defined (__MSP430__ )
    #pragma CHECK_MISRA("-6.3, -10.1, -10.3, -12.2, -12.7, -12.10, -14.5, -16.1")
#endif
/* internal vsnprintf*/
UBase_t vsnprintf__uxUserGeneric(CONV_OUT_t pvfOut, char* pcBuffer, const UBase_t uxMaxLength, const char* pcFormat, va_list vaList)
{
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    boolean_t boNegative;

    if (0U == (uintptr_t) pcBuffer)
    {
        /*use null output function*/
        pvfOut = &Conv__enOutNull;
 8004ee4:	f1b1 0800 	subs.w	r8, r1, #0
    }
    uxlteration = 0U;
 8004ee8:	f04f 0400 	mov.w	r4, #0
{
 8004eec:	4616      	mov	r6, r2
        pvfOut = &Conv__enOutNull;
 8004eee:	4a90      	ldr	r2, [pc, #576]	; (8005130 <vsnprintf__uxUserGeneric+0x250>)
 8004ef0:	bf14      	ite	ne
 8004ef2:	4682      	movne	sl, r0
 8004ef4:	4692      	moveq	sl, r2
{
 8004ef6:	ed2d 8b02 	vpush	{d8}
 8004efa:	b095      	sub	sp, #84	; 0x54
 8004efc:	930d      	str	r3, [sp, #52]	; 0x34
    uxLengthOut = 0U;
    uxLengthReg = 0U;
 8004efe:	940f      	str	r4, [sp, #60]	; 0x3c
 8004f00:	f8dd b080 	ldr.w	fp, [sp, #128]	; 0x80
    uxLengthOut = 0U;
 8004f04:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    uxIndex = 0U;
    while ('\0' != *pcFormat)
 8004f08:	7818      	ldrb	r0, [r3, #0]
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f000 8291 	beq.w	8005432 <vsnprintf__uxUserGeneric+0x552>
            uxFlags |= (UBase_t) CONV_enFLAGS_PRECISION;
            pcFormat += 1U;
            if(CONV_enERROR_OK == Conv__enIsDigit(*pcFormat))
            {
                uint64_t u64ValueTemp;
                u64ValueTemp = 0ULL;
 8004f10:	4657      	mov	r7, sl
 8004f12:	ed9f 8b85 	vldr	d8, [pc, #532]	; 8005128 <vsnprintf__uxUserGeneric+0x248>
 8004f16:	e00b      	b.n	8004f30 <vsnprintf__uxUserGeneric+0x50>
          pvfOut(*pcFormat, pcBuffer, uxIndex, uxMaxLength);
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4633      	mov	r3, r6
 8004f1c:	4641      	mov	r1, r8
          uxIndex++;
 8004f1e:	3401      	adds	r4, #1
          pvfOut(*pcFormat, pcBuffer, uxIndex, uxMaxLength);
 8004f20:	47b8      	blx	r7
          pcFormat += 1U;
 8004f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f24:	3301      	adds	r3, #1
 8004f26:	930d      	str	r3, [sp, #52]	; 0x34
    while ('\0' != *pcFormat)
 8004f28:	7818      	ldrb	r0, [r3, #0]
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f000 80b8 	beq.w	80050a0 <vsnprintf__uxUserGeneric+0x1c0>
        if ('%' != *pcFormat )
 8004f30:	2825      	cmp	r0, #37	; 0x25
 8004f32:	d1f1      	bne.n	8004f18 <vsnprintf__uxUserGeneric+0x38>
        pcFormat += 1U;
 8004f34:	3301      	adds	r3, #1
        uxFlags = 0U;
 8004f36:	2500      	movs	r5, #0
        pcFormat += 1U;
 8004f38:	930d      	str	r3, [sp, #52]	; 0x34
            switch (*pcFormat)
 8004f3a:	7818      	ldrb	r0, [r3, #0]
 8004f3c:	f1a0 0220 	sub.w	r2, r0, #32
 8004f40:	2a10      	cmp	r2, #16
 8004f42:	d80a      	bhi.n	8004f5a <vsnprintf__uxUserGeneric+0x7a>
 8004f44:	e8df f002 	tbb	[pc, r2]
 8004f48:	a20909a7 	.word	0xa20909a7
 8004f4c:	09090909 	.word	0x09090909
 8004f50:	9d090909 	.word	0x9d090909
 8004f54:	09099809 	.word	0x09099809
 8004f58:	93          	.byte	0x93
 8004f59:	00          	.byte	0x00
        if (CONV_enERROR_OK == Conv__enIsDigit(*pcFormat))
 8004f5a:	f000 fb05 	bl	8005568 <Conv__enIsDigit>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f000 80ad 	beq.w	80050be <vsnprintf__uxUserGeneric+0x1de>
        else if ('*' == *pcFormat)
 8004f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f66:	7818      	ldrb	r0, [r3, #0]
 8004f68:	282a      	cmp	r0, #42	; 0x2a
 8004f6a:	f000 80ce 	beq.w	800510a <vsnprintf__uxUserGeneric+0x22a>
        uxWidth = 0U;
 8004f6e:	2200      	movs	r2, #0
 8004f70:	920a      	str	r2, [sp, #40]	; 0x28
        if ('.' == *pcFormat)
 8004f72:	282e      	cmp	r0, #46	; 0x2e
 8004f74:	f000 80b1 	beq.w	80050da <vsnprintf__uxUserGeneric+0x1fa>
        uxPrecision = 0U;
 8004f78:	f04f 0900 	mov.w	r9, #0
                pcFormat += 1U;
            }
        }

        /* evaluate length field*/
        switch (*pcFormat)
 8004f7c:	f1a0 0268 	sub.w	r2, r0, #104	; 0x68
 8004f80:	2a12      	cmp	r2, #18
 8004f82:	d819      	bhi.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
 8004f84:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004f88:	00180133 	.word	0x00180133
 8004f8c:	0018012d 	.word	0x0018012d
 8004f90:	0018013c 	.word	0x0018013c
 8004f94:	00180018 	.word	0x00180018
 8004f98:	00180018 	.word	0x00180018
 8004f9c:	00180018 	.word	0x00180018
 8004fa0:	00180013 	.word	0x00180013
 8004fa4:	00180018 	.word	0x00180018
 8004fa8:	00180018 	.word	0x00180018
 8004fac:	0013      	.short	0x0013
                uxFlags |= (UBase_t) CONV_enFLAGS_LONG_LONG;
                pcFormat += 1U;
                break;
            case 'z' :
                uxFlags |= (UBase_t) CONV_enFLAGS_LONG;
                pcFormat += 1U;
 8004fae:	1c5a      	adds	r2, r3, #1
                uxFlags |= (UBase_t) CONV_enFLAGS_LONG;
 8004fb0:	f445 7580 	orr.w	r5, r5, #256	; 0x100
                pcFormat += 1U;
 8004fb4:	920d      	str	r2, [sp, #52]	; 0x34
            default :
                break;
        }

        /* evaluate specifier*/
        switch (*pcFormat)
 8004fb6:	7858      	ldrb	r0, [r3, #1]
 8004fb8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8004fbc:	2b53      	cmp	r3, #83	; 0x53
 8004fbe:	f200 80c9 	bhi.w	8005154 <vsnprintf__uxUserGeneric+0x274>
 8004fc2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004fc6:	0164      	.short	0x0164
 8004fc8:	00c700c7 	.word	0x00c700c7
 8004fcc:	00c700c7 	.word	0x00c700c7
 8004fd0:	00c700c7 	.word	0x00c700c7
 8004fd4:	00c700c7 	.word	0x00c700c7
 8004fd8:	00c700c7 	.word	0x00c700c7
 8004fdc:	00c700c7 	.word	0x00c700c7
 8004fe0:	00c700c7 	.word	0x00c700c7
 8004fe4:	00c700c7 	.word	0x00c700c7
 8004fe8:	00c700c7 	.word	0x00c700c7
 8004fec:	00c700c7 	.word	0x00c700c7
 8004ff0:	00c700c7 	.word	0x00c700c7
 8004ff4:	00c700c7 	.word	0x00c700c7
 8004ff8:	00c700c7 	.word	0x00c700c7
 8004ffc:	00c700c7 	.word	0x00c700c7
 8005000:	00c700c7 	.word	0x00c700c7
 8005004:	012600c7 	.word	0x012600c7
 8005008:	01260149 	.word	0x01260149
 800500c:	00c700c7 	.word	0x00c700c7
 8005010:	00c700c7 	.word	0x00c700c7
 8005014:	00c700c7 	.word	0x00c700c7
 8005018:	00c700c7 	.word	0x00c700c7
 800501c:	00c700c7 	.word	0x00c700c7
 8005020:	00c700c7 	.word	0x00c700c7
 8005024:	00c700c7 	.word	0x00c700c7
 8005028:	00c700c7 	.word	0x00c700c7
 800502c:	00c700d0 	.word	0x00c700d0
 8005030:	00c700c7 	.word	0x00c700c7
 8005034:	00c700c7 	.word	0x00c700c7
 8005038:	00c700c7 	.word	0x00c700c7
 800503c:	00c700c7 	.word	0x00c700c7
 8005040:	01cb00d0 	.word	0x01cb00d0
 8005044:	012600d0 	.word	0x012600d0
 8005048:	01260149 	.word	0x01260149
 800504c:	00d000c7 	.word	0x00d000c7
 8005050:	00c700c7 	.word	0x00c700c7
 8005054:	00c700c7 	.word	0x00c700c7
 8005058:	00d000c7 	.word	0x00d000c7
 800505c:	00c701b1 	.word	0x00c701b1
 8005060:	016e00c7 	.word	0x016e00c7
 8005064:	00d000c7 	.word	0x00d000c7
 8005068:	00c700c7 	.word	0x00c700c7
 800506c:	00d0      	.short	0x00d0
                    pcFormat += 1U;
 800506e:	3301      	adds	r3, #1
                    uxFlags |= (UBase_t) CONV_enFLAGS_ZEROPAD;
 8005070:	f045 0501 	orr.w	r5, r5, #1
                    pcFormat += 1U;
 8005074:	930d      	str	r3, [sp, #52]	; 0x34
        }while (FALSE != boStatusReg);
 8005076:	e760      	b.n	8004f3a <vsnprintf__uxUserGeneric+0x5a>
                    pcFormat += 1U;
 8005078:	3301      	adds	r3, #1
                    uxFlags |= (UBase_t) CONV_enFLAGS_LEFT;
 800507a:	f045 0502 	orr.w	r5, r5, #2
                    pcFormat += 1U;
 800507e:	930d      	str	r3, [sp, #52]	; 0x34
        }while (FALSE != boStatusReg);
 8005080:	e75b      	b.n	8004f3a <vsnprintf__uxUserGeneric+0x5a>
                    pcFormat += 1U;
 8005082:	3301      	adds	r3, #1
                    uxFlags |= (UBase_t) CONV_enFLAGS_PLUS;
 8005084:	f045 0504 	orr.w	r5, r5, #4
                    pcFormat += 1U;
 8005088:	930d      	str	r3, [sp, #52]	; 0x34
        }while (FALSE != boStatusReg);
 800508a:	e756      	b.n	8004f3a <vsnprintf__uxUserGeneric+0x5a>
                    pcFormat += 1U;
 800508c:	3301      	adds	r3, #1
                    uxFlags |= (UBase_t) CONV_enFLAGS_HASH;
 800508e:	f045 0510 	orr.w	r5, r5, #16
                    pcFormat += 1U;
 8005092:	930d      	str	r3, [sp, #52]	; 0x34
        }while (FALSE != boStatusReg);
 8005094:	e751      	b.n	8004f3a <vsnprintf__uxUserGeneric+0x5a>
                    pcFormat += 1U;
 8005096:	3301      	adds	r3, #1
                    uxFlags |= (UBase_t) CONV_enFLAGS_SPACE;
 8005098:	f045 0508 	orr.w	r5, r5, #8
                    pcFormat += 1U;
 800509c:	930d      	str	r3, [sp, #52]	; 0x34
        }while (FALSE != boStatusReg);
 800509e:	e74c      	b.n	8004f3a <vsnprintf__uxUserGeneric+0x5a>
                break;
        }
    }

    /* termination*/
    if(uxIndex > uxMaxLength)
 80050a0:	42b4      	cmp	r4, r6
 80050a2:	46ba      	mov	sl, r7
 80050a4:	d900      	bls.n	80050a8 <vsnprintf__uxUserGeneric+0x1c8>
    {
      uxIndex = uxMaxLength;
      uxIndex -= 1U;
 80050a6:	1e74      	subs	r4, r6, #1
    }
    pvfOut((char)0, pcBuffer, uxIndex, uxMaxLength);
 80050a8:	4633      	mov	r3, r6
 80050aa:	4622      	mov	r2, r4
 80050ac:	4641      	mov	r1, r8
 80050ae:	2000      	movs	r0, #0
 80050b0:	47d0      	blx	sl

    /* return written chars without terminating \0*/
    return (uxIndex);
}
 80050b2:	4620      	mov	r0, r4
 80050b4:	b015      	add	sp, #84	; 0x54
 80050b6:	ecbd 8b02 	vpop	{d8}
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            Conv__enString2UInteger( &pcFormat, &u64ValueTemp, &uxLengthReg);
 80050be:	aa0f      	add	r2, sp, #60	; 0x3c
 80050c0:	a912      	add	r1, sp, #72	; 0x48
 80050c2:	a80d      	add	r0, sp, #52	; 0x34
            u64ValueTemp = 0ULL;
 80050c4:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
            Conv__enString2UInteger( &pcFormat, &u64ValueTemp, &uxLengthReg);
 80050c8:	f000 fea0 	bl	8005e0c <Conv__enString2UInteger>
        if ('.' == *pcFormat)
 80050cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            uxWidth = (UBase_t) u64ValueTemp;
 80050ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
        if ('.' == *pcFormat)
 80050d0:	7818      	ldrb	r0, [r3, #0]
            uxWidth = (UBase_t) u64ValueTemp;
 80050d2:	920a      	str	r2, [sp, #40]	; 0x28
        if ('.' == *pcFormat)
 80050d4:	282e      	cmp	r0, #46	; 0x2e
 80050d6:	f47f af4f 	bne.w	8004f78 <vsnprintf__uxUserGeneric+0x98>
            pcFormat += 1U;
 80050da:	1c5a      	adds	r2, r3, #1
            uxFlags |= (UBase_t) CONV_enFLAGS_PRECISION;
 80050dc:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
            pcFormat += 1U;
 80050e0:	920d      	str	r2, [sp, #52]	; 0x34
            if(CONV_enERROR_OK == Conv__enIsDigit(*pcFormat))
 80050e2:	7858      	ldrb	r0, [r3, #1]
 80050e4:	f000 fa40 	bl	8005568 <Conv__enIsDigit>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f000 8169 	beq.w	80053c0 <vsnprintf__uxUserGeneric+0x4e0>
            else if ('*' == *pcFormat)
 80050ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050f0:	7818      	ldrb	r0, [r3, #0]
 80050f2:	282a      	cmp	r0, #42	; 0x2a
 80050f4:	f47f af40 	bne.w	8004f78 <vsnprintf__uxUserGeneric+0x98>
                pcFormat += 1U;
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	920d      	str	r2, [sp, #52]	; 0x34
        switch (*pcFormat)
 80050fc:	7858      	ldrb	r0, [r3, #1]
 80050fe:	4613      	mov	r3, r2
 8005100:	f85b 2b04 	ldr.w	r2, [fp], #4
 8005104:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
                pcFormat += 1U;
 8005108:	e738      	b.n	8004f7c <vsnprintf__uxUserGeneric+0x9c>
            sxWidthArgument = (Base_t) va_arg(vaList, Base_t);
 800510a:	f85b 2b04 	ldr.w	r2, [fp], #4
            if (0 > sxWidthArgument)
 800510e:	2a00      	cmp	r2, #0
                sxWidthArgumentTemp -= sxWidthArgument;
 8005110:	bfbc      	itt	lt
 8005112:	4252      	neglt	r2, r2
                uxFlags |= (UBase_t) CONV_enFLAGS_LEFT;    /* reverse padding*/
 8005114:	f045 0502 	orrlt.w	r5, r5, #2
                uxWidth = (UBase_t) sxWidthArgument;
 8005118:	920a      	str	r2, [sp, #40]	; 0x28
            pcFormat += 1U;
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	920d      	str	r2, [sp, #52]	; 0x34
        if ('.' == *pcFormat)
 800511e:	7858      	ldrb	r0, [r3, #1]
 8005120:	4613      	mov	r3, r2
 8005122:	e726      	b.n	8004f72 <vsnprintf__uxUserGeneric+0x92>
 8005124:	f3af 8000 	nop.w
	...
 8005130:	0800558d 	.word	0x0800558d
                    while (uxlteration < uxWidth)
 8005134:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005136:	429d      	cmp	r5, r3
 8005138:	d90b      	bls.n	8005152 <vsnprintf__uxUserGeneric+0x272>
 800513a:	461a      	mov	r2, r3
                        uxlteration++;
 800513c:	3201      	adds	r2, #1
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 800513e:	4633      	mov	r3, r6
 8005140:	4641      	mov	r1, r8
 8005142:	2020      	movs	r0, #32
                        uxlteration++;
 8005144:	9211      	str	r2, [sp, #68]	; 0x44
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 8005146:	4622      	mov	r2, r4
 8005148:	47b8      	blx	r7
                    while (uxlteration < uxWidth)
 800514a:	9a11      	ldr	r2, [sp, #68]	; 0x44
                        uxIndex++;
 800514c:	3401      	adds	r4, #1
                    while (uxlteration < uxWidth)
 800514e:	42aa      	cmp	r2, r5
 8005150:	d3f4      	bcc.n	800513c <vsnprintf__uxUserGeneric+0x25c>
                pvfOut(cValueArgument, pcBuffer, uxIndex, uxMaxLength);
 8005152:	4648      	mov	r0, r9
                pvfOut(*pcFormat, pcBuffer, uxIndex, uxMaxLength);
 8005154:	4622      	mov	r2, r4
 8005156:	4633      	mov	r3, r6
 8005158:	4641      	mov	r1, r8
                uxIndex++;
 800515a:	3401      	adds	r4, #1
                pvfOut(*pcFormat, pcBuffer, uxIndex, uxMaxLength);
 800515c:	47b8      	blx	r7
                pcFormat += 1U;
 800515e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005160:	3301      	adds	r3, #1
 8005162:	930d      	str	r3, [sp, #52]	; 0x34
                break;
 8005164:	e6e0      	b.n	8004f28 <vsnprintf__uxUserGeneric+0x48>
                if (('x' == *pcFormat) || ('X' == *pcFormat))
 8005166:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 800516a:	2b58      	cmp	r3, #88	; 0x58
 800516c:	f000 811e 	beq.w	80053ac <vsnprintf__uxUserGeneric+0x4cc>
                else if ('o' == *pcFormat )
 8005170:	286f      	cmp	r0, #111	; 0x6f
 8005172:	f000 81ad 	beq.w	80054d0 <vsnprintf__uxUserGeneric+0x5f0>
                else if ('b' == *pcFormat )
 8005176:	2862      	cmp	r0, #98	; 0x62
 8005178:	f000 81cc 	beq.w	8005514 <vsnprintf__uxUserGeneric+0x634>
                    uxFlags &= ~(UBase_t) CONV_enFLAGS_HASH;   /* no hash for dec pcFormat*/
 800517c:	f025 0510 	bic.w	r5, r5, #16
                    uxBase = 10U;
 8005180:	f04f 0e0a 	mov.w	lr, #10
                if (('i' != *pcFormat ) && ('d' != *pcFormat))
 8005184:	2869      	cmp	r0, #105	; 0x69
 8005186:	d002      	beq.n	800518e <vsnprintf__uxUserGeneric+0x2ae>
 8005188:	2864      	cmp	r0, #100	; 0x64
 800518a:	f040 8116 	bne.w	80053ba <vsnprintf__uxUserGeneric+0x4da>
                if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_PRECISION))
 800518e:	056b      	lsls	r3, r5, #21
                    uxFlags &= ~(UBase_t) CONV_enFLAGS_ZEROPAD;
 8005190:	bf48      	it	mi
 8005192:	f025 0501 	bicmi.w	r5, r5, #1
                if (('i' == *pcFormat) || ('d' == *pcFormat))
 8005196:	2869      	cmp	r0, #105	; 0x69
 8005198:	f000 811e 	beq.w	80053d8 <vsnprintf__uxUserGeneric+0x4f8>
 800519c:	f1a0 0c64 	sub.w	ip, r0, #100	; 0x64
 80051a0:	fabc fc8c 	clz	ip, ip
 80051a4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80051a8:	f1bc 0f00 	cmp.w	ip, #0
 80051ac:	f040 8114 	bne.w	80053d8 <vsnprintf__uxUserGeneric+0x4f8>
                    if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LONG_LONG))
 80051b0:	f415 7000 	ands.w	r0, r5, #512	; 0x200
 80051b4:	f040 818f 	bne.w	80054d6 <vsnprintf__uxUserGeneric+0x5f6>
                    else if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LONG))
 80051b8:	05eb      	lsls	r3, r5, #23
 80051ba:	f100 81ae 	bmi.w	800551a <vsnprintf__uxUserGeneric+0x63a>
                        if(0U != (uxFlags & (UBase_t) CONV_enFLAGS_CHAR))
 80051be:	0668      	lsls	r0, r5, #25
                            uxValueArgument = (UBase_t) u8ValueArgument;
 80051c0:	f85b 2b04 	ldr.w	r2, [fp], #4
                        if(0U != (uxFlags & (UBase_t) CONV_enFLAGS_CHAR))
 80051c4:	f100 817c 	bmi.w	80054c0 <vsnprintf__uxUserGeneric+0x5e0>
                        else if(0U != (uxFlags & (UBase_t) CONV_enFLAGS_SHORT))
 80051c8:	0629      	lsls	r1, r5, #24
                            uxValueArgument = (UBase_t) u16ValueArgument;
 80051ca:	bf48      	it	mi
 80051cc:	b292      	uxthmi	r2, r2
                        Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, uxBase, uxPrecision);
 80051ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051d0:	2100      	movs	r1, #0
 80051d2:	9503      	str	r5, [sp, #12]
 80051d4:	9302      	str	r3, [sp, #8]
 80051d6:	4623      	mov	r3, r4
 80051d8:	9600      	str	r6, [sp, #0]
 80051da:	9104      	str	r1, [sp, #16]
 80051dc:	e9cd e905 	strd	lr, r9, [sp, #20]
 80051e0:	e15e      	b.n	80054a0 <vsnprintf__uxUserGeneric+0x5c0>
                pcFormat += 1U;
 80051e2:	1c5a      	adds	r2, r3, #1
                uxFlags |= (UBase_t) CONV_enFLAGS_LONG_LONG;
 80051e4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
                pcFormat += 1U;
 80051e8:	920d      	str	r2, [sp, #52]	; 0x34
        switch (*pcFormat)
 80051ea:	7858      	ldrb	r0, [r3, #1]
                break;
 80051ec:	e6e4      	b.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
                pcFormat += 1U;
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	920d      	str	r2, [sp, #52]	; 0x34
                if ('h' == *pcFormat)
 80051f2:	7858      	ldrb	r0, [r3, #1]
 80051f4:	2868      	cmp	r0, #104	; 0x68
 80051f6:	f000 8116 	beq.w	8005426 <vsnprintf__uxUserGeneric+0x546>
                uxFlags |= (UBase_t) CONV_enFLAGS_SHORT;
 80051fa:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80051fe:	e6db      	b.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
                pcFormat += 1U;
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	920d      	str	r2, [sp, #52]	; 0x34
                if ('l' == *pcFormat)
 8005204:	7858      	ldrb	r0, [r3, #1]
 8005206:	286c      	cmp	r0, #108	; 0x6c
 8005208:	f000 8107 	beq.w	800541a <vsnprintf__uxUserGeneric+0x53a>
                uxFlags |= (UBase_t) CONV_enFLAGS_LONG;
 800520c:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8005210:	e6d2      	b.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
                if (( 'g' == *pcFormat) || ('G' == *pcFormat))
 8005212:	f000 03df 	and.w	r3, r0, #223	; 0xdf
                if (('E' == *pcFormat ) || ('G' == *pcFormat))
 8005216:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
                f64DoubleArgument = (float64_t) va_arg(vaList, float64_t);
 800521a:	f10b 0b07 	add.w	fp, fp, #7
                Conv__enNumber2String_Exponential(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 800521e:	4622      	mov	r2, r4
                if (( 'g' == *pcFormat) || ('G' == *pcFormat))
 8005220:	2b47      	cmp	r3, #71	; 0x47
                Conv__enNumber2String_Exponential(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 8005222:	ac10      	add	r4, sp, #64	; 0x40
                f64DoubleArgument = (float64_t) va_arg(vaList, float64_t);
 8005224:	f02b 0b07 	bic.w	fp, fp, #7
                Conv__enNumber2String_Exponential(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 8005228:	4633      	mov	r3, r6
                    uxFlags |= (UBase_t) CONV_enFLAGS_ADAPT_EXP;
 800522a:	bf08      	it	eq
 800522c:	f445 6500 	orreq.w	r5, r5, #2048	; 0x800
                if (('E' == *pcFormat ) || ('G' == *pcFormat))
 8005230:	2845      	cmp	r0, #69	; 0x45
                Conv__enNumber2String_Exponential(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 8005232:	4641      	mov	r1, r8
 8005234:	4638      	mov	r0, r7
                    uxFlags |= (UBase_t) CONV_enFLAGS_UPPERCASE;
 8005236:	bf08      	it	eq
 8005238:	f045 0520 	orreq.w	r5, r5, #32
                Conv__enNumber2String_Exponential(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 800523c:	ecbb 0b02 	vldmia	fp!, {d0}
 8005240:	e9cd 5902 	strd	r5, r9, [sp, #8]
 8005244:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005246:	e9cd 4500 	strd	r4, r5, [sp]
 800524a:	f000 f9a1 	bl	8005590 <Conv__enNumber2String_Exponential>
                pcFormat += 1U;
 800524e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                uxIndex = uxLengthOut;
 8005250:	9c10      	ldr	r4, [sp, #64]	; 0x40
                pcFormat += 1U;
 8005252:	3301      	adds	r3, #1
 8005254:	930d      	str	r3, [sp, #52]	; 0x34
                break;
 8005256:	e667      	b.n	8004f28 <vsnprintf__uxUserGeneric+0x48>
                if ('F' == *pcFormat)
 8005258:	2846      	cmp	r0, #70	; 0x46
                f64DoubleArgument = (float64_t) va_arg(vaList, float64_t);
 800525a:	f10b 0b07 	add.w	fp, fp, #7
                Conv__enNumber2String_Float(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 800525e:	4622      	mov	r2, r4
 8005260:	ac10      	add	r4, sp, #64	; 0x40
                    uxFlags |= (UBase_t) CONV_enFLAGS_UPPERCASE;
 8005262:	bf08      	it	eq
 8005264:	f045 0520 	orreq.w	r5, r5, #32
                f64DoubleArgument = (float64_t) va_arg(vaList, float64_t);
 8005268:	f02b 0b07 	bic.w	fp, fp, #7
                Conv__enNumber2String_Float(pvfOut, pcBuffer, f64DoubleArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, uxPrecision);
 800526c:	4633      	mov	r3, r6
 800526e:	4641      	mov	r1, r8
 8005270:	4638      	mov	r0, r7
 8005272:	ecbb 0b02 	vldmia	fp!, {d0}
 8005276:	e9cd 5902 	strd	r5, r9, [sp, #8]
 800527a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800527c:	e9cd 4500 	strd	r4, r5, [sp]
 8005280:	f000 fb26 	bl	80058d0 <Conv__enNumber2String_Float>
                pcFormat += 1U;
 8005284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                uxIndex = uxLengthOut;
 8005286:	9c10      	ldr	r4, [sp, #64]	; 0x40
                pcFormat += 1U;
 8005288:	3301      	adds	r3, #1
 800528a:	930d      	str	r3, [sp, #52]	; 0x34
                break;
 800528c:	e64c      	b.n	8004f28 <vsnprintf__uxUserGeneric+0x48>
                pvfOut('%', pcBuffer, uxIndex, uxMaxLength);
 800528e:	4622      	mov	r2, r4
 8005290:	4633      	mov	r3, r6
 8005292:	4641      	mov	r1, r8
 8005294:	2025      	movs	r0, #37	; 0x25
 8005296:	47b8      	blx	r7
                pcFormat += 1U;
 8005298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                uxIndex++;
 800529a:	3401      	adds	r4, #1
                pcFormat += 1U;
 800529c:	3301      	adds	r3, #1
 800529e:	930d      	str	r3, [sp, #52]	; 0x34
                break;
 80052a0:	e642      	b.n	8004f28 <vsnprintf__uxUserGeneric+0x48>
                if(0U == uxPrecision)
 80052a2:	f1b9 0f00 	cmp.w	r9, #0
                pcValueArgument = (char*) va_arg(vaList, char*);
 80052a6:	f85b ab04 	ldr.w	sl, [fp], #4
                CONV_enStringLength(pcValueArgument, &uxlteration, uxPrecisionTemp);
 80052aa:	a911      	add	r1, sp, #68	; 0x44
 80052ac:	bf14      	ite	ne
 80052ae:	464a      	movne	r2, r9
 80052b0:	f04f 32ff 	moveq.w	r2, #4294967295
 80052b4:	4650      	mov	r0, sl
 80052b6:	f000 fd83 	bl	8005dc0 <CONV_enStringLength>
                if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_PRECISION))
 80052ba:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 80052be:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c0:	d16e      	bne.n	80053a0 <vsnprintf__uxUserGeneric+0x4c0>
                if (0U == (uxFlags & (UBase_t) CONV_enFLAGS_LEFT))
 80052c2:	f015 0302 	ands.w	r3, r5, #2
 80052c6:	930c      	str	r3, [sp, #48]	; 0x30
 80052c8:	f000 80b5 	beq.w	8005436 <vsnprintf__uxUserGeneric+0x556>
                while (('\0' != *pcValueArgument) &&
 80052cc:	f89a 0000 	ldrb.w	r0, [sl]
 80052d0:	b1c0      	cbz	r0, 8005304 <vsnprintf__uxUserGeneric+0x424>
 80052d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052d4:	fab3 f583 	clz	r5, r3
 80052d8:	096d      	lsrs	r5, r5, #5
                       ((0U == (uxFlags & (UBase_t) CONV_enFLAGS_PRECISION)) || (0U != uxPrecision)))
 80052da:	f1b9 0f00 	cmp.w	r9, #0
 80052de:	d100      	bne.n	80052e2 <vsnprintf__uxUserGeneric+0x402>
 80052e0:	b185      	cbz	r5, 8005304 <vsnprintf__uxUserGeneric+0x424>
 80052e2:	44a1      	add	r9, r4
                    pvfOut(*pcValueArgument, pcBuffer, uxIndex, uxMaxLength);
 80052e4:	4622      	mov	r2, r4
 80052e6:	4633      	mov	r3, r6
 80052e8:	4641      	mov	r1, r8
                    uxIndex++;
 80052ea:	3401      	adds	r4, #1
                    pvfOut(*pcValueArgument, pcBuffer, uxIndex, uxMaxLength);
 80052ec:	47b8      	blx	r7
                while (('\0' != *pcValueArgument) &&
 80052ee:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
 80052f2:	b118      	cbz	r0, 80052fc <vsnprintf__uxUserGeneric+0x41c>
                       ((0U == (uxFlags & (UBase_t) CONV_enFLAGS_PRECISION)) || (0U != uxPrecision)))
 80052f4:	45a1      	cmp	r9, r4
 80052f6:	d1f5      	bne.n	80052e4 <vsnprintf__uxUserGeneric+0x404>
 80052f8:	2d00      	cmp	r5, #0
 80052fa:	d1f3      	bne.n	80052e4 <vsnprintf__uxUserGeneric+0x404>
                if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LEFT))
 80052fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f43f af2d 	beq.w	800515e <vsnprintf__uxUserGeneric+0x27e>
                    while (uxlteration < uxWidth)
 8005304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005306:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005308:	429d      	cmp	r5, r3
 800530a:	f67f af28 	bls.w	800515e <vsnprintf__uxUserGeneric+0x27e>
 800530e:	461a      	mov	r2, r3
                        uxlteration++;
 8005310:	3201      	adds	r2, #1
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 8005312:	4633      	mov	r3, r6
 8005314:	4641      	mov	r1, r8
 8005316:	2020      	movs	r0, #32
                        uxlteration++;
 8005318:	9211      	str	r2, [sp, #68]	; 0x44
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 800531a:	4622      	mov	r2, r4
 800531c:	47b8      	blx	r7
                    while (uxlteration < uxWidth)
 800531e:	9a11      	ldr	r2, [sp, #68]	; 0x44
                        uxIndex++;
 8005320:	3401      	adds	r4, #1
                    while (uxlteration < uxWidth)
 8005322:	42aa      	cmp	r2, r5
 8005324:	d3f4      	bcc.n	8005310 <vsnprintf__uxUserGeneric+0x430>
 8005326:	e71a      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, 16U, uxPrecision);
 8005328:	2100      	movs	r1, #0
                uxFlags |= (UBase_t) CONV_enFLAGS_ZEROPAD | (UBase_t) CONV_enFLAGS_UPPERCASE;
 800532a:	f045 0521 	orr.w	r5, r5, #33	; 0x21
                Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, 16U, uxPrecision);
 800532e:	f85b 2b04 	ldr.w	r2, [fp], #4
 8005332:	4623      	mov	r3, r4
 8005334:	4638      	mov	r0, r7
 8005336:	f8cd 9018 	str.w	r9, [sp, #24]
 800533a:	9600      	str	r6, [sp, #0]
 800533c:	e9cd 5103 	strd	r5, r1, [sp, #12]
 8005340:	2110      	movs	r1, #16
 8005342:	9105      	str	r1, [sp, #20]
 8005344:	2108      	movs	r1, #8
 8005346:	9102      	str	r1, [sp, #8]
 8005348:	a910      	add	r1, sp, #64	; 0x40
 800534a:	9101      	str	r1, [sp, #4]
 800534c:	4641      	mov	r1, r8
 800534e:	f000 fcb5 	bl	8005cbc <Conv__enNumber2String_Long>
                pcFormat += 1U;
 8005352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                uxIndex = uxLengthOut;
 8005354:	9c10      	ldr	r4, [sp, #64]	; 0x40
                pcFormat += 1U;
 8005356:	3301      	adds	r3, #1
 8005358:	930d      	str	r3, [sp, #52]	; 0x34
                break;
 800535a:	e5e5      	b.n	8004f28 <vsnprintf__uxUserGeneric+0x48>
                cValueArgument = (char)va_arg(vaList, Base_t);
 800535c:	f85b 2b04 	ldr.w	r2, [fp], #4
                uxlteration = 1U;
 8005360:	2301      	movs	r3, #1
                cValueArgument = (char)va_arg(vaList, Base_t);
 8005362:	fa5f f982 	uxtb.w	r9, r2
                if (0U == (uxFlags & (UBase_t) CONV_enFLAGS_LEFT))
 8005366:	07aa      	lsls	r2, r5, #30
                uxlteration = 1U;
 8005368:	9311      	str	r3, [sp, #68]	; 0x44
                if (0U == (uxFlags & (UBase_t) CONV_enFLAGS_LEFT))
 800536a:	f57f aee3 	bpl.w	8005134 <vsnprintf__uxUserGeneric+0x254>
                pvfOut(cValueArgument, pcBuffer, uxIndex, uxMaxLength);
 800536e:	4622      	mov	r2, r4
 8005370:	4633      	mov	r3, r6
 8005372:	4648      	mov	r0, r9
 8005374:	4641      	mov	r1, r8
 8005376:	47b8      	blx	r7
                    while (uxlteration < uxWidth)
 8005378:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800537a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                uxIndex++;
 800537c:	3401      	adds	r4, #1
                    while (uxlteration < uxWidth)
 800537e:	429a      	cmp	r2, r3
 8005380:	f67f aeed 	bls.w	800515e <vsnprintf__uxUserGeneric+0x27e>
 8005384:	4615      	mov	r5, r2
 8005386:	461a      	mov	r2, r3
                        uxlteration++;
 8005388:	3201      	adds	r2, #1
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 800538a:	4633      	mov	r3, r6
 800538c:	4641      	mov	r1, r8
 800538e:	2020      	movs	r0, #32
                        uxlteration++;
 8005390:	9211      	str	r2, [sp, #68]	; 0x44
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 8005392:	4622      	mov	r2, r4
 8005394:	47b8      	blx	r7
                    while (uxlteration < uxWidth)
 8005396:	9a11      	ldr	r2, [sp, #68]	; 0x44
                        uxIndex++;
 8005398:	3401      	adds	r4, #1
                    while (uxlteration < uxWidth)
 800539a:	42aa      	cmp	r2, r5
 800539c:	d3f4      	bcc.n	8005388 <vsnprintf__uxUserGeneric+0x4a8>
 800539e:	e6de      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                    if(uxlteration> uxPrecision)
 80053a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053a2:	454b      	cmp	r3, r9
                        uxlteration = uxPrecision;
 80053a4:	bf88      	it	hi
 80053a6:	f8cd 9044 	strhi.w	r9, [sp, #68]	; 0x44
 80053aa:	e78a      	b.n	80052c2 <vsnprintf__uxUserGeneric+0x3e2>
                if ('X' == *pcFormat)
 80053ac:	2858      	cmp	r0, #88	; 0x58
 80053ae:	f040 80ae 	bne.w	800550e <vsnprintf__uxUserGeneric+0x62e>
                    uxFlags |= (UBase_t) CONV_enFLAGS_UPPERCASE;
 80053b2:	f045 0520 	orr.w	r5, r5, #32
                    uxBase = 16U;
 80053b6:	f04f 0e10 	mov.w	lr, #16
                    uxFlags &= ~((UBase_t) CONV_enFLAGS_PLUS | (UBase_t) CONV_enFLAGS_SPACE);
 80053ba:	f025 050c 	bic.w	r5, r5, #12
 80053be:	e6e6      	b.n	800518e <vsnprintf__uxUserGeneric+0x2ae>
                Conv__enString2UInteger( &pcFormat, &u64ValueTemp, &uxLengthReg);
 80053c0:	aa0f      	add	r2, sp, #60	; 0x3c
 80053c2:	a912      	add	r1, sp, #72	; 0x48
 80053c4:	a80d      	add	r0, sp, #52	; 0x34
                u64ValueTemp = 0ULL;
 80053c6:	ed8d 8b12 	vstr	d8, [sp, #72]	; 0x48
                Conv__enString2UInteger( &pcFormat, &u64ValueTemp, &uxLengthReg);
 80053ca:	f000 fd1f 	bl	8005e0c <Conv__enString2UInteger>
        switch (*pcFormat)
 80053ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                uxPrecision = (UBase_t) u64ValueTemp;
 80053d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
        switch (*pcFormat)
 80053d4:	7818      	ldrb	r0, [r3, #0]
 80053d6:	e5d1      	b.n	8004f7c <vsnprintf__uxUserGeneric+0x9c>
                    if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LONG_LONG))
 80053d8:	f415 7100 	ands.w	r1, r5, #512	; 0x200
 80053dc:	d04c      	beq.n	8005478 <vsnprintf__uxUserGeneric+0x598>
                        s64ValueArgument = (int64_t) va_arg(vaList, int64_t);
 80053de:	f10b 0b07 	add.w	fp, fp, #7
 80053e2:	f02b 0b07 	bic.w	fp, fp, #7
 80053e6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80053ea:	f85b 2b08 	ldr.w	r2, [fp], #8
                        if(0 <= s64ValueArgument)
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	db68      	blt.n	80054c4 <vsnprintf__uxUserGeneric+0x5e4>
                            boNegative = FALSE;
 80053f2:	2100      	movs	r1, #0
                        Conv__enNumber2String_LongLong(pvfOut, pcBuffer, u64ValueTemp, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, (uint64_t) uxBase, uxPrecision);
 80053f4:	9400      	str	r4, [sp, #0]
 80053f6:	4638      	mov	r0, r7
 80053f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80053fc:	9504      	str	r5, [sp, #16]
 80053fe:	9601      	str	r6, [sp, #4]
 8005400:	e9cd 1e05 	strd	r1, lr, [sp, #20]
 8005404:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	2100      	movs	r1, #0
 800540a:	9107      	str	r1, [sp, #28]
 800540c:	a910      	add	r1, sp, #64	; 0x40
 800540e:	9102      	str	r1, [sp, #8]
 8005410:	4641      	mov	r1, r8
 8005412:	f000 fc6b 	bl	8005cec <Conv__enNumber2String_LongLong>
                        uxIndex = uxLengthOut;
 8005416:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005418:	e6a1      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                    pcFormat += 1U;
 800541a:	1c9a      	adds	r2, r3, #2
                    uxFlags |= (UBase_t) CONV_enFLAGS_LONG_LONG;
 800541c:	f445 7540 	orr.w	r5, r5, #768	; 0x300
                    pcFormat += 1U;
 8005420:	920d      	str	r2, [sp, #52]	; 0x34
        switch (*pcFormat)
 8005422:	7898      	ldrb	r0, [r3, #2]
 8005424:	e5c8      	b.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
                    pcFormat += 1U;
 8005426:	1c9a      	adds	r2, r3, #2
                    uxFlags |= (UBase_t) CONV_enFLAGS_CHAR;
 8005428:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
                    pcFormat += 1U;
 800542c:	920d      	str	r2, [sp, #52]	; 0x34
        switch (*pcFormat)
 800542e:	7898      	ldrb	r0, [r3, #2]
 8005430:	e5c2      	b.n	8004fb8 <vsnprintf__uxUserGeneric+0xd8>
    uxIndex = 0U;
 8005432:	4604      	mov	r4, r0
 8005434:	e638      	b.n	80050a8 <vsnprintf__uxUserGeneric+0x1c8>
                    while (uxlteration < uxWidth)
 8005436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005438:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800543a:	429d      	cmp	r5, r3
 800543c:	d90b      	bls.n	8005456 <vsnprintf__uxUserGeneric+0x576>
 800543e:	461a      	mov	r2, r3
                        uxlteration++;
 8005440:	3201      	adds	r2, #1
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 8005442:	4633      	mov	r3, r6
 8005444:	4641      	mov	r1, r8
 8005446:	2020      	movs	r0, #32
                        uxlteration++;
 8005448:	9211      	str	r2, [sp, #68]	; 0x44
                        pvfOut(' ', pcBuffer, uxIndex, uxMaxLength);
 800544a:	4622      	mov	r2, r4
 800544c:	47b8      	blx	r7
                    while (uxlteration < uxWidth)
 800544e:	9a11      	ldr	r2, [sp, #68]	; 0x44
                        uxIndex++;
 8005450:	3401      	adds	r4, #1
                    while (uxlteration < uxWidth)
 8005452:	42aa      	cmp	r2, r5
 8005454:	d3f4      	bcc.n	8005440 <vsnprintf__uxUserGeneric+0x560>
                while (('\0' != *pcValueArgument) &&
 8005456:	f89a 0000 	ldrb.w	r0, [sl]
 800545a:	2800      	cmp	r0, #0
 800545c:	f43f ae7f 	beq.w	800515e <vsnprintf__uxUserGeneric+0x27e>
 8005460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005462:	fab3 f583 	clz	r5, r3
 8005466:	096d      	lsrs	r5, r5, #5
                       ((0U == (uxFlags & (UBase_t) CONV_enFLAGS_PRECISION)) || (0U != uxPrecision)))
 8005468:	f1b9 0f00 	cmp.w	r9, #0
 800546c:	f47f af39 	bne.w	80052e2 <vsnprintf__uxUserGeneric+0x402>
 8005470:	2d00      	cmp	r5, #0
 8005472:	f47f af36 	bne.w	80052e2 <vsnprintf__uxUserGeneric+0x402>
 8005476:	e672      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                    else if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LONG))
 8005478:	f415 7380 	ands.w	r3, r5, #256	; 0x100
                        sxValueArgument = (Base_t) va_arg(vaList, Base_t);
 800547c:	f85b 2b04 	ldr.w	r2, [fp], #4
                    else if (0U != (uxFlags & (UBase_t) CONV_enFLAGS_LONG))
 8005480:	d116      	bne.n	80054b0 <vsnprintf__uxUserGeneric+0x5d0>
                        if(0U != (uxFlags & (UBase_t) CONV_enFLAGS_CHAR))
 8005482:	0668      	lsls	r0, r5, #25
 8005484:	d55b      	bpl.n	800553e <vsnprintf__uxUserGeneric+0x65e>
                            sxValueArgument = (Base_t) s8ValueArgument;
 8005486:	b252      	sxtb	r2, r2
                        if(sxValueArgument >= 0)
 8005488:	2a00      	cmp	r2, #0
 800548a:	da01      	bge.n	8005490 <vsnprintf__uxUserGeneric+0x5b0>
                            sxValueArgumentTemp -= sxValueArgument;
 800548c:	4252      	negs	r2, r2
                            boNegative = TRUE;
 800548e:	2301      	movs	r3, #1
                        Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueTemp, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, uxBase, uxPrecision);
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	e9cd e905 	strd	lr, r9, [sp, #20]
 8005496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005498:	9503      	str	r5, [sp, #12]
 800549a:	9302      	str	r3, [sp, #8]
 800549c:	4623      	mov	r3, r4
 800549e:	9600      	str	r6, [sp, #0]
                        Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, uxBase, uxPrecision);
 80054a0:	a910      	add	r1, sp, #64	; 0x40
 80054a2:	4638      	mov	r0, r7
 80054a4:	9101      	str	r1, [sp, #4]
 80054a6:	4641      	mov	r1, r8
 80054a8:	f000 fc08 	bl	8005cbc <Conv__enNumber2String_Long>
                        uxIndex = uxLengthOut;
 80054ac:	9c10      	ldr	r4, [sp, #64]	; 0x40
                pcFormat += 1U;
 80054ae:	e656      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                        if(sxValueArgument >= 0)
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	da01      	bge.n	80054b8 <vsnprintf__uxUserGeneric+0x5d8>
                            sxValueArgumentTemp -= sxValueArgument;
 80054b4:	4252      	negs	r2, r2
                            boNegative = TRUE;
 80054b6:	2101      	movs	r1, #1
                        Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueTemp, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, uxBase, uxPrecision);
 80054b8:	9104      	str	r1, [sp, #16]
 80054ba:	e9cd e905 	strd	lr, r9, [sp, #20]
 80054be:	e7ea      	b.n	8005496 <vsnprintf__uxUserGeneric+0x5b6>
                            uxValueArgument = (UBase_t) u8ValueArgument;
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	e684      	b.n	80051ce <vsnprintf__uxUserGeneric+0x2ee>
                            s64ValueArgumentTemp -= s64ValueArgument;
 80054c4:	4252      	negs	r2, r2
                            boNegative = TRUE;
 80054c6:	f04f 0101 	mov.w	r1, #1
                            s64ValueArgumentTemp -= s64ValueArgument;
 80054ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
                            boNegative = TRUE;
 80054ce:	e791      	b.n	80053f4 <vsnprintf__uxUserGeneric+0x514>
                    uxBase = 8U;
 80054d0:	f04f 0e08 	mov.w	lr, #8
 80054d4:	e771      	b.n	80053ba <vsnprintf__uxUserGeneric+0x4da>
                        u64ValueArgument = (uint64_t) va_arg(vaList, uint64_t);
 80054d6:	f10b 0b07 	add.w	fp, fp, #7
                        Conv__enNumber2String_LongLong(pvfOut, pcBuffer, u64ValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, (uint64_t) uxBase, uxPrecision);
 80054da:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 80054de:	4641      	mov	r1, r8
 80054e0:	4638      	mov	r0, r7
                        u64ValueArgument = (uint64_t) va_arg(vaList, uint64_t);
 80054e2:	f02b 0b07 	bic.w	fp, fp, #7
                        Conv__enNumber2String_LongLong(pvfOut, pcBuffer, u64ValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, (uint64_t) uxBase, uxPrecision);
 80054e6:	e8fb 2302 	ldrd	r2, r3, [fp], #8
 80054ea:	9400      	str	r4, [sp, #0]
 80054ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054ee:	f8cd 9020 	str.w	r9, [sp, #32]
 80054f2:	f8cd e018 	str.w	lr, [sp, #24]
 80054f6:	9504      	str	r5, [sp, #16]
 80054f8:	f8cd c01c 	str.w	ip, [sp, #28]
 80054fc:	f8cd c014 	str.w	ip, [sp, #20]
 8005500:	9601      	str	r6, [sp, #4]
 8005502:	e9cd a402 	strd	sl, r4, [sp, #8]
 8005506:	f000 fbf1 	bl	8005cec <Conv__enNumber2String_LongLong>
                        uxIndex = uxLengthOut;
 800550a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800550c:	e627      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                    uxBase = 16U;
 800550e:	f04f 0e10 	mov.w	lr, #16
 8005512:	e637      	b.n	8005184 <vsnprintf__uxUserGeneric+0x2a4>
                    uxBase = 2U;
 8005514:	f04f 0e02 	mov.w	lr, #2
                if (('i' != *pcFormat ) && ('d' != *pcFormat))
 8005518:	e74f      	b.n	80053ba <vsnprintf__uxUserGeneric+0x4da>
                        Conv__enNumber2String_Long(pvfOut, pcBuffer, uxValueArgument, uxIndex, uxMaxLength, &uxLengthOut, uxWidth, uxFlags, boNegative, uxBase, uxPrecision);
 800551a:	f85b 2b04 	ldr.w	r2, [fp], #4
 800551e:	4623      	mov	r3, r4
 8005520:	ac10      	add	r4, sp, #64	; 0x40
 8005522:	4641      	mov	r1, r8
 8005524:	9600      	str	r6, [sp, #0]
 8005526:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800552a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800552c:	e9cd e905 	strd	lr, r9, [sp, #20]
 8005530:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8005534:	4638      	mov	r0, r7
 8005536:	f000 fbc1 	bl	8005cbc <Conv__enNumber2String_Long>
                        uxIndex = uxLengthOut;
 800553a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800553c:	e60f      	b.n	800515e <vsnprintf__uxUserGeneric+0x27e>
                        else  if(0U != (uxFlags & (UBase_t) CONV_enFLAGS_SHORT))
 800553e:	0629      	lsls	r1, r5, #24
                            sxValueArgument = (Base_t) s16ValueArgument;
 8005540:	bf48      	it	mi
 8005542:	b212      	sxthmi	r2, r2
 8005544:	e7a0      	b.n	8005488 <vsnprintf__uxUserGeneric+0x5a8>
 8005546:	bf00      	nop

08005548 <vsnprintf__uxUser>:
    uxCant = vsnprintf__uxUserGeneric( &Conv__enOutBuffer, pcBuffer, (UBase_t) -1, pcFormat, vaList);
    return (uxCant);
}

UBase_t vsnprintf__uxUser(char* pcBuffer, const UBase_t uxCount, const char* pcFormat, va_list vaList)
{
 8005548:	4694      	mov	ip, r2
    UBase_t uxCant;
    uxCant = vsnprintf__uxUserGeneric( &Conv__enOutBuffer, pcBuffer, uxCount, pcFormat, vaList);
 800554a:	460a      	mov	r2, r1
 800554c:	4601      	mov	r1, r0
 800554e:	4805      	ldr	r0, [pc, #20]	; (8005564 <vsnprintf__uxUser+0x1c>)
{
 8005550:	b510      	push	{r4, lr}
 8005552:	461c      	mov	r4, r3
 8005554:	b082      	sub	sp, #8
    uxCant = vsnprintf__uxUserGeneric( &Conv__enOutBuffer, pcBuffer, uxCount, pcFormat, vaList);
 8005556:	4663      	mov	r3, ip
 8005558:	9400      	str	r4, [sp, #0]
 800555a:	f7ff fcc1 	bl	8004ee0 <vsnprintf__uxUserGeneric>
    return (uxCant);
}
 800555e:	b002      	add	sp, #8
 8005560:	bd10      	pop	{r4, pc}
 8005562:	bf00      	nop
 8005564:	08005575 	.word	0x08005575

08005568 <Conv__enIsDigit>:

CONV_nERROR Conv__enIsDigit(char cCharacter)
{
    CONV_nERROR enStatus;

    if(((uint8_t) cCharacter < (uint8_t) '0') || ((uint8_t) cCharacter > (uint8_t) '9'))
 8005568:	3830      	subs	r0, #48	; 0x30
    {
        enStatus = CONV_enERROR_VALUE;
    }
    else
    {
        enStatus = CONV_enERROR_OK;
 800556a:	2809      	cmp	r0, #9
    }

    return (enStatus);
}
 800556c:	bf8c      	ite	hi
 800556e:	2002      	movhi	r0, #2
 8005570:	2000      	movls	r0, #0
 8005572:	4770      	bx	lr

08005574 <Conv__enOutBuffer>:
#if defined (__TI_ARM__ ) || defined (__MSP430__ )
    #pragma CHECK_MISRA("-16.7")
#endif

CONV_nERROR Conv__enOutBuffer(char cCharacter, void* pvBuffer, UBase_t uxIndex, UBase_t uxMaxLenght)
{
 8005574:	4684      	mov	ip, r0
    CONV_nERROR enErrorReg;
    char* pcBuffer;

    enErrorReg = CONV_enERROR_OK;
    if(0UL == (uintptr_t) pvBuffer)
 8005576:	b139      	cbz	r1, 8005588 <Conv__enOutBuffer+0x14>
    {
        enErrorReg = CONV_enERROR_POINTER;
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        if (uxIndex >= uxMaxLenght)
 8005578:	429a      	cmp	r2, r3
 800557a:	d203      	bcs.n	8005584 <Conv__enOutBuffer+0x10>
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        pcBuffer = (char*) pvBuffer;
        pcBuffer += uxIndex;
        *pcBuffer = cCharacter;
 800557c:	2000      	movs	r0, #0
 800557e:	f801 c002 	strb.w	ip, [r1, r2]
 8005582:	4770      	bx	lr
            enErrorReg = CONV_enERROR_RANGE;
 8005584:	2003      	movs	r0, #3
    }
    return (enErrorReg);
}
 8005586:	4770      	bx	lr
        enErrorReg = CONV_enERROR_POINTER;
 8005588:	2001      	movs	r0, #1
 800558a:	4770      	bx	lr

0800558c <Conv__enOutNull>:
{
    CONV_nERROR enErrorReg;
    (void)cCharacter; (void)pvBuffer; (void)uxIndex; (void)uxMaxLenght;
    enErrorReg = CONV_enERROR_OK;
    return (enErrorReg);
}
 800558c:	2000      	movs	r0, #0
 800558e:	4770      	bx	lr

08005590 <Conv__enNumber2String_Exponential>:
#include <xUtils/Conversion/Conversion_Number2String/xHeader/Conversion_NumberLong2String.h>

CONV_nERROR Conv__enNumber2String_Exponential(CONV_OUT_t pvfOut, char* pcBufferOut, float64_t f64Value,
                                               UBase_t uxIndex, UBase_t uxMaxLenght, UBase_t* puxBufOutLenght,
                                               UBase_t uxWidth, UBase_t uxflags, UBase_t uxPrec)
{
 8005590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005594:	ed2d 8b06 	vpush	{d8-d10}
 8005598:	b08f      	sub	sp, #60	; 0x3c
 800559a:	461f      	mov	r7, r3
 800559c:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80055a0:	e9dd 8320 	ldrd	r8, r3, [sp, #128]	; 0x80
    szStartIndex = 0U;
    s64ExponentialValue = 0;
    uxMinWidth = 0UL;
    boTerminate = FALSE;
    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pvfOut) || (0UL == (uintptr_t) pcBufferOut) || (0UL == (uintptr_t) puxBufOutLenght))
 80055a4:	f1b9 0f00 	cmp.w	r9, #0
 80055a8:	bf18      	it	ne
 80055aa:	2900      	cmpne	r1, #0
{
 80055ac:	920a      	str	r2, [sp, #40]	; 0x28
    if((0UL == (uintptr_t) pvfOut) || (0UL == (uintptr_t) pcBufferOut) || (0UL == (uintptr_t) puxBufOutLenght))
 80055ae:	f000 8120 	beq.w	80057f2 <Conv__enNumber2String_Exponential+0x262>
 80055b2:	fab0 f280 	clz	r2, r0
 80055b6:	4604      	mov	r4, r0
 80055b8:	0952      	lsrs	r2, r2, #5
 80055ba:	2800      	cmp	r0, #0
 80055bc:	f000 8119 	beq.w	80057f2 <Conv__enNumber2String_Exponential+0x262>
 80055c0:	eeb0 8b40 	vmov.f64	d8, d0
 80055c4:	460d      	mov	r5, r1
        enErrorReg = CONV_enERROR_POINTER;
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        /* check for NaN and special f64Values*/
        if (f64Value < -DBL_MAX)
 80055c6:	ed9f 7baa 	vldr	d7, [pc, #680]	; 8005870 <Conv__enNumber2String_Exponential+0x2e0>
 80055ca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80055ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d2:	f100 8114 	bmi.w	80057fe <Conv__enNumber2String_Exponential+0x26e>
        {
            enErrorReg = Conv__enNumber2String_Float(pvfOut, pcBufferOut, f64Value, uxIndex, uxMaxLenght, puxBufOutLenght, uxWidth, uxflags, uxPrec);
            boTerminate = TRUE;
        }
        else if(f64Value > DBL_MAX)
 80055d6:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8005878 <Conv__enNumber2String_Exponential+0x2e8>
 80055da:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80055de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055e2:	f300 810c 	bgt.w	80057fe <Conv__enNumber2String_Exponential+0x26e>
        int64_t  s64Exponential2;
        int64_t  s64Exponential2Temp;
        UBase_t uxFloatWidth;

        /* determine the sign*/
        if(0.0 > f64Value)
 80055e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
        u64Temp2 |= u64TempShift2;
        uFloatConversion.UNSIGNED = (uint64_t) u64Temp2;  /* drop the exponent so uFloatConversion.FLOAT is now in [1, 2)*/

        /* now approximate log10 from the log2 integer part and an expansion of ln around 1.5*/
        f64Temp = uFloatConversion.FLOAT;
        f64Temp -= 1.5;
 80055ea:	eeb7 3b08 	vmov.f64	d3, #120	; 0x3fc00000  1.5
        s64ExponentialValue = (int64_t) (f64Temp2);

        /* now we want to compute 10^s64ExponentialValue but we want to be sure it won't overflow*/
        f64Temp = f64Temp2;
        f64Temp *= 3.321928094887362;
        f64Temp += 0.5;
 80055ee:	eeb6 ab00 	vmov.f64	d10, #96	; 0x3f000000  0.5
        if(0.0 > f64Value)
 80055f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            f64ValueTemp -= f64Value;
 80055f6:	ed9f 4ba2 	vldr	d4, [pc, #648]	; 8005880 <Conv__enNumber2String_Exponential+0x2f0>
            boNegative = TRUE;
 80055fa:	bf44      	itt	mi
 80055fc:	2201      	movmi	r2, #1
            f64ValueTemp -= f64Value;
 80055fe:	eeb1 8b40 	vnegmi.f64	d8, d0
            boNegative = FALSE;
 8005602:	920c      	str	r2, [sp, #48]	; 0x30
            uxPrec = CONV_DEFAULT_FLOAT_PRECISION;
 8005604:	f418 6280 	ands.w	r2, r8, #1024	; 0x400
        u64Temp2 |= u64TempShift2;
 8005608:	ee18 0a10 	vmov	r0, s16
            uxPrec = CONV_DEFAULT_FLOAT_PRECISION;
 800560c:	920d      	str	r2, [sp, #52]	; 0x34
        u64Temp &= u64TempShift;
 800560e:	ee18 2a90 	vmov	r2, s17
            uxPrec = CONV_DEFAULT_FLOAT_PRECISION;
 8005612:	bf08      	it	eq
 8005614:	2306      	moveq	r3, #6
        u64Temp &= u64TempShift;
 8005616:	f3c2 0613 	ubfx	r6, r2, #0, #20
        u64TempLong &= 0x07FFULL;
 800561a:	f3c2 520a 	ubfx	r2, r2, #20, #11
            uxPrec = CONV_DEFAULT_FLOAT_PRECISION;
 800561e:	930b      	str	r3, [sp, #44]	; 0x2c
        u64Temp2 |= u64TempShift2;
 8005620:	f046 517f 	orr.w	r1, r6, #1069547520	; 0x3fc00000
        s64Exponential2 -= 1023;           /* effectively log2*/
 8005624:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
        u64Temp2 |= u64TempShift2;
 8005628:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
        f64Temp2 = (float64_t) s64Exponential2;
 800562c:	ee07 2a90 	vmov	s15, r2
        f64Temp = uFloatConversion.FLOAT;
 8005630:	ec41 0b16 	vmov	d6, r0, r1
        f64Temp -= 1.5;
 8005634:	ee36 6b43 	vsub.f64	d6, d6, d3
        f64Temp2 = (float64_t) s64Exponential2;
 8005638:	eeb8 7be7 	vcvt.f64.s32	d7, s15
        f64Temp2 += 0.1760912590558 ;
 800563c:	ed9f 9b92 	vldr	d9, [pc, #584]	; 8005888 <Conv__enNumber2String_Exponential+0x2f8>
        f64Temp2 += f64Temp;
 8005640:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8005890 <Conv__enNumber2String_Exponential+0x300>
 8005644:	eea6 9b04 	vfma.f64	d9, d6, d4
 8005648:	eea7 9b05 	vfma.f64	d9, d7, d5
        s64ExponentialValue = (int64_t) (f64Temp2);
 800564c:	ec51 0b19 	vmov	r0, r1, d9
 8005650:	f7fb fc22 	bl	8000e98 <__aeabi_d2lz>
 8005654:	9109      	str	r1, [sp, #36]	; 0x24
 8005656:	468b      	mov	fp, r1
 8005658:	4606      	mov	r6, r0
        f64Temp += 0.5;
 800565a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8005898 <Conv__enNumber2String_Exponential+0x308>
 800565e:	eea9 ab06 	vfma.f64	d10, d9, d6

        s64Exponential2Temp = (int64_t) (f64Temp);
 8005662:	ec51 0b1a 	vmov	r0, r1, d10
 8005666:	f7fb fc17 	bl	8000e98 <__aeabi_d2lz>
        f64DoubleZ2 = f64DoubleZ * f64DoubleZ;

        /* compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex*/
        f64DoubleDiv0 = f64DoubleZ2;
        f64DoubleDiv0 /= 14.0;
        f64DoubleDiv0 += 10.0;
 800566a:	eeb2 1b04 	vmov.f64	d1, #36	; 0x41200000  10.0

        f64DoubleDiv1 = f64DoubleZ2;
        f64DoubleDiv1 /= f64DoubleDiv0;
        f64DoubleDiv1 += 6.0;
 800566e:	eeb1 2b08 	vmov.f64	d2, #24	; 0x40c00000  6.0
        s64Exponential2Temp += 1023;
 8005672:	f200 32ff 	addw	r2, r0, #1023	; 0x3ff
        f64DoubleDiv2 -= f64DoubleZ;

        f64DoubleDiv3 = f64DoubleZ;
        f64DoubleDiv3 *= 2.0;
        f64DoubleDiv3 /= f64DoubleDiv2;
        f64DoubleDiv3 += 1.0;
 8005676:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
        uFloatConversion.UNSIGNED <<= 52ULL;
 800567a:	2000      	movs	r0, #0
 800567c:	0511      	lsls	r1, r2, #20

        uFloatConversion.FLOAT *= f64DoubleDiv3;

        /* correct for rounding errors*/
        if (f64Value < uFloatConversion.FLOAT)
 800567e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        f64Temp *= 0.6931471805599453;
 8005680:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80058a0 <Conv__enNumber2String_Exponential+0x310>
        f64DoubleZ = f64Temp2 - f64Temp;
 8005684:	ed9f 3b88 	vldr	d3, [pc, #544]	; 80058a8 <Conv__enNumber2String_Exponential+0x318>
        f64DoubleDiv0 += 10.0;
 8005688:	ed9f 4b89 	vldr	d4, [pc, #548]	; 80058b0 <Conv__enNumber2String_Exponential+0x320>
        f64Temp *= 0.6931471805599453;
 800568c:	ee2a ab06 	vmul.f64	d10, d10, d6
        f64DoubleZ = f64Temp2 - f64Temp;
 8005690:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8005694:	eeb0 5b4a 	vmov.f64	d5, d10
 8005698:	eea9 6b43 	vfms.f64	d6, d9, d3
 800569c:	ee99 5b03 	vfnms.f64	d5, d9, d3
        f64DoubleDiv2 -= f64DoubleZ;
 80056a0:	ee36 6b0a 	vadd.f64	d6, d6, d10
        f64DoubleDiv3 *= 2.0;
 80056a4:	ee35 3b05 	vadd.f64	d3, d5, d5
        f64DoubleZ2 = f64DoubleZ * f64DoubleZ;
 80056a8:	ee25 5b05 	vmul.f64	d5, d5, d5
        f64DoubleDiv0 += 10.0;
 80056ac:	eea5 1b04 	vfma.f64	d1, d5, d4
        f64DoubleDiv1 /= f64DoubleDiv0;
 80056b0:	ee85 4b01 	vdiv.f64	d4, d5, d1
        f64DoubleDiv1 += 6.0;
 80056b4:	ee34 4b02 	vadd.f64	d4, d4, d2
        f64DoubleDiv2 /= f64DoubleDiv1;
 80056b8:	ee85 7b04 	vdiv.f64	d7, d5, d4
        f64DoubleDiv2 -= f64DoubleZ;
 80056bc:	ee36 6b07 	vadd.f64	d6, d6, d7
        f64DoubleDiv3 /= f64DoubleDiv2;
 80056c0:	ee83 7b06 	vdiv.f64	d7, d3, d6
        uFloatConversion.FLOAT *= f64DoubleDiv3;
 80056c4:	ec41 0b16 	vmov	d6, r0, r1
        f64DoubleDiv3 += 1.0;
 80056c8:	ee37 7b00 	vadd.f64	d7, d7, d0
        uFloatConversion.FLOAT *= f64DoubleDiv3;
 80056cc:	ee27 7b06 	vmul.f64	d7, d7, d6
        if (f64Value < uFloatConversion.FLOAT)
 80056d0:	eeb4 7bc8 	vcmpe.f64	d7, d8
 80056d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056d8:	dd07      	ble.n	80056ea <Conv__enNumber2String_Exponential+0x15a>
        {
          s64ExponentialValue--;
 80056da:	3e01      	subs	r6, #1
          uFloatConversion.FLOAT /= 10.0;
 80056dc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 80058b8 <Conv__enNumber2String_Exponential+0x328>
          s64ExponentialValue--;
 80056e0:	f16b 0200 	sbc.w	r2, fp, #0
          uFloatConversion.FLOAT /= 10.0;
 80056e4:	ee27 7b06 	vmul.f64	d7, d7, d6
          s64ExponentialValue--;
 80056e8:	9209      	str	r2, [sp, #36]	; 0x24
        }

        /* the exponent format is "%+03d" and largest f64Value is "307", so set aside 4-5 characters*/
        if((100 > s64ExponentialValue) && (-100 < s64ExponentialValue))
 80056ea:	f116 0163 	adds.w	r1, r6, #99	; 0x63
 80056ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f0:	f142 0200 	adc.w	r2, r2, #0
 80056f4:	29c7      	cmp	r1, #199	; 0xc7
 80056f6:	f172 0200 	sbcs.w	r2, r2, #0
        {
            uxMinWidth = 4U;
        }
        else
        {
            uxMinWidth = 5U;
 80056fa:	bf2c      	ite	cs
 80056fc:	f04f 0b05 	movcs.w	fp, #5
            uxMinWidth = 4U;
 8005700:	f04f 0b04 	movcc.w	fp, #4
        }

        /* in "%g" mode, "uxPrec" is the number of *significant figures* not decimals*/
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_ADAPT_EXP))
 8005704:	f418 6f00 	tst.w	r8, #2048	; 0x800
 8005708:	d00c      	beq.n	8005724 <Conv__enNumber2String_Exponential+0x194>
        {
            /* do we want to fall-back to "%f" mode?*/
            if (1e-4 > f64Value)
 800570a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80058c0 <Conv__enNumber2String_Exponential+0x330>
 800570e:	eeb4 8bc6 	vcmpe.f64	d8, d6
 8005712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005716:	f140 808c 	bpl.w	8005832 <Conv__enNumber2String_Exponential+0x2a2>
                }
            }
            else if(1e6 <= f64Value)
            {
                /* we use one sigfig for the whole part*/
                if ((0U < uxPrec) && (0UL != (uxflags & (UBase_t) CONV_enFLAGS_PRECISION)))
 800571a:	b11b      	cbz	r3, 8005724 <Conv__enNumber2String_Exponential+0x194>
 800571c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800571e:	2a00      	cmp	r2, #0
 8005720:	f040 809f 	bne.w	8005862 <Conv__enNumber2String_Exponential+0x2d2>
            }
        }

        /* will everything fit?*/
        uxFloatWidth = uxWidth;
        if (uxWidth > uxMinWidth)
 8005724:	45d3      	cmp	fp, sl
 8005726:	d37d      	bcc.n	8005824 <Conv__enNumber2String_Exponential+0x294>
            uxFloatWidth = 0U;
        }
        if ((0UL != (uxflags & (UBase_t) CONV_enFLAGS_LEFT)) && (0U != uxMinWidth))
        {
            /* if we're padding on the right, DON'T pad the floating part*/
            uxFloatWidth = 0U;
 8005728:	2200      	movs	r2, #0
        }

        /* rescale the float f64Value*/
        if (0LL != s64ExponentialValue)
 800572a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800572c:	4331      	orrs	r1, r6
 800572e:	d007      	beq.n	8005740 <Conv__enNumber2String_Exponential+0x1b0>
        {
            if(0.0f < uFloatConversion.FLOAT)
 8005730:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005738:	f340 8090 	ble.w	800585c <Conv__enNumber2String_Exponential+0x2cc>
            {
                f64Value /= uFloatConversion.FLOAT;
            }
            else if(0.0f > uFloatConversion.FLOAT)
            {
                f64Value /= uFloatConversion.FLOAT;
 800573c:	ee88 8b07 	vdiv.f64	d8, d8, d7
            }
        }

        /* output the floating part*/
        szStartIndex = (size_t) uxIndex;
        if(FALSE != boNegative)
 8005740:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005742:	b109      	cbz	r1, 8005748 <Conv__enNumber2String_Exponential+0x1b8>
        {
            f64ValueTemp = 0.0f;
            f64ValueTemp -= f64Value;
 8005744:	eeb1 8b48 	vneg.f64	d8, d8
        {
            f64ValueTemp = f64Value;
        }
        uxflagsTemp = uxflags & ~((UBase_t) CONV_enFLAGS_ADAPT_EXP);

        enErrorReg = Conv__enNumber2String_Float(pvfOut, pcBufferOut, f64ValueTemp, uxIndex, uxMaxLenght, puxBufOutLenght, uxFloatWidth, uxflagsTemp, uxPrec);
 8005748:	9303      	str	r3, [sp, #12]
        uxflagsTemp = uxflags & ~((UBase_t) CONV_enFLAGS_ADAPT_EXP);
 800574a:	f428 6300 	bic.w	r3, r8, #2048	; 0x800
        enErrorReg = Conv__enNumber2String_Float(pvfOut, pcBufferOut, f64ValueTemp, uxIndex, uxMaxLenght, puxBufOutLenght, uxFloatWidth, uxflagsTemp, uxPrec);
 800574e:	9201      	str	r2, [sp, #4]
 8005750:	eeb0 0b48 	vmov.f64	d0, d8
 8005754:	9302      	str	r3, [sp, #8]
 8005756:	4629      	mov	r1, r5
 8005758:	463b      	mov	r3, r7
 800575a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800575c:	4620      	mov	r0, r4
 800575e:	f8cd 9000 	str.w	r9, [sp]
 8005762:	f000 f8b5 	bl	80058d0 <Conv__enNumber2String_Float>
    }

    if((CONV_enERROR_OK == enErrorReg) && (FALSE == boTerminate))
 8005766:	2800      	cmp	r0, #0
 8005768:	d144      	bne.n	80057f4 <Conv__enNumber2String_Exponential+0x264>
    {
        uxIndex = *puxBufOutLenght;
 800576a:	f8d9 2000 	ldr.w	r2, [r9]
        /* output the exponent part*/
        if (0U == uxMinWidth)
 800576e:	f1bb 0f00 	cmp.w	fp, #0
 8005772:	d03f      	beq.n	80057f4 <Conv__enNumber2String_Exponential+0x264>
        {
            cCharTemp = 'E';
        }
        else
        {
            cCharTemp = 'e';
 8005774:	f018 0f20 	tst.w	r8, #32
        }
        enErrorReg = pvfOut(cCharTemp, pcBufferOut, uxIndex, uxMaxLenght);
 8005778:	463b      	mov	r3, r7
 800577a:	4629      	mov	r1, r5
 800577c:	920b      	str	r2, [sp, #44]	; 0x2c
 800577e:	bf14      	ite	ne
 8005780:	2045      	movne	r0, #69	; 0x45
 8005782:	2065      	moveq	r0, #101	; 0x65
 8005784:	47a0      	blx	r4
    }

    if((CONV_enERROR_OK == enErrorReg) && (FALSE == boTerminate))
 8005786:	bba8      	cbnz	r0, 80057f4 <Conv__enNumber2String_Exponential+0x264>
    {
        int64_t s64Temp;
        uxIndex++;
 8005788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800578a:	1c53      	adds	r3, r2, #1
        /* output the exponent f64Value*/
        if(0 > s64ExponentialValue)
 800578c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800578e:	2a00      	cmp	r2, #0
 8005790:	da01      	bge.n	8005796 <Conv__enNumber2String_Exponential+0x206>
        {
          s64Temp = 0;
          s64Temp -= s64ExponentialValue;
 8005792:	4276      	negs	r6, r6
          boNegative = TRUE;
 8005794:	2001      	movs	r0, #1
        {
          s64Temp = s64ExponentialValue;
          boNegative = FALSE;
        }
        uxflagsTemp = (UBase_t) CONV_enFLAGS_ZEROPAD | (UBase_t) CONV_enFLAGS_PLUS;
        enErrorReg = Conv__enNumber2String_Long(pvfOut, pcBufferOut, (UBase_t) s64Temp, uxIndex, uxMaxLenght, puxBufOutLenght,
 8005796:	f10b 31ff 	add.w	r1, fp, #4294967295
 800579a:	9004      	str	r0, [sp, #16]
 800579c:	2000      	movs	r0, #0
 800579e:	4632      	mov	r2, r6
 80057a0:	9102      	str	r1, [sp, #8]
 80057a2:	210a      	movs	r1, #10
 80057a4:	e9cd 1005 	strd	r1, r0, [sp, #20]
 80057a8:	2105      	movs	r1, #5
 80057aa:	4620      	mov	r0, r4
 80057ac:	9103      	str	r1, [sp, #12]
 80057ae:	4629      	mov	r1, r5
 80057b0:	e9cd 7900 	strd	r7, r9, [sp]
 80057b4:	f000 fa82 	bl	8005cbc <Conv__enNumber2String_Long>
                                                uxMinWidth-1U, uxflagsTemp, boNegative, (UBase_t) 10U, (UBase_t) 0U);
    }
    if((CONV_enERROR_OK == enErrorReg) && (FALSE == boTerminate))
 80057b8:	b9e0      	cbnz	r0, 80057f4 <Conv__enNumber2String_Exponential+0x264>
    {
        uxIndex = *puxBufOutLenght;
        /* might need to right-pad spaces*/
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_LEFT))
 80057ba:	f018 0f02 	tst.w	r8, #2
        uxIndex = *puxBufOutLenght;
 80057be:	f8d9 6000 	ldr.w	r6, [r9]
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_LEFT))
 80057c2:	d00e      	beq.n	80057e2 <Conv__enNumber2String_Exponential+0x252>
        {
            while (((uxIndex - szStartIndex) < uxWidth) && (CONV_enERROR_OK == enErrorReg))
 80057c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c6:	eba6 0803 	sub.w	r8, r6, r3
 80057ca:	e008      	b.n	80057de <Conv__enNumber2String_Exponential+0x24e>
            {
                enErrorReg = pvfOut(' ', pcBufferOut, uxIndex, uxMaxLenght);
 80057cc:	4632      	mov	r2, r6
 80057ce:	463b      	mov	r3, r7
 80057d0:	4629      	mov	r1, r5
 80057d2:	2020      	movs	r0, #32
            while (((uxIndex - szStartIndex) < uxWidth) && (CONV_enERROR_OK == enErrorReg))
 80057d4:	f108 0801 	add.w	r8, r8, #1
                if(CONV_enERROR_OK == enErrorReg)
                {
                    uxIndex++;
 80057d8:	3601      	adds	r6, #1
                enErrorReg = pvfOut(' ', pcBufferOut, uxIndex, uxMaxLenght);
 80057da:	47a0      	blx	r4
                if(CONV_enERROR_OK == enErrorReg)
 80057dc:	b950      	cbnz	r0, 80057f4 <Conv__enNumber2String_Exponential+0x264>
            while (((uxIndex - szStartIndex) < uxWidth) && (CONV_enERROR_OK == enErrorReg))
 80057de:	45c2      	cmp	sl, r8
 80057e0:	d8f4      	bhi.n	80057cc <Conv__enNumber2String_Exponential+0x23c>
            }
        }
    }
    if((CONV_enERROR_OK == enErrorReg) && (FALSE == boTerminate))
    {
        *puxBufOutLenght = (UBase_t) uxIndex;
 80057e2:	2000      	movs	r0, #0
 80057e4:	f8c9 6000 	str.w	r6, [r9]
    }

    return (enErrorReg);
}
 80057e8:	b00f      	add	sp, #60	; 0x3c
 80057ea:	ecbd 8b06 	vpop	{d8-d10}
 80057ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f2:	2001      	movs	r0, #1
 80057f4:	b00f      	add	sp, #60	; 0x3c
 80057f6:	ecbd 8b06 	vpop	{d8-d10}
 80057fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            enErrorReg = Conv__enNumber2String_Float(pvfOut, pcBufferOut, f64Value, uxIndex, uxMaxLenght, puxBufOutLenght, uxWidth, uxflags, uxPrec);
 80057fe:	eeb0 0b48 	vmov.f64	d0, d8
 8005802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005804:	4629      	mov	r1, r5
 8005806:	4620      	mov	r0, r4
 8005808:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
 800580c:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
 8005810:	e9cd 8320 	strd	r8, r3, [sp, #128]	; 0x80
 8005814:	463b      	mov	r3, r7
}
 8005816:	b00f      	add	sp, #60	; 0x3c
 8005818:	ecbd 8b06 	vpop	{d8-d10}
 800581c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            enErrorReg = Conv__enNumber2String_Float(pvfOut, pcBufferOut, f64Value, uxIndex, uxMaxLenght, puxBufOutLenght, uxWidth, uxflags, uxPrec);
 8005820:	f000 b856 	b.w	80058d0 <Conv__enNumber2String_Float>
            uxFloatWidth = 0U;
 8005824:	f018 0f02 	tst.w	r8, #2
            uxFloatWidth -= uxMinWidth;
 8005828:	ebaa 020b 	sub.w	r2, sl, fp
            uxFloatWidth = 0U;
 800582c:	bf18      	it	ne
 800582e:	2200      	movne	r2, #0
 8005830:	e77b      	b.n	800572a <Conv__enNumber2String_Exponential+0x19a>
            else if(1e6 <= f64Value)
 8005832:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80058c8 <Conv__enNumber2String_Exponential+0x338>
 8005836:	eeb4 8bc6 	vcmpe.f64	d8, d6
 800583a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583e:	f6bf af6c 	bge.w	800571a <Conv__enNumber2String_Exponential+0x18a>
                if ((int64_t) uxPrec > s64ExponentialValue)
 8005842:	429e      	cmp	r6, r3
 8005844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005846:	f172 0200 	sbcs.w	r2, r2, #0
 800584a:	db0c      	blt.n	8005866 <Conv__enNumber2String_Exponential+0x2d6>
                    uxPrec = 0U;
 800584c:	2300      	movs	r3, #0
                s64ExponentialValue = 0;
 800584e:	2600      	movs	r6, #0
                uxflags |= (UBase_t) CONV_enFLAGS_PRECISION;   /* make sure _ftoa respects precision*/
 8005850:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
            uxFloatWidth = 0U;
 8005854:	4652      	mov	r2, sl
                uxMinWidth = 0U;
 8005856:	46b3      	mov	fp, r6
                s64ExponentialValue = 0;
 8005858:	9609      	str	r6, [sp, #36]	; 0x24
 800585a:	e771      	b.n	8005740 <Conv__enNumber2String_Exponential+0x1b0>
            else if(0.0f > uFloatConversion.FLOAT)
 800585c:	f57f af70 	bpl.w	8005740 <Conv__enNumber2String_Exponential+0x1b0>
 8005860:	e76c      	b.n	800573c <Conv__enNumber2String_Exponential+0x1ac>
                    uxPrec -= 1U;
 8005862:	3b01      	subs	r3, #1
 8005864:	e75e      	b.n	8005724 <Conv__enNumber2String_Exponential+0x194>
                    uxPrec -= (UBase_t) s64ExponentialValue;
 8005866:	3b01      	subs	r3, #1
                    uxPrec -= 1UL;
 8005868:	1b9b      	subs	r3, r3, r6
 800586a:	e7f0      	b.n	800584e <Conv__enNumber2String_Exponential+0x2be>
 800586c:	f3af 8000 	nop.w
 8005870:	ffffffff 	.word	0xffffffff
 8005874:	ffefffff 	.word	0xffefffff
 8005878:	ffffffff 	.word	0xffffffff
 800587c:	7fefffff 	.word	0x7fefffff
 8005880:	636f4361 	.word	0x636f4361
 8005884:	3fd287a7 	.word	0x3fd287a7
 8005888:	8b60c8b3 	.word	0x8b60c8b3
 800588c:	3fc68a28 	.word	0x3fc68a28
 8005890:	509f79fb 	.word	0x509f79fb
 8005894:	3fd34413 	.word	0x3fd34413
 8005898:	0979a371 	.word	0x0979a371
 800589c:	400a934f 	.word	0x400a934f
 80058a0:	fefa39ef 	.word	0xfefa39ef
 80058a4:	3fe62e42 	.word	0x3fe62e42
 80058a8:	bbb55516 	.word	0xbbb55516
 80058ac:	40026bb1 	.word	0x40026bb1
 80058b0:	92492492 	.word	0x92492492
 80058b4:	3fb24924 	.word	0x3fb24924
 80058b8:	9999999a 	.word	0x9999999a
 80058bc:	3fb99999 	.word	0x3fb99999
 80058c0:	eb1c432d 	.word	0xeb1c432d
 80058c4:	3f1a36e2 	.word	0x3f1a36e2
 80058c8:	00000000 	.word	0x00000000
 80058cc:	412e8480 	.word	0x412e8480

080058d0 <Conv__enNumber2String_Float>:


#define FLOAT_PRECISION_MAX (14U)
CONV_nERROR Conv__enNumber2String_Float(CONV_OUT_t pvfOut, char* pcBufferOut, float64_t f64Value, UBase_t uxIndex,
                                        UBase_t uxMaxLenght, UBase_t* puxBufOutLenght, UBase_t uxWidth, UBase_t uxflags, UBase_t uxPrec)
{
 80058d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d4:	ed2d 8b08 	vpush	{d8-d11}
 80058d8:	b0b5      	sub	sp, #212	; 0xd4
 80058da:	468b      	mov	fp, r1
 80058dc:	4606      	mov	r6, r0
 80058de:	ee0b 2a10 	vmov	s22, r2
 80058e2:	930a      	str	r3, [sp, #40]	; 0x28
    /* powers of 10*/
    const float64_t f64Pow10[FLOAT_PRECISION_MAX] =
 80058e4:	2270      	movs	r2, #112	; 0x70
{
 80058e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80058e8:	eeb0 8b40 	vmov.f64	d8, d0
 80058ec:	9c46      	ldr	r4, [sp, #280]	; 0x118
 80058ee:	9308      	str	r3, [sp, #32]
 80058f0:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80058f2:	9009      	str	r0, [sp, #36]	; 0x24
    const float64_t f64Pow10[FLOAT_PRECISION_MAX] =
 80058f4:	a818      	add	r0, sp, #96	; 0x60
 80058f6:	49a4      	ldr	r1, [pc, #656]	; (8005b88 <Conv__enNumber2String_Float+0x2b8>)
{
 80058f8:	9d49      	ldr	r5, [sp, #292]	; 0x124
 80058fa:	940b      	str	r4, [sp, #44]	; 0x2c
 80058fc:	9307      	str	r3, [sp, #28]
    const float64_t f64Pow10[FLOAT_PRECISION_MAX] =
 80058fe:	f000 fbeb 	bl	80060d8 <memcpy>
    CONV_nERROR enErrorReg;
    boolean_t boTerminate;

    boTerminate = FALSE;
    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pvfOut) || (0UL == (uintptr_t) pcBufferOut) || (0UL == (uintptr_t) puxBufOutLenght))
 8005902:	2c00      	cmp	r4, #0
 8005904:	bf18      	it	ne
 8005906:	f1bb 0f00 	cmpne.w	fp, #0
 800590a:	d030      	beq.n	800596e <Conv__enNumber2String_Float+0x9e>
 800590c:	fab6 f386 	clz	r3, r6
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	b366      	cbz	r6, 800596e <Conv__enNumber2String_Float+0x9e>
        enErrorReg = CONV_enERROR_POINTER;
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        /* test for special values*/
        if (f64Value < -DBL_MAX)
 8005914:	ed9f 7b94 	vldr	d7, [pc, #592]	; 8005b68 <Conv__enNumber2String_Float+0x298>
 8005918:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005920:	f100 8105 	bmi.w	8005b2e <Conv__enNumber2String_Float+0x25e>
        char* cFni = "fni";
        char* cFni_ = "fni+";
        char* cCorrect;
        UBase_t  uxLengthIn;

        if(f64Value > DBL_MAX)
 8005924:	ed9f 7b92 	vldr	d7, [pc, #584]	; 8005b70 <Conv__enNumber2String_Float+0x2a0>
 8005928:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005930:	dd23      	ble.n	800597a <Conv__enNumber2String_Float+0xaa>
            else
            {
                uxLengthIn = 3U;
                cCorrect = cFni;
            }
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, cCorrect, uxIndex, uxMaxLenght, uxLengthIn, puxBufOutLenght, uxWidth, uxflags);
 8005932:	9a07      	ldr	r2, [sp, #28]
 8005934:	4659      	mov	r1, fp
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	9204      	str	r2, [sp, #16]
            if(0U != (uxflags & (UBase_t) CONV_enFLAGS_PLUS))
 800593a:	f002 0204 	and.w	r2, r2, #4
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, cCorrect, uxIndex, uxMaxLenght, uxLengthIn, puxBufOutLenght, uxWidth, uxflags);
 800593e:	9303      	str	r3, [sp, #12]
                uxLengthIn = 3U;
 8005940:	2a00      	cmp	r2, #0
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, cCorrect, uxIndex, uxMaxLenght, uxLengthIn, puxBufOutLenght, uxWidth, uxflags);
 8005942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005946:	9200      	str	r2, [sp, #0]
                uxLengthIn = 3U;
 8005948:	bf14      	ite	ne
 800594a:	2204      	movne	r2, #4
 800594c:	2203      	moveq	r2, #3
 800594e:	4c8f      	ldr	r4, [pc, #572]	; (8005b8c <Conv__enNumber2String_Float+0x2bc>)
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, cCorrect, uxIndex, uxMaxLenght, uxLengthIn, puxBufOutLenght, uxWidth, uxflags);
 8005950:	9302      	str	r3, [sp, #8]
 8005952:	ee1b 3a10 	vmov	r3, s22
 8005956:	9201      	str	r2, [sp, #4]
                uxLengthIn = 3U;
 8005958:	4a8d      	ldr	r2, [pc, #564]	; (8005b90 <Conv__enNumber2String_Float+0x2c0>)
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, cCorrect, uxIndex, uxMaxLenght, uxLengthIn, puxBufOutLenght, uxWidth, uxflags);
 800595a:	bf18      	it	ne
 800595c:	4622      	movne	r2, r4
 800595e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005960:	f000 fa96 	bl	8005e90 <Conv__enOutInversion>
            }
        }
        enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, pvBufferIn, uxIndex, uxMaxLenght, szLength, puxBufOutLenght, uxWidth, uxflags);
    }
    return (enErrorReg);
}
 8005964:	b035      	add	sp, #212	; 0xd4
 8005966:	ecbd 8b08 	vpop	{d8-d11}
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	2001      	movs	r0, #1
 8005970:	b035      	add	sp, #212	; 0xd4
 8005972:	ecbd 8b08 	vpop	{d8-d11}
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(f64Value < -CONV_MAX_VALUE_FLOAT)
 800597a:	ed9f 7b7f 	vldr	d7, [pc, #508]	; 8005b78 <Conv__enNumber2String_Float+0x2a8>
 800597e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	f100 80bd 	bmi.w	8005b04 <Conv__enNumber2String_Float+0x234>
      if(f64Value > CONV_MAX_VALUE_FLOAT)
 800598a:	ed9f 7b7d 	vldr	d7, [pc, #500]	; 8005b80 <Conv__enNumber2String_Float+0x2b0>
 800598e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005996:	f300 80b5 	bgt.w	8005b04 <Conv__enNumber2String_Float+0x234>
        if(0.0 > f64Value )
 800599a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            uxNegative = 1U;
 80059a2:	bf44      	itt	mi
 80059a4:	2301      	movmi	r3, #1
            f64ValueTemp -= f64Value;
 80059a6:	eeb1 8b48 	vnegmi.f64	d8, d8
        uxNegative = 0U;
 80059aa:	930f      	str	r3, [sp, #60]	; 0x3c
        if(0UL == (uxflags & (UBase_t) CONV_enFLAGS_PRECISION))
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	f413 6480 	ands.w	r4, r3, #1024	; 0x400
 80059b2:	f000 8145 	beq.w	8005c40 <Conv__enNumber2String_Float+0x370>
        while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (FLOAT_PRECISION_MAX <= uxPrec))
 80059b6:	2d0d      	cmp	r5, #13
 80059b8:	f240 817c 	bls.w	8005cb4 <Conv__enNumber2String_Float+0x3e4>
 80059bc:	ab10      	add	r3, sp, #64	; 0x40
 80059be:	2400      	movs	r4, #0
            pvBufferIn[szLength] = '0';
 80059c0:	2230      	movs	r2, #48	; 0x30
 80059c2:	930c      	str	r3, [sp, #48]	; 0x30
            szLength++;
 80059c4:	3401      	adds	r4, #1
            uxPrec--;
 80059c6:	3d01      	subs	r5, #1
            pvBufferIn[szLength] = '0';
 80059c8:	f803 2b01 	strb.w	r2, [r3], #1
        while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (FLOAT_PRECISION_MAX <= uxPrec))
 80059cc:	2c1f      	cmp	r4, #31
 80059ce:	d801      	bhi.n	80059d4 <Conv__enNumber2String_Float+0x104>
 80059d0:	2d0d      	cmp	r5, #13
 80059d2:	d8f7      	bhi.n	80059c4 <Conv__enNumber2String_Float+0xf4>
        s64ValueComplete = (int64_t) f64Value;
 80059d4:	ec51 0b18 	vmov	r0, r1, d8
 80059d8:	f7fb fa5e 	bl	8000e98 <__aeabi_d2lz>
 80059dc:	4689      	mov	r9, r1
 80059de:	4606      	mov	r6, r0
        f64ValueTemp2 = (float64_t) s64ValueComplete;
 80059e0:	f7fb f9c4 	bl	8000d6c <__aeabi_l2d>
        f64ValueTemp *= f64Pow10[uxPrec];
 80059e4:	ab34      	add	r3, sp, #208	; 0xd0
        s64ValueComplete = (int64_t) f64Value;
 80059e6:	464f      	mov	r7, r9
        f64ValueTemp *= f64Pow10[uxPrec];
 80059e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
        f64ValueTemp -= f64ValueTemp2;
 80059ec:	ec41 0b17 	vmov	d7, r0, r1
 80059f0:	ee38 9b47 	vsub.f64	d9, d8, d7
        f64ValueTemp *= f64Pow10[uxPrec];
 80059f4:	ed13 ab1c 	vldr	d10, [r3, #-112]	; 0xffffff90
 80059f8:	ee2a 9b09 	vmul.f64	d9, d10, d9
        u64Fractional = (uint64_t) f64ValueTemp;
 80059fc:	ec51 0b19 	vmov	r0, r1, d9
 8005a00:	f7fb fa62 	bl	8000ec8 <__aeabi_d2ulz>
 8005a04:	4680      	mov	r8, r0
 8005a06:	900e      	str	r0, [sp, #56]	; 0x38
        f64Diff -= (float64_t) u64Fractional;
 8005a08:	910d      	str	r1, [sp, #52]	; 0x34
 8005a0a:	f7fb f9a7 	bl	8000d5c <__aeabi_ul2d>
        u64Fractional = (uint64_t) f64ValueTemp;
 8005a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        f64Diff -= (float64_t) u64Fractional;
 8005a10:	ec41 0b17 	vmov	d7, r0, r1
 8005a14:	ee39 9b47 	vsub.f64	d9, d9, d7
        u64Fractional = (uint64_t) f64ValueTemp;
 8005a18:	469a      	mov	sl, r3
        if (0.5 < f64Diff)
 8005a1a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005a1e:	eeb4 9bc7 	vcmpe.f64	d9, d7
 8005a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a26:	f340 80fc 	ble.w	8005c22 <Conv__enNumber2String_Float+0x352>
            u64Fractional++;
 8005a2a:	f118 0801 	adds.w	r8, r8, #1
            if (u64Fractional >= (uint64_t) f64Pow10[uxPrec])
 8005a2e:	ec51 0b1a 	vmov	r0, r1, d10
            u64Fractional++;
 8005a32:	f143 0a00 	adc.w	sl, r3, #0
            if (u64Fractional >= (uint64_t) f64Pow10[uxPrec])
 8005a36:	f7fb fa47 	bl	8000ec8 <__aeabi_d2ulz>
 8005a3a:	4580      	cmp	r8, r0
 8005a3c:	eb7a 0301 	sbcs.w	r3, sl, r1
 8005a40:	f080 8102 	bcs.w	8005c48 <Conv__enNumber2String_Float+0x378>
        if (0U == uxPrec)
 8005a44:	2d00      	cmp	r5, #0
 8005a46:	f040 8084 	bne.w	8005b52 <Conv__enNumber2String_Float+0x282>
            f64Diff -= (float64_t) s64ValueComplete;
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	f7fb f98d 	bl	8000d6c <__aeabi_l2d>
 8005a52:	ec41 0b17 	vmov	d7, r0, r1
 8005a56:	ee38 8b47 	vsub.f64	d8, d8, d7
            if(0.5 < f64Diff)
 8005a5a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8005a5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a66:	f300 80f6 	bgt.w	8005c56 <Conv__enNumber2String_Float+0x386>
            if ((u64DiffCompare || u64DiffCompare2) && (0U != ((uint64_t) s64ValueComplete & 1UL)))
 8005a6a:	eeb4 8b47 	vcmp.f64	d8, d7
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	f000 80f0 	beq.w	8005c56 <Conv__enNumber2String_Float+0x386>
 8005a76:	1e65      	subs	r5, r4, #1
 8005a78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a7a:	441d      	add	r5, r3
        while ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005a7c:	2c20      	cmp	r4, #32
            s64ValueTemp %= 10;
 8005a7e:	4630      	mov	r0, r6
 8005a80:	4639      	mov	r1, r7
 8005a82:	f04f 020a 	mov.w	r2, #10
 8005a86:	f04f 0300 	mov.w	r3, #0
            szLength++;
 8005a8a:	f104 0401 	add.w	r4, r4, #1
        while ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005a8e:	f000 80a2 	beq.w	8005bd6 <Conv__enNumber2String_Float+0x306>
            s64ValueTemp %= 10;
 8005a92:	f7fb f999 	bl	8000dc8 <__aeabi_ldivmod>
            s64ValueComplete /= 10;
 8005a96:	4630      	mov	r0, r6
            s64ValueTemp += 48;
 8005a98:	f102 0630 	add.w	r6, r2, #48	; 0x30
            s64ValueComplete /= 10;
 8005a9c:	4639      	mov	r1, r7
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	220a      	movs	r2, #10
            pvBufferIn[szLength] = (char) s64ValueTemp;
 8005aa2:	f805 6f01 	strb.w	r6, [r5, #1]!
            s64ValueComplete /= 10;
 8005aa6:	f7fb f98f 	bl	8000dc8 <__aeabi_ldivmod>
            if (0 == s64ValueComplete)
 8005aaa:	ea51 0300 	orrs.w	r3, r1, r0
            s64ValueComplete /= 10;
 8005aae:	4606      	mov	r6, r0
 8005ab0:	460f      	mov	r7, r1
            if (0 == s64ValueComplete)
 8005ab2:	d1e3      	bne.n	8005a7c <Conv__enNumber2String_Float+0x1ac>
        if ((0U == (uxflags & (UBase_t) CONV_enFLAGS_LEFT) ) && (0U != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)))
 8005ab4:	9b07      	ldr	r3, [sp, #28]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	f000 8092 	beq.w	8005be4 <Conv__enNumber2String_Float+0x314>
        if ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005ac0:	2c20      	cmp	r4, #32
 8005ac2:	d00a      	beq.n	8005ada <Conv__enNumber2String_Float+0x20a>
            if (0U != uxNegative)
 8005ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f000 80cf 	beq.w	8005c6a <Conv__enNumber2String_Float+0x39a>
              pvBufferIn[szLength] = '-';
 8005acc:	222d      	movs	r2, #45	; 0x2d
              pvBufferIn[szLength] = ' ';
 8005ace:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8005ad2:	3401      	adds	r4, #1
 8005ad4:	446b      	add	r3, sp
 8005ad6:	f803 2c90 	strb.w	r2, [r3, #-144]
        enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, pvBufferIn, uxIndex, uxMaxLenght, szLength, puxBufOutLenght, uxWidth, uxflags);
 8005ada:	9b07      	ldr	r3, [sp, #28]
 8005adc:	4659      	mov	r1, fp
 8005ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	9b08      	ldr	r3, [sp, #32]
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae8:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8005aec:	e9dd 0409 	ldrd	r0, r4, [sp, #36]	; 0x24
 8005af0:	ee1b 3a10 	vmov	r3, s22
 8005af4:	9400      	str	r4, [sp, #0]
 8005af6:	f000 f9cb 	bl	8005e90 <Conv__enOutInversion>
}
 8005afa:	b035      	add	sp, #212	; 0xd4
 8005afc:	ecbd 8b08 	vpop	{d8-d11}
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          enErrorReg = Conv__enNumber2String_Exponential(pvfOut, pcBufferOut, f64Value, uxIndex, uxMaxLenght, puxBufOutLenght, uxWidth, uxflags, uxPrec);
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	eeb0 0b48 	vmov.f64	d0, d8
 8005b0a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b0c:	ee1b 2a10 	vmov	r2, s22
 8005b10:	9348      	str	r3, [sp, #288]	; 0x120
 8005b12:	4659      	mov	r1, fp
 8005b14:	9b08      	ldr	r3, [sp, #32]
 8005b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b18:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1c:	9549      	str	r5, [sp, #292]	; 0x124
 8005b1e:	9446      	str	r4, [sp, #280]	; 0x118
}
 8005b20:	b035      	add	sp, #212	; 0xd4
 8005b22:	ecbd 8b08 	vpop	{d8-d11}
 8005b26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
          enErrorReg = Conv__enNumber2String_Exponential(pvfOut, pcBufferOut, f64Value, uxIndex, uxMaxLenght, puxBufOutLenght, uxWidth, uxflags, uxPrec);
 8005b2a:	f7ff bd31 	b.w	8005590 <Conv__enNumber2String_Exponential>
            enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, "fni-", uxIndex, uxMaxLenght, 4U, puxBufOutLenght, uxWidth, uxflags);
 8005b2e:	9b07      	ldr	r3, [sp, #28]
 8005b30:	2404      	movs	r4, #4
 8005b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b34:	4659      	mov	r1, fp
 8005b36:	9304      	str	r3, [sp, #16]
 8005b38:	9202      	str	r2, [sp, #8]
 8005b3a:	9b08      	ldr	r3, [sp, #32]
 8005b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	ee1b 3a10 	vmov	r3, s22
 8005b44:	9200      	str	r2, [sp, #0]
 8005b46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b48:	4a12      	ldr	r2, [pc, #72]	; (8005b94 <Conv__enNumber2String_Float+0x2c4>)
 8005b4a:	9401      	str	r4, [sp, #4]
 8005b4c:	f000 f9a0 	bl	8005e90 <Conv__enOutInversion>
    if((CONV_enERROR_OK == enErrorReg) && (FALSE == boTerminate))
 8005b50:	e70e      	b.n	8005970 <Conv__enNumber2String_Float+0xa0>
        if (0U == uxPrec)
 8005b52:	46a1      	mov	r9, r4
 8005b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b56:	3c01      	subs	r4, #1
 8005b58:	eb05 0309 	add.w	r3, r5, r9
 8005b5c:	1915      	adds	r5, r2, r4
 8005b5e:	930e      	str	r3, [sp, #56]	; 0x38
 8005b60:	3b01      	subs	r3, #1
 8005b62:	930d      	str	r3, [sp, #52]	; 0x34
 8005b64:	e02c      	b.n	8005bc0 <Conv__enNumber2String_Float+0x2f0>
 8005b66:	bf00      	nop
 8005b68:	ffffffff 	.word	0xffffffff
 8005b6c:	ffefffff 	.word	0xffefffff
 8005b70:	ffffffff 	.word	0xffffffff
 8005b74:	7fefffff 	.word	0x7fefffff
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	c1cdcd65 	.word	0xc1cdcd65
 8005b80:	00000000 	.word	0x00000000
 8005b84:	41cdcd65 	.word	0x41cdcd65
 8005b88:	080073e0 	.word	0x080073e0
 8005b8c:	08007f70 	.word	0x08007f70
 8005b90:	08007f78 	.word	0x08007f78
 8005b94:	08007f7c 	.word	0x08007f7c
                u64ValueTemp %= 10U;
 8005b98:	f7fb f966 	bl	8000e68 <__aeabi_uldivmod>
                u64ValueTemp += 48U;
 8005b9c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
                u64Fractional /= 10U;
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4651      	mov	r1, sl
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	220a      	movs	r2, #10
                pvBufferIn[szLength] = (char) u64ValueTemp;
 8005ba8:	f805 cf01 	strb.w	ip, [r5, #1]!
                u64Fractional /= 10U;
 8005bac:	f7fb f95c 	bl	8000e68 <__aeabi_uldivmod>
                if (0U == u64Fractional)
 8005bb0:	f1b8 0f0a 	cmp.w	r8, #10
                u64Fractional /= 10U;
 8005bb4:	4680      	mov	r8, r0
                if (0U == u64Fractional)
 8005bb6:	f17a 0300 	sbcs.w	r3, sl, #0
                u64Fractional /= 10U;
 8005bba:	468a      	mov	sl, r1
                if (0U == u64Fractional)
 8005bbc:	d35a      	bcc.n	8005c74 <Conv__enNumber2String_Float+0x3a4>
                szLength++;
 8005bbe:	46a1      	mov	r9, r4
            while ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005bc0:	f1b9 0f20 	cmp.w	r9, #32
                u64ValueTemp %= 10U;
 8005bc4:	4640      	mov	r0, r8
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	f04f 020a 	mov.w	r2, #10
 8005bcc:	f04f 0300 	mov.w	r3, #0
                szLength++;
 8005bd0:	f109 0401 	add.w	r4, r9, #1
            while ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005bd4:	d1e0      	bne.n	8005b98 <Conv__enNumber2String_Float+0x2c8>
        if ((0U == (uxflags & (UBase_t) CONV_enFLAGS_LEFT) ) && (0U != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)))
 8005bd6:	9b07      	ldr	r3, [sp, #28]
 8005bd8:	2420      	movs	r4, #32
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	f47f af7b 	bne.w	8005ada <Conv__enNumber2String_Float+0x20a>
            if ((0U != uxWidth) && ((0U != uxNegative) || (0U != (uxflags & ((UBase_t) CONV_enFLAGS_PLUS | (UBase_t) CONV_enFLAGS_SPACE)))))
 8005be4:	9a08      	ldr	r2, [sp, #32]
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	f43f af6a 	beq.w	8005ac0 <Conv__enNumber2String_Float+0x1f0>
 8005bec:	9b07      	ldr	r3, [sp, #28]
 8005bee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005bf0:	f003 030c 	and.w	r3, r3, #12
 8005bf4:	430b      	orrs	r3, r1
 8005bf6:	d135      	bne.n	8005c64 <Conv__enNumber2String_Float+0x394>
            while ((szLength < uxWidth) && ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength))
 8005bf8:	9b08      	ldr	r3, [sp, #32]
 8005bfa:	42a3      	cmp	r3, r4
 8005bfc:	f67f af60 	bls.w	8005ac0 <Conv__enNumber2String_Float+0x1f0>
 8005c00:	2c1f      	cmp	r4, #31
 8005c02:	f63f af5d 	bhi.w	8005ac0 <Conv__enNumber2String_Float+0x1f0>
 8005c06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c08:	4619      	mov	r1, r3
 8005c0a:	1e63      	subs	r3, r4, #1
 8005c0c:	4413      	add	r3, r2
                pvBufferIn[szLength] = '0';
 8005c0e:	2230      	movs	r2, #48	; 0x30
                szLength++;
 8005c10:	3401      	adds	r4, #1
                pvBufferIn[szLength] = '0';
 8005c12:	f803 2f01 	strb.w	r2, [r3, #1]!
            while ((szLength < uxWidth) && ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength))
 8005c16:	428c      	cmp	r4, r1
 8005c18:	f4bf af52 	bcs.w	8005ac0 <Conv__enNumber2String_Float+0x1f0>
 8005c1c:	2c1f      	cmp	r4, #31
 8005c1e:	d9f7      	bls.n	8005c10 <Conv__enNumber2String_Float+0x340>
 8005c20:	e74e      	b.n	8005ac0 <Conv__enNumber2String_Float+0x1f0>
        else if (0.5 > f64Diff)
 8005c22:	f53f af0f 	bmi.w	8005a44 <Conv__enNumber2String_Float+0x174>
        else if ((0U == u64Fractional) || (0U != (u64Fractional & 1U)))
 8005c26:	ea53 0108 	orrs.w	r1, r3, r8
 8005c2a:	d004      	beq.n	8005c36 <Conv__enNumber2String_Float+0x366>
 8005c2c:	f008 0201 	and.w	r2, r8, #1
 8005c30:	2a00      	cmp	r2, #0
 8005c32:	f43f af07 	beq.w	8005a44 <Conv__enNumber2String_Float+0x174>
            u64Fractional++;
 8005c36:	f118 0801 	adds.w	r8, r8, #1
 8005c3a:	f143 0a00 	adc.w	sl, r3, #0
 8005c3e:	e701      	b.n	8005a44 <Conv__enNumber2String_Float+0x174>
 8005c40:	ab10      	add	r3, sp, #64	; 0x40
            uxPrec = CONV_DEFAULT_FLOAT_PRECISION;
 8005c42:	2506      	movs	r5, #6
 8005c44:	930c      	str	r3, [sp, #48]	; 0x30
 8005c46:	e6c5      	b.n	80059d4 <Conv__enNumber2String_Float+0x104>
                s64ValueComplete++;
 8005c48:	3601      	adds	r6, #1
                u64Fractional = 0U;
 8005c4a:	f04f 0800 	mov.w	r8, #0
                s64ValueComplete++;
 8005c4e:	f149 0700 	adc.w	r7, r9, #0
                u64Fractional = 0U;
 8005c52:	46c2      	mov	sl, r8
 8005c54:	e6f6      	b.n	8005a44 <Conv__enNumber2String_Float+0x174>
            if ((u64DiffCompare || u64DiffCompare2) && (0U != ((uint64_t) s64ValueComplete & 1UL)))
 8005c56:	07f1      	lsls	r1, r6, #31
 8005c58:	f57f af0d 	bpl.w	8005a76 <Conv__enNumber2String_Float+0x1a6>
                s64ValueComplete++;
 8005c5c:	3601      	adds	r6, #1
 8005c5e:	f147 0700 	adc.w	r7, r7, #0
 8005c62:	e708      	b.n	8005a76 <Conv__enNumber2String_Float+0x1a6>
                uxWidth--;
 8005c64:	1e53      	subs	r3, r2, #1
 8005c66:	9308      	str	r3, [sp, #32]
 8005c68:	e7c6      	b.n	8005bf8 <Conv__enNumber2String_Float+0x328>
            else if (0U != (uxflags & (UBase_t) CONV_enFLAGS_PLUS))
 8005c6a:	9b07      	ldr	r3, [sp, #28]
 8005c6c:	075a      	lsls	r2, r3, #29
 8005c6e:	d51c      	bpl.n	8005caa <Conv__enNumber2String_Float+0x3da>
              pvBufferIn[szLength] = '+';  /* ignore the space if the '+' exists*/
 8005c70:	222b      	movs	r2, #43	; 0x2b
 8005c72:	e72c      	b.n	8005ace <Conv__enNumber2String_Float+0x1fe>
            while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (0U < uxCounter))
 8005c74:	2c1f      	cmp	r4, #31
 8005c76:	d80e      	bhi.n	8005c96 <Conv__enNumber2String_Float+0x3c6>
 8005c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c7a:	4599      	cmp	r9, r3
 8005c7c:	d00b      	beq.n	8005c96 <Conv__enNumber2String_Float+0x3c6>
 8005c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                pvBufferIn[szLength] = '0';
 8005c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c82:	4499      	add	r9, r3
 8005c84:	2330      	movs	r3, #48	; 0x30
 8005c86:	e001      	b.n	8005c8c <Conv__enNumber2String_Float+0x3bc>
            while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (0U < uxCounter))
 8005c88:	4294      	cmp	r4, r2
 8005c8a:	d004      	beq.n	8005c96 <Conv__enNumber2String_Float+0x3c6>
                szLength++;
 8005c8c:	3401      	adds	r4, #1
                pvBufferIn[szLength] = '0';
 8005c8e:	f809 3f01 	strb.w	r3, [r9, #1]!
            while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (0U < uxCounter))
 8005c92:	2c1f      	cmp	r4, #31
 8005c94:	d9f8      	bls.n	8005c88 <Conv__enNumber2String_Float+0x3b8>
            if ((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength)
 8005c96:	2c20      	cmp	r4, #32
 8005c98:	d09d      	beq.n	8005bd6 <Conv__enNumber2String_Float+0x306>
                pvBufferIn[szLength] = '.';
 8005c9a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
 8005c9e:	222e      	movs	r2, #46	; 0x2e
                szLength++;
 8005ca0:	3401      	adds	r4, #1
                pvBufferIn[szLength] = '.';
 8005ca2:	446b      	add	r3, sp
 8005ca4:	f803 2c90 	strb.w	r2, [r3, #-144]
                szLength++;
 8005ca8:	e6e5      	b.n	8005a76 <Conv__enNumber2String_Float+0x1a6>
            else if (0U != (uxflags & (UBase_t) CONV_enFLAGS_SPACE))
 8005caa:	071b      	lsls	r3, r3, #28
 8005cac:	f57f af15 	bpl.w	8005ada <Conv__enNumber2String_Float+0x20a>
              pvBufferIn[szLength] = ' ';
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	e70c      	b.n	8005ace <Conv__enNumber2String_Float+0x1fe>
 8005cb4:	ab10      	add	r3, sp, #64	; 0x40
        while (((size_t) CONV_enBUFFER_SIZE_FLOAT > szLength) && (FLOAT_PRECISION_MAX <= uxPrec))
 8005cb6:	2400      	movs	r4, #0
 8005cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cba:	e68b      	b.n	80059d4 <Conv__enNumber2String_Float+0x104>

08005cbc <Conv__enNumber2String_Long>:


CONV_nERROR Conv__enNumber2String_Long(CONV_OUT_t pvfOut, char* pcBufferOut, UBase_t uxValue, UBase_t uxIndex,
                                       UBase_t uxMaxLenght, UBase_t* puxBufOutLenght, UBase_t uxWidth, UBase_t uxflags,
                                       boolean_t boNegative, UBase_t uxBase, UBase_t uxPrec)
{
 8005cbc:	b510      	push	{r4, lr}
 8005cbe:	b08a      	sub	sp, #40	; 0x28
    CONV_nERROR enErrorReg;
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cc0:	9300      	str	r3, [sp, #0]
{
 8005cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8005cc6:	9301      	str	r3, [sp, #4]
{
 8005cc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cca:	9302      	str	r3, [sp, #8]
{
 8005ccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cce:	9303      	str	r3, [sp, #12]
{
 8005cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cd2:	9304      	str	r3, [sp, #16]
{
 8005cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cd6:	9305      	str	r3, [sp, #20]
{
 8005cd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    enErrorReg =  Conv__enNumber2String_LongLong(pvfOut, pcBufferOut, (uint64_t) uxValue, uxIndex,
 8005cda:	9306      	str	r3, [sp, #24]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e9cd 3407 	strd	r3, r4, [sp, #28]
 8005ce2:	f000 f803 	bl	8005cec <Conv__enNumber2String_LongLong>
                                                 uxMaxLenght, puxBufOutLenght, uxWidth, uxflags,
                                                 boNegative, (uint64_t) uxBase, uxPrec);
    return (enErrorReg);
}
 8005ce6:	b00a      	add	sp, #40	; 0x28
 8005ce8:	bd10      	pop	{r4, pc}
 8005cea:	bf00      	nop

08005cec <Conv__enNumber2String_LongLong>:
#include <xUtils/Conversion/Conversion_Number2String/xHeader/Conversion_NumberFormat.h>

CONV_nERROR Conv__enNumber2String_LongLong(CONV_OUT_t pvfOut, char* pcBufferOut, uint64_t u64Value, UBase_t uxIndex,
                                           UBase_t uxMaxLenght, UBase_t* puxBufOutLenght, UBase_t uxWidth, UBase_t uxflags,
                                           boolean_t boNegative, uint64_t u64Base, UBase_t uxPrec)
{
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	b093      	sub	sp, #76	; 0x4c
 8005cf2:	461e      	mov	r6, r3
 8005cf4:	e9dd 7822 	ldrd	r7, r8, [sp, #136]	; 0x88
    uint8_t u8DigitTemp;
    UBase_t  uxLength;
    CONV_nERROR enErrorReg;

    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pvfOut) || (0UL == (uintptr_t) pcBufferOut ))
 8005cf8:	9008      	str	r0, [sp, #32]
 8005cfa:	b340      	cbz	r0, 8005d4e <Conv__enNumber2String_LongLong+0x62>
 8005cfc:	fab1 f481 	clz	r4, r1
 8005d00:	468b      	mov	fp, r1
 8005d02:	0964      	lsrs	r4, r4, #5
 8005d04:	b319      	cbz	r1, 8005d4e <Conv__enNumber2String_LongLong+0x62>
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        uxLength = 0U;
        /* no hash for 0 values*/
        if (0ULL == u64Value) { uxflags &= ~(UBase_t) CONV_enFLAGS_HASH; }
 8005d06:	ea52 0306 	orrs.w	r3, r2, r6
 8005d0a:	4615      	mov	r5, r2
 8005d0c:	d123      	bne.n	8005d56 <Conv__enNumber2String_LongLong+0x6a>
 8005d0e:	9b20      	ldr	r3, [sp, #128]	; 0x80

        /* write if precision != 0 and value is != 0*/
        if ((0U == (uxflags & (UBase_t) CONV_enFLAGS_PRECISION)) || (0ULL != u64Value))
 8005d10:	9a20      	ldr	r2, [sp, #128]	; 0x80
        if (0ULL == u64Value) { uxflags &= ~(UBase_t) CONV_enFLAGS_HASH; }
 8005d12:	f023 0310 	bic.w	r3, r3, #16
 8005d16:	9320      	str	r3, [sp, #128]	; 0x80
        if ((0U == (uxflags & (UBase_t) CONV_enFLAGS_PRECISION)) || (0ULL != u64Value))
 8005d18:	0553      	lsls	r3, r2, #21
 8005d1a:	d51c      	bpl.n	8005d56 <Conv__enNumber2String_LongLong+0x6a>
 8005d1c:	ab0a      	add	r3, sp, #40	; 0x28
 8005d1e:	9309      	str	r3, [sp, #36]	; 0x24
                uxLength++;
                u64Value /= u64Base;
            } while ((0UL != u64Value) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxLength));
        }

        enErrorReg = Conv__enNumber2String_Format(pvfOut, pcBufferOut, (char*)pu8Buffer, uxIndex, uxMaxLenght, uxLength, puxBufOutLenght, uxWidth, uxflags, boNegative, (UBase_t) u64Base, uxPrec);
 8005d20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d22:	4659      	mov	r1, fp
 8005d24:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8005d26:	9307      	str	r3, [sp, #28]
 8005d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d2a:	9503      	str	r5, [sp, #12]
 8005d2c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8005d2e:	9305      	str	r3, [sp, #20]
 8005d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d34:	9304      	str	r3, [sp, #16]
 8005d36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005d38:	9808      	ldr	r0, [sp, #32]
 8005d3a:	9706      	str	r7, [sp, #24]
 8005d3c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8005d40:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005d42:	9400      	str	r4, [sp, #0]
 8005d44:	f000 f8f2 	bl	8005f2c <Conv__enNumber2String_Format>
    }
    return (enErrorReg);
}
 8005d48:	b013      	add	sp, #76	; 0x4c
 8005d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        enErrorReg = CONV_enERROR_POINTER;
 8005d4e:	2001      	movs	r0, #1
}
 8005d50:	b013      	add	sp, #76	; 0x4c
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	9b20      	ldr	r3, [sp, #128]	; 0x80
                    u8DigitTemp -= (uint8_t) 10;
 8005d58:	2400      	movs	r4, #0
 8005d5a:	f013 0f20 	tst.w	r3, #32
 8005d5e:	ab0a      	add	r3, sp, #40	; 0x28
 8005d60:	bf14      	ite	ne
 8005d62:	f04f 0a41 	movne.w	sl, #65	; 0x41
 8005d66:	f04f 0a61 	moveq.w	sl, #97	; 0x61
 8005d6a:	4699      	mov	r9, r3
 8005d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6e:	f1aa 0a0a 	sub.w	sl, sl, #10
 8005d72:	fa5f fa8a 	uxtb.w	sl, sl
 8005d76:	e00a      	b.n	8005d8e <Conv__enNumber2String_LongLong+0xa2>
                uxLength++;
 8005d78:	3401      	adds	r4, #1
                pu8Buffer[uxLength] = u8DigitTemp + (uint8_t) cDigit ;
 8005d7a:	f809 cb01 	strb.w	ip, [r9], #1
            } while ((0UL != u64Value) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxLength));
 8005d7e:	2c1f      	cmp	r4, #31
 8005d80:	d8ce      	bhi.n	8005d20 <Conv__enNumber2String_LongLong+0x34>
 8005d82:	42bd      	cmp	r5, r7
 8005d84:	eb76 0308 	sbcs.w	r3, r6, r8
 8005d88:	d3ca      	bcc.n	8005d20 <Conv__enNumber2String_LongLong+0x34>
                    u8DigitTemp -= (uint8_t) 10;
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	460e      	mov	r6, r1
                u64TempReg %= u64Base;
 8005d8e:	4628      	mov	r0, r5
 8005d90:	4631      	mov	r1, r6
 8005d92:	463a      	mov	r2, r7
 8005d94:	4643      	mov	r3, r8
 8005d96:	f7fb f867 	bl	8000e68 <__aeabi_uldivmod>
                cDigit = (char) (u64TempReg);
 8005d9a:	b2d2      	uxtb	r2, r2
                if(10U > (uint8_t) cDigit)
 8005d9c:	2a09      	cmp	r2, #9
                pu8Buffer[uxLength] = u8DigitTemp + (uint8_t) cDigit ;
 8005d9e:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005da2:	eb02 0c0a 	add.w	ip, r2, sl
                if(10U > (uint8_t) cDigit)
 8005da6:	d8e7      	bhi.n	8005d78 <Conv__enNumber2String_LongLong+0x8c>
            } while ((0UL != u64Value) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxLength));
 8005da8:	42bd      	cmp	r5, r7
                pu8Buffer[uxLength] = u8DigitTemp + (uint8_t) cDigit ;
 8005daa:	f809 3b01 	strb.w	r3, [r9], #1
                uxLength++;
 8005dae:	f104 0401 	add.w	r4, r4, #1
            } while ((0UL != u64Value) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxLength));
 8005db2:	eb76 0308 	sbcs.w	r3, r6, r8
 8005db6:	d3b3      	bcc.n	8005d20 <Conv__enNumber2String_LongLong+0x34>
 8005db8:	2c1f      	cmp	r4, #31
 8005dba:	d9e6      	bls.n	8005d8a <Conv__enNumber2String_LongLong+0x9e>
 8005dbc:	e7b0      	b.n	8005d20 <Conv__enNumber2String_LongLong+0x34>
 8005dbe:	bf00      	nop

08005dc0 <CONV_enStringLength>:
    UBase_t uxCount;
    const char* pcStringReg;

    uxCount = 0UL;
    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pcString) || (0UL == (uintptr_t) puxLengthArg))
 8005dc0:	b1b0      	cbz	r0, 8005df0 <CONV_enStringLength+0x30>
 8005dc2:	b1a9      	cbz	r1, 8005df0 <CONV_enStringLength+0x30>
        enErrorReg = CONV_enERROR_POINTER;
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        pcStringReg = pcString;
        while((0U != (uint8_t) *pcStringReg) && (0UL < (UBase_t) uxMaxSize))
 8005dc4:	7803      	ldrb	r3, [r0, #0]
 8005dc6:	b1cb      	cbz	r3, 8005dfc <CONV_enStringLength+0x3c>
 8005dc8:	b1ea      	cbz	r2, 8005e06 <CONV_enStringLength+0x46>
 8005dca:	1c43      	adds	r3, r0, #1
{
 8005dcc:	b410      	push	{r4}
 8005dce:	e000      	b.n	8005dd2 <CONV_enStringLength+0x12>
        while((0U != (uint8_t) *pcStringReg) && (0UL < (UBase_t) uxMaxSize))
 8005dd0:	b182      	cbz	r2, 8005df4 <CONV_enStringLength+0x34>
        {
            pcStringReg += 1U;
 8005dd2:	469c      	mov	ip, r3
            uxMaxSize--;
 8005dd4:	3a01      	subs	r2, #1
        while((0U != (uint8_t) *pcStringReg) && (0UL < (UBase_t) uxMaxSize))
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	f89c 4000 	ldrb.w	r4, [ip]
 8005ddc:	2c00      	cmp	r4, #0
 8005dde:	d1f7      	bne.n	8005dd0 <CONV_enStringLength+0x10>
        }
        if(0UL == uxMaxSize)
 8005de0:	b142      	cbz	r2, 8005df4 <CONV_enStringLength+0x34>
            enErrorReg = CONV_enERROR_OUT_OF_RANGE;
        }
        else
        {
            uxCount = (UBase_t) pcStringReg;
            uxCount -= (UBase_t) pcString;
 8005de2:	ebac 0300 	sub.w	r3, ip, r0
    if(CONV_enERROR_OK == enErrorReg)
    {
        *puxLengthArg = (UBase_t) uxCount;
    }
    return (enErrorReg);
}
 8005de6:	f85d 4b04 	ldr.w	r4, [sp], #4
        *puxLengthArg = (UBase_t) uxCount;
 8005dea:	2000      	movs	r0, #0
 8005dec:	600b      	str	r3, [r1, #0]
}
 8005dee:	4770      	bx	lr
        enErrorReg = CONV_enERROR_POINTER;
 8005df0:	2001      	movs	r0, #1
 8005df2:	4770      	bx	lr
            enErrorReg = CONV_enERROR_OUT_OF_RANGE;
 8005df4:	2007      	movs	r0, #7
}
 8005df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dfa:	4770      	bx	lr
        if(0UL == uxMaxSize)
 8005dfc:	b11a      	cbz	r2, 8005e06 <CONV_enStringLength+0x46>
            uxCount -= (UBase_t) pcString;
 8005dfe:	1a03      	subs	r3, r0, r0
        *puxLengthArg = (UBase_t) uxCount;
 8005e00:	2000      	movs	r0, #0
 8005e02:	600b      	str	r3, [r1, #0]
 8005e04:	4770      	bx	lr
            enErrorReg = CONV_enERROR_OUT_OF_RANGE;
 8005e06:	2007      	movs	r0, #7
}
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop

08005e0c <Conv__enString2UInteger>:
    uint8_t  u8ValueAux;


    uxLength = 0UL;
    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pcString) || (0UL == (uintptr_t) pu64NumUnsigned) || (0UL == (uintptr_t) puxLength))
 8005e0c:	2a00      	cmp	r2, #0
 8005e0e:	bf18      	it	ne
 8005e10:	2900      	cmpne	r1, #0
 8005e12:	d037      	beq.n	8005e84 <Conv__enString2UInteger+0x78>
{
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if((0UL == (uintptr_t) pcString) || (0UL == (uintptr_t) pu64NumUnsigned) || (0UL == (uintptr_t) puxLength))
 8005e18:	fab0 f480 	clz	r4, r0
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	0964      	lsrs	r4, r4, #5
 8005e20:	b910      	cbnz	r0, 8005e28 <Conv__enString2UInteger+0x1c>
    {
        enErrorReg = CONV_enERROR_POINTER;
 8005e22:	2001      	movs	r0, #1
        *pu64NumUnsigned = (uint64_t) u64NumUnsignedTemp;
        *puxLength = (UBase_t) uxLength;
    }

    return (enErrorReg);
}
 8005e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        enDigit = Conv__enIsDigit(**pcString);
 8005e28:	6803      	ldr	r3, [r0, #0]
 8005e2a:	460d      	mov	r5, r1
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	7818      	ldrb	r0, [r3, #0]
 8005e30:	f7ff fb9a 	bl	8005568 <Conv__enIsDigit>
        while (CONV_enERROR_OK == enDigit)
 8005e34:	4680      	mov	r8, r0
 8005e36:	bb38      	cbnz	r0, 8005e88 <Conv__enString2UInteger+0x7c>
        u64NumUnsignedTemp = 0ULL;
 8005e38:	4604      	mov	r4, r0
 8005e3a:	4681      	mov	r9, r0
            u8ValueAux = (uint8_t) (**pcString);
 8005e3c:	683a      	ldr	r2, [r7, #0]
            u64NumUnsignedTemp *= 10U;
 8005e3e:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8005e42:	00a3      	lsls	r3, r4, #2
            uxLength++;
 8005e44:	f108 0801 	add.w	r8, r8, #1
            u8ValueAux = (uint8_t) (**pcString);
 8005e48:	4611      	mov	r1, r2
            u64NumUnsignedTemp *= 10U;
 8005e4a:	ea4c 7c94 	orr.w	ip, ip, r4, lsr #30
 8005e4e:	191c      	adds	r4, r3, r4
            u8ValueAux = (uint8_t) (**pcString);
 8005e50:	f811 3b01 	ldrb.w	r3, [r1], #1
            u64NumUnsignedTemp *= 10U;
 8005e54:	eb49 0c0c 	adc.w	ip, r9, ip
 8005e58:	1924      	adds	r4, r4, r4
            u8ValueAux -= (uint8_t) '0';
 8005e5a:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
            *pcString += 1U;
 8005e5e:	6039      	str	r1, [r7, #0]
            u64NumUnsignedTemp *= 10U;
 8005e60:	eb4c 0c0c 	adc.w	ip, ip, ip
            enDigit = Conv__enIsDigit(**pcString);
 8005e64:	7850      	ldrb	r0, [r2, #1]
            u64NumUnsignedTemp += (uint64_t) u8ValueAux;
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	191c      	adds	r4, r3, r4
 8005e6a:	f14c 0900 	adc.w	r9, ip, #0
            enDigit = Conv__enIsDigit(**pcString);
 8005e6e:	f7ff fb7b 	bl	8005568 <Conv__enIsDigit>
        while (CONV_enERROR_OK == enDigit)
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0e2      	beq.n	8005e3c <Conv__enString2UInteger+0x30>
        *puxLength = (UBase_t) uxLength;
 8005e76:	2000      	movs	r0, #0
        *pu64NumUnsigned = (uint64_t) u64NumUnsignedTemp;
 8005e78:	e9c5 4900 	strd	r4, r9, [r5]
        *puxLength = (UBase_t) uxLength;
 8005e7c:	f8c6 8000 	str.w	r8, [r6]
}
 8005e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        enErrorReg = CONV_enERROR_POINTER;
 8005e84:	2001      	movs	r0, #1
}
 8005e86:	4770      	bx	lr
    uxLength = 0UL;
 8005e88:	46a0      	mov	r8, r4
        u64NumUnsignedTemp = 0ULL;
 8005e8a:	46a1      	mov	r9, r4
 8005e8c:	e7f3      	b.n	8005e76 <Conv__enString2UInteger+0x6a>
 8005e8e:	bf00      	nop

08005e90 <Conv__enOutInversion>:
    }
    return (enErrorReg);
}

CONV_nERROR Conv__enOutInversion(CONV_OUT_t pvfOut, char* pvBufferOut, const char* pvBufferIn, UBase_t uxIndex, UBase_t uxMaxLenght, UBase_t uxBufInLenght, UBase_t* puxBufOutLenght, UBase_t uxWidth, UBase_t uxflags)
{
 8005e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    UBase_t uxPos;
    const char* pcBufferTemp;
    UBase_t uxStartIndex;

    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pvBufferOut) || (0UL == (uintptr_t) pvBufferIn) || (0UL == (uintptr_t) pvfOut))
 8005e98:	b119      	cbz	r1, 8005ea2 <Conv__enOutInversion+0x12>
 8005e9a:	4617      	mov	r7, r2
 8005e9c:	b10a      	cbz	r2, 8005ea2 <Conv__enOutInversion+0x12>
 8005e9e:	4605      	mov	r5, r0
 8005ea0:	b910      	cbnz	r0, 8005ea8 <Conv__enOutInversion+0x18>
    {
        enErrorReg = CONV_enERROR_POINTER;
 8005ea2:	2001      	movs	r0, #1
    if(CONV_enERROR_OK == enErrorReg)
    {
        *puxBufOutLenght = (UBase_t) uxIndex;
    }
    return (enErrorReg);
}
 8005ea4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uxStartIndex = uxIndex;
 8005ea8:	461e      	mov	r6, r3
        if ((0U == (uxflags & (UBase_t) CONV_enFLAGS_LEFT)) && (0U == (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)))
 8005eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eac:	468a      	mov	sl, r1
 8005eae:	079a      	lsls	r2, r3, #30
 8005eb0:	d029      	beq.n	8005f06 <Conv__enOutInversion+0x76>
            for (uxPos = uxBufInLenght; uxPos < uxWidth; uxPos++) /*hace un ciclo burbuja optimizado*/
 8005eb2:	46b0      	mov	r8, r6
        pcBufferTemp += uxBufInLenght;
 8005eb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eb6:	18fc      	adds	r4, r7, r3
        while(0U != uxBufInLenght)
 8005eb8:	b163      	cbz	r3, 8005ed4 <Conv__enOutInversion+0x44>
 8005eba:	eb04 0b08 	add.w	fp, r4, r8
 8005ebe:	ebab 0204 	sub.w	r2, fp, r4
            pvfOut(*pcBufferTemp, pvBufferOut, uxIndex, uxMaxLenght);
 8005ec2:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	4651      	mov	r1, sl
 8005eca:	47a8      	blx	r5
        while(0U != uxBufInLenght)
 8005ecc:	42a7      	cmp	r7, r4
 8005ece:	d1f6      	bne.n	8005ebe <Conv__enOutInversion+0x2e>
            uxIndex++;
 8005ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ed2:	4498      	add	r8, r3
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_LEFT))
 8005ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed6:	079b      	lsls	r3, r3, #30
 8005ed8:	d50f      	bpl.n	8005efa <Conv__enOutInversion+0x6a>
            while ((uxIndex - uxStartIndex) < uxWidth)
 8005eda:	eba8 0606 	sub.w	r6, r8, r6
 8005ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ee0:	429e      	cmp	r6, r3
 8005ee2:	d20a      	bcs.n	8005efa <Conv__enOutInversion+0x6a>
 8005ee4:	461c      	mov	r4, r3
 8005ee6:	3601      	adds	r6, #1
                pvfOut(' ',pvBufferOut, uxIndex, uxMaxLenght);
 8005ee8:	4642      	mov	r2, r8
 8005eea:	464b      	mov	r3, r9
 8005eec:	4651      	mov	r1, sl
 8005eee:	2020      	movs	r0, #32
                uxIndex++;
 8005ef0:	f108 0801 	add.w	r8, r8, #1
                pvfOut(' ',pvBufferOut, uxIndex, uxMaxLenght);
 8005ef4:	47a8      	blx	r5
            while ((uxIndex - uxStartIndex) < uxWidth)
 8005ef6:	42a6      	cmp	r6, r4
 8005ef8:	d3f5      	bcc.n	8005ee6 <Conv__enOutInversion+0x56>
        *puxBufOutLenght = (UBase_t) uxIndex;
 8005efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005efc:	2000      	movs	r0, #0
 8005efe:	f8c3 8000 	str.w	r8, [r3]
}
 8005f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (uxPos = uxBufInLenght; uxPos < uxWidth; uxPos++) /*hace un ciclo burbuja optimizado*/
 8005f06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d2d1      	bcs.n	8005eb2 <Conv__enOutInversion+0x22>
 8005f0e:	4613      	mov	r3, r2
 8005f10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f12:	4634      	mov	r4, r6
 8005f14:	eba3 0802 	sub.w	r8, r3, r2
 8005f18:	44b0      	add	r8, r6
                pvfOut(' ',pvBufferOut, uxIndex, uxMaxLenght);
 8005f1a:	4622      	mov	r2, r4
                uxIndex++;
 8005f1c:	3401      	adds	r4, #1
                pvfOut(' ',pvBufferOut, uxIndex, uxMaxLenght);
 8005f1e:	464b      	mov	r3, r9
 8005f20:	4651      	mov	r1, sl
 8005f22:	2020      	movs	r0, #32
 8005f24:	47a8      	blx	r5
            for (uxPos = uxBufInLenght; uxPos < uxWidth; uxPos++) /*hace un ciclo burbuja optimizado*/
 8005f26:	4544      	cmp	r4, r8
 8005f28:	d1f7      	bne.n	8005f1a <Conv__enOutInversion+0x8a>
 8005f2a:	e7c3      	b.n	8005eb4 <Conv__enOutInversion+0x24>

08005f2c <Conv__enNumber2String_Format>:


CONV_nERROR Conv__enNumber2String_Format(CONV_OUT_t pvfOut, char* pcBufferOut, char* pcBufferIn,
                                         UBase_t uxIndex, UBase_t uxMaxLenght, UBase_t uxBufInLenght, UBase_t* puxBufOutLenght,
                                         UBase_t uxWidth, UBase_t uxflags, boolean_t boNegative, UBase_t uxBase, UBase_t uxPrec)
{
 8005f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f30:	b083      	sub	sp, #12
 8005f32:	e9dd 490d 	ldrd	r4, r9, [sp, #52]	; 0x34
 8005f36:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
    char* pcBufferTemp;
    char  cCharTemp;
    UBase_t uxflagsTemp;

    enErrorReg = CONV_enERROR_OK;
    if((0UL == (uintptr_t) pcBufferOut) || (0UL == (uintptr_t) pcBufferIn ) || (0UL == (uintptr_t) puxBufOutLenght) )
 8005f3a:	f1b9 0f00 	cmp.w	r9, #0
 8005f3e:	bf18      	it	ne
 8005f40:	2a00      	cmpne	r2, #0
{
 8005f42:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 8005f46:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8005f48:	9600      	str	r6, [sp, #0]
 8005f4a:	e9dd 580f 	ldrd	r5, r8, [sp, #60]	; 0x3c
    if((0UL == (uintptr_t) pcBufferOut) || (0UL == (uintptr_t) pcBufferIn ) || (0UL == (uintptr_t) puxBufOutLenght) )
 8005f4e:	d01b      	beq.n	8005f88 <Conv__enNumber2String_Format+0x5c>
 8005f50:	b1d1      	cbz	r1, 8005f88 <Conv__enNumber2String_Format+0x5c>
        enErrorReg = CONV_enERROR_POINTER;
    }
    if(CONV_enERROR_OK == enErrorReg)
    {
        /* pad leading zeros */
        if (0UL == (uxflags & (UBase_t) CONV_enFLAGS_LEFT))
 8005f52:	f018 0f02 	tst.w	r8, #2
 8005f56:	d11f      	bne.n	8005f98 <Conv__enNumber2String_Format+0x6c>
        {
            if(0UL != uxWidth)
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	d03e      	beq.n	8005fda <Conv__enNumber2String_Format+0xae>
            {
                if(0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD))
 8005f5c:	f018 0601 	ands.w	r6, r8, #1
 8005f60:	9601      	str	r6, [sp, #4]
 8005f62:	d015      	beq.n	8005f90 <Conv__enNumber2String_Format+0x64>
                {
                    uxflagsTemp = (UBase_t) CONV_enFLAGS_PLUS | (UBase_t) CONV_enFLAGS_SPACE;
                    uxflagsTemp &= uxflags;
 8005f64:	f008 060c 	and.w	r6, r8, #12
                    if((FALSE != boNegative) || (0UL != uxflagsTemp))
 8005f68:	ea56 060b 	orrs.w	r6, r6, fp
 8005f6c:	d000      	beq.n	8005f70 <Conv__enNumber2String_Format+0x44>
                    {
                        uxWidth--;
 8005f6e:	3d01      	subs	r5, #1
                    }
                }
            }

            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8005f70:	2c1f      	cmp	r4, #31
 8005f72:	bf8c      	ite	hi
 8005f74:	f04f 0c00 	movhi.w	ip, #0
 8005f78:	f04f 0c01 	movls.w	ip, #1
 8005f7c:	42bc      	cmp	r4, r7
 8005f7e:	d24e      	bcs.n	800601e <Conv__enNumber2String_Format+0xf2>
 8005f80:	f1bc 0f00 	cmp.w	ip, #0
 8005f84:	d137      	bne.n	8005ff6 <Conv__enNumber2String_Format+0xca>
 8005f86:	e04a      	b.n	800601e <Conv__enNumber2String_Format+0xf2>
            }
        }
        enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, (const char*)pcBufferIn, uxIndex, uxMaxLenght, uxBufInLenght, puxBufOutLenght, uxWidth, uxflags);
    }
    return (enErrorReg);
}
 8005f88:	2001      	movs	r0, #1
 8005f8a:	b003      	add	sp, #12
 8005f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8005f90:	2c1f      	cmp	r4, #31
 8005f92:	d801      	bhi.n	8005f98 <Conv__enNumber2String_Format+0x6c>
 8005f94:	42bc      	cmp	r4, r7
 8005f96:	d32e      	bcc.n	8005ff6 <Conv__enNumber2String_Format+0xca>
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_HASH))
 8005f98:	f018 0f10 	tst.w	r8, #16
 8005f9c:	d00a      	beq.n	8005fb4 <Conv__enNumber2String_Format+0x88>
            if (0UL != uxBufInLenght)
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	d151      	bne.n	8006046 <Conv__enNumber2String_Format+0x11a>
 8005fa2:	4616      	mov	r6, r2
 8005fa4:	2401      	movs	r4, #1
                if(16UL == uxBase)
 8005fa6:	9f00      	ldr	r7, [sp, #0]
 8005fa8:	2f10      	cmp	r7, #16
 8005faa:	d05d      	beq.n	8006068 <Conv__enNumber2String_Format+0x13c>
                else if(2UL == uxBase)
 8005fac:	2f02      	cmp	r7, #2
 8005fae:	d07a      	beq.n	80060a6 <Conv__enNumber2String_Format+0x17a>
                *pcBufferTemp = cCharTemp;
 8005fb0:	2730      	movs	r7, #48	; 0x30
 8005fb2:	7037      	strb	r7, [r6, #0]
        if ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght )
 8005fb4:	2c1f      	cmp	r4, #31
 8005fb6:	d805      	bhi.n	8005fc4 <Conv__enNumber2String_Format+0x98>
            if (FALSE != boNegative)
 8005fb8:	f1bb 0f00 	cmp.w	fp, #0
 8005fbc:	d065      	beq.n	800608a <Conv__enNumber2String_Format+0x15e>
                *pcBufferTemp = '-';
 8005fbe:	262d      	movs	r6, #45	; 0x2d
 8005fc0:	5516      	strb	r6, [r2, r4]
                uxBufInLenght++;
 8005fc2:	3401      	adds	r4, #1
        enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, (const char*)pcBufferIn, uxIndex, uxMaxLenght, uxBufInLenght, puxBufOutLenght, uxWidth, uxflags);
 8005fc4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8005fc8:	e9cd 580f 	strd	r5, r8, [sp, #60]	; 0x3c
 8005fcc:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
}
 8005fd0:	b003      	add	sp, #12
 8005fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        enErrorReg = Conv__enOutInversion(pvfOut, pcBufferOut, (const char*)pcBufferIn, uxIndex, uxMaxLenght, uxBufInLenght, puxBufOutLenght, uxWidth, uxflags);
 8005fd6:	f7ff bf5b 	b.w	8005e90 <Conv__enOutInversion>
            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8005fda:	2c1f      	cmp	r4, #31
                if(0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD))
 8005fdc:	f008 0601 	and.w	r6, r8, #1
            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8005fe0:	bf8c      	ite	hi
 8005fe2:	f04f 0c00 	movhi.w	ip, #0
 8005fe6:	f04f 0c01 	movls.w	ip, #1
 8005fea:	42bc      	cmp	r4, r7
                if(0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD))
 8005fec:	9601      	str	r6, [sp, #4]
            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8005fee:	d213      	bcs.n	8006018 <Conv__enNumber2String_Format+0xec>
 8005ff0:	f1bc 0f00 	cmp.w	ip, #0
 8005ff4:	d010      	beq.n	8006018 <Conv__enNumber2String_Format+0xec>
 8005ff6:	f104 3cff 	add.w	ip, r4, #4294967295
                *pcBufferTemp = '0';
 8005ffa:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8005ffe:	4494      	add	ip, r2
                uxBufInLenght++;
 8006000:	3401      	adds	r4, #1
                *pcBufferTemp = '0';
 8006002:	f80c af01 	strb.w	sl, [ip, #1]!
            while ((uxBufInLenght < uxPrec) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8006006:	2c1f      	cmp	r4, #31
 8006008:	bf8c      	ite	hi
 800600a:	2600      	movhi	r6, #0
 800600c:	2601      	movls	r6, #1
 800600e:	42a7      	cmp	r7, r4
 8006010:	d901      	bls.n	8006016 <Conv__enNumber2String_Format+0xea>
 8006012:	2e00      	cmp	r6, #0
 8006014:	d1f4      	bne.n	8006000 <Conv__enNumber2String_Format+0xd4>
 8006016:	46b4      	mov	ip, r6
            while (((0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)) && (uxBufInLenght < uxWidth)) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8006018:	9e01      	ldr	r6, [sp, #4]
 800601a:	2e00      	cmp	r6, #0
 800601c:	d0bc      	beq.n	8005f98 <Conv__enNumber2String_Format+0x6c>
 800601e:	42ac      	cmp	r4, r5
 8006020:	d2ba      	bcs.n	8005f98 <Conv__enNumber2String_Format+0x6c>
 8006022:	f1bc 0f00 	cmp.w	ip, #0
 8006026:	d0b7      	beq.n	8005f98 <Conv__enNumber2String_Format+0x6c>
 8006028:	1e66      	subs	r6, r4, #1
                *pcBufferTemp = '0';
 800602a:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800602e:	4416      	add	r6, r2
 8006030:	e001      	b.n	8006036 <Conv__enNumber2String_Format+0x10a>
            while (((0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)) && (uxBufInLenght < uxWidth)) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 8006032:	2c1f      	cmp	r4, #31
 8006034:	d804      	bhi.n	8006040 <Conv__enNumber2String_Format+0x114>
                uxBufInLenght++;
 8006036:	3401      	adds	r4, #1
                *pcBufferTemp = '0';
 8006038:	f806 cf01 	strb.w	ip, [r6, #1]!
            while (((0UL != (uxflags & (UBase_t) CONV_enFLAGS_ZEROPAD)) && (uxBufInLenght < uxWidth)) && ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght))
 800603c:	42ac      	cmp	r4, r5
 800603e:	d3f8      	bcc.n	8006032 <Conv__enNumber2String_Format+0x106>
        if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_HASH))
 8006040:	f018 0f10 	tst.w	r8, #16
 8006044:	d0b6      	beq.n	8005fb4 <Conv__enNumber2String_Format+0x88>
                if(0UL == (uxflags & (UBase_t) CONV_enFLAGS_PRECISION))
 8006046:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800604a:	d119      	bne.n	8006080 <Conv__enNumber2String_Format+0x154>
                    if((uxBufInLenght == uxPrec) || (uxBufInLenght == uxWidth))
 800604c:	42a7      	cmp	r7, r4
 800604e:	d001      	beq.n	8006054 <Conv__enNumber2String_Format+0x128>
 8006050:	42a5      	cmp	r5, r4
 8006052:	d115      	bne.n	8006080 <Conv__enNumber2String_Format+0x154>
                        if ((0UL != uxBufInLenght) && (16UL == uxBase))
 8006054:	1e67      	subs	r7, r4, #1
 8006056:	d012      	beq.n	800607e <Conv__enNumber2String_Format+0x152>
 8006058:	9e00      	ldr	r6, [sp, #0]
 800605a:	2e10      	cmp	r6, #16
 800605c:	d10f      	bne.n	800607e <Conv__enNumber2String_Format+0x152>
                            uxBufInLenght--;
 800605e:	3c02      	subs	r4, #2
            if ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght )
 8006060:	2c1f      	cmp	r4, #31
 8006062:	d8af      	bhi.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                        pcBufferTemp += uxBufInLenght;
 8006064:	1916      	adds	r6, r2, r4
 8006066:	463c      	mov	r4, r7
                    if(0UL == (uxflags & (UBase_t) CONV_enFLAGS_UPPERCASE))
 8006068:	f018 0f20 	tst.w	r8, #32
                        *pcBufferTemp = cCharTemp;
 800606c:	bf0c      	ite	eq
 800606e:	2778      	moveq	r7, #120	; 0x78
                        *pcBufferTemp = cCharTemp;
 8006070:	2758      	movne	r7, #88	; 0x58
 8006072:	7037      	strb	r7, [r6, #0]
            if ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght )
 8006074:	2c20      	cmp	r4, #32
 8006076:	d0a5      	beq.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                pcBufferTemp += uxBufInLenght;
 8006078:	1916      	adds	r6, r2, r4
                uxBufInLenght++;
 800607a:	3401      	adds	r4, #1
 800607c:	e798      	b.n	8005fb0 <Conv__enNumber2String_Format+0x84>
                        uxBufInLenght--;
 800607e:	463c      	mov	r4, r7
            if ((UBase_t) CONV_enBUFFER_SIZE_NUMBER > uxBufInLenght )
 8006080:	2c1f      	cmp	r4, #31
 8006082:	d89f      	bhi.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                    pcBufferTemp += uxBufInLenght;
 8006084:	1916      	adds	r6, r2, r4
                    uxBufInLenght++;
 8006086:	3401      	adds	r4, #1
 8006088:	e78d      	b.n	8005fa6 <Conv__enNumber2String_Format+0x7a>
            else if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_PLUS))
 800608a:	f018 0f04 	tst.w	r8, #4
 800608e:	d106      	bne.n	800609e <Conv__enNumber2String_Format+0x172>
            else if (0UL != (uxflags & (UBase_t) CONV_enFLAGS_SPACE))
 8006090:	f018 0f08 	tst.w	r8, #8
 8006094:	d096      	beq.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                *pcBufferTemp = ' ';
 8006096:	2620      	movs	r6, #32
 8006098:	5516      	strb	r6, [r2, r4]
                uxBufInLenght++;
 800609a:	3401      	adds	r4, #1
 800609c:	e792      	b.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                *pcBufferTemp = '+';  /* ignore the space if the '+' exists */
 800609e:	262b      	movs	r6, #43	; 0x2b
 80060a0:	5516      	strb	r6, [r2, r4]
                uxBufInLenght++;
 80060a2:	3401      	adds	r4, #1
 80060a4:	e78e      	b.n	8005fc4 <Conv__enNumber2String_Format+0x98>
                    *pcBufferTemp = cCharTemp;
 80060a6:	2762      	movs	r7, #98	; 0x62
 80060a8:	7037      	strb	r7, [r6, #0]
                    uxBufInLenght++;
 80060aa:	e7e3      	b.n	8006074 <Conv__enNumber2String_Format+0x148>

080060ac <__errno>:
 80060ac:	4b01      	ldr	r3, [pc, #4]	; (80060b4 <__errno+0x8>)
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20020420 	.word	0x20020420

080060b8 <malloc>:
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <malloc+0xc>)
 80060ba:	4601      	mov	r1, r0
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	f000 b88d 	b.w	80061dc <_malloc_r>
 80060c2:	bf00      	nop
 80060c4:	20020420 	.word	0x20020420

080060c8 <free>:
 80060c8:	4b02      	ldr	r3, [pc, #8]	; (80060d4 <free+0xc>)
 80060ca:	4601      	mov	r1, r0
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f000 b819 	b.w	8006104 <_free_r>
 80060d2:	bf00      	nop
 80060d4:	20020420 	.word	0x20020420

080060d8 <memcpy>:
 80060d8:	440a      	add	r2, r1
 80060da:	4291      	cmp	r1, r2
 80060dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e0:	d100      	bne.n	80060e4 <memcpy+0xc>
 80060e2:	4770      	bx	lr
 80060e4:	b510      	push	{r4, lr}
 80060e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060ee:	4291      	cmp	r1, r2
 80060f0:	d1f9      	bne.n	80060e6 <memcpy+0xe>
 80060f2:	bd10      	pop	{r4, pc}

080060f4 <memset>:
 80060f4:	4402      	add	r2, r0
 80060f6:	4603      	mov	r3, r0
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d100      	bne.n	80060fe <memset+0xa>
 80060fc:	4770      	bx	lr
 80060fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006102:	e7f9      	b.n	80060f8 <memset+0x4>

08006104 <_free_r>:
 8006104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006106:	2900      	cmp	r1, #0
 8006108:	d044      	beq.n	8006194 <_free_r+0x90>
 800610a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800610e:	9001      	str	r0, [sp, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f1a1 0404 	sub.w	r4, r1, #4
 8006116:	bfb8      	it	lt
 8006118:	18e4      	addlt	r4, r4, r3
 800611a:	f000 f8e3 	bl	80062e4 <__malloc_lock>
 800611e:	4a1e      	ldr	r2, [pc, #120]	; (8006198 <_free_r+0x94>)
 8006120:	9801      	ldr	r0, [sp, #4]
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	b933      	cbnz	r3, 8006134 <_free_r+0x30>
 8006126:	6063      	str	r3, [r4, #4]
 8006128:	6014      	str	r4, [r2, #0]
 800612a:	b003      	add	sp, #12
 800612c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006130:	f000 b8de 	b.w	80062f0 <__malloc_unlock>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d908      	bls.n	800614a <_free_r+0x46>
 8006138:	6825      	ldr	r5, [r4, #0]
 800613a:	1961      	adds	r1, r4, r5
 800613c:	428b      	cmp	r3, r1
 800613e:	bf01      	itttt	eq
 8006140:	6819      	ldreq	r1, [r3, #0]
 8006142:	685b      	ldreq	r3, [r3, #4]
 8006144:	1949      	addeq	r1, r1, r5
 8006146:	6021      	streq	r1, [r4, #0]
 8006148:	e7ed      	b.n	8006126 <_free_r+0x22>
 800614a:	461a      	mov	r2, r3
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b10b      	cbz	r3, 8006154 <_free_r+0x50>
 8006150:	42a3      	cmp	r3, r4
 8006152:	d9fa      	bls.n	800614a <_free_r+0x46>
 8006154:	6811      	ldr	r1, [r2, #0]
 8006156:	1855      	adds	r5, r2, r1
 8006158:	42a5      	cmp	r5, r4
 800615a:	d10b      	bne.n	8006174 <_free_r+0x70>
 800615c:	6824      	ldr	r4, [r4, #0]
 800615e:	4421      	add	r1, r4
 8006160:	1854      	adds	r4, r2, r1
 8006162:	42a3      	cmp	r3, r4
 8006164:	6011      	str	r1, [r2, #0]
 8006166:	d1e0      	bne.n	800612a <_free_r+0x26>
 8006168:	681c      	ldr	r4, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	6053      	str	r3, [r2, #4]
 800616e:	4421      	add	r1, r4
 8006170:	6011      	str	r1, [r2, #0]
 8006172:	e7da      	b.n	800612a <_free_r+0x26>
 8006174:	d902      	bls.n	800617c <_free_r+0x78>
 8006176:	230c      	movs	r3, #12
 8006178:	6003      	str	r3, [r0, #0]
 800617a:	e7d6      	b.n	800612a <_free_r+0x26>
 800617c:	6825      	ldr	r5, [r4, #0]
 800617e:	1961      	adds	r1, r4, r5
 8006180:	428b      	cmp	r3, r1
 8006182:	bf04      	itt	eq
 8006184:	6819      	ldreq	r1, [r3, #0]
 8006186:	685b      	ldreq	r3, [r3, #4]
 8006188:	6063      	str	r3, [r4, #4]
 800618a:	bf04      	itt	eq
 800618c:	1949      	addeq	r1, r1, r5
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	6054      	str	r4, [r2, #4]
 8006192:	e7ca      	b.n	800612a <_free_r+0x26>
 8006194:	b003      	add	sp, #12
 8006196:	bd30      	pop	{r4, r5, pc}
 8006198:	200209b0 	.word	0x200209b0

0800619c <sbrk_aligned>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	4e0e      	ldr	r6, [pc, #56]	; (80061d8 <sbrk_aligned+0x3c>)
 80061a0:	460c      	mov	r4, r1
 80061a2:	6831      	ldr	r1, [r6, #0]
 80061a4:	4605      	mov	r5, r0
 80061a6:	b911      	cbnz	r1, 80061ae <sbrk_aligned+0x12>
 80061a8:	f000 f88c 	bl	80062c4 <_sbrk_r>
 80061ac:	6030      	str	r0, [r6, #0]
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 f887 	bl	80062c4 <_sbrk_r>
 80061b6:	1c43      	adds	r3, r0, #1
 80061b8:	d00a      	beq.n	80061d0 <sbrk_aligned+0x34>
 80061ba:	1cc4      	adds	r4, r0, #3
 80061bc:	f024 0403 	bic.w	r4, r4, #3
 80061c0:	42a0      	cmp	r0, r4
 80061c2:	d007      	beq.n	80061d4 <sbrk_aligned+0x38>
 80061c4:	1a21      	subs	r1, r4, r0
 80061c6:	4628      	mov	r0, r5
 80061c8:	f000 f87c 	bl	80062c4 <_sbrk_r>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d101      	bne.n	80061d4 <sbrk_aligned+0x38>
 80061d0:	f04f 34ff 	mov.w	r4, #4294967295
 80061d4:	4620      	mov	r0, r4
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	200209b4 	.word	0x200209b4

080061dc <_malloc_r>:
 80061dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e0:	1ccd      	adds	r5, r1, #3
 80061e2:	f025 0503 	bic.w	r5, r5, #3
 80061e6:	3508      	adds	r5, #8
 80061e8:	2d0c      	cmp	r5, #12
 80061ea:	bf38      	it	cc
 80061ec:	250c      	movcc	r5, #12
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	4607      	mov	r7, r0
 80061f2:	db01      	blt.n	80061f8 <_malloc_r+0x1c>
 80061f4:	42a9      	cmp	r1, r5
 80061f6:	d905      	bls.n	8006204 <_malloc_r+0x28>
 80061f8:	230c      	movs	r3, #12
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	2600      	movs	r6, #0
 80061fe:	4630      	mov	r0, r6
 8006200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006204:	4e2e      	ldr	r6, [pc, #184]	; (80062c0 <_malloc_r+0xe4>)
 8006206:	f000 f86d 	bl	80062e4 <__malloc_lock>
 800620a:	6833      	ldr	r3, [r6, #0]
 800620c:	461c      	mov	r4, r3
 800620e:	bb34      	cbnz	r4, 800625e <_malloc_r+0x82>
 8006210:	4629      	mov	r1, r5
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ffc2 	bl	800619c <sbrk_aligned>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	4604      	mov	r4, r0
 800621c:	d14d      	bne.n	80062ba <_malloc_r+0xde>
 800621e:	6834      	ldr	r4, [r6, #0]
 8006220:	4626      	mov	r6, r4
 8006222:	2e00      	cmp	r6, #0
 8006224:	d140      	bne.n	80062a8 <_malloc_r+0xcc>
 8006226:	6823      	ldr	r3, [r4, #0]
 8006228:	4631      	mov	r1, r6
 800622a:	4638      	mov	r0, r7
 800622c:	eb04 0803 	add.w	r8, r4, r3
 8006230:	f000 f848 	bl	80062c4 <_sbrk_r>
 8006234:	4580      	cmp	r8, r0
 8006236:	d13a      	bne.n	80062ae <_malloc_r+0xd2>
 8006238:	6821      	ldr	r1, [r4, #0]
 800623a:	3503      	adds	r5, #3
 800623c:	1a6d      	subs	r5, r5, r1
 800623e:	f025 0503 	bic.w	r5, r5, #3
 8006242:	3508      	adds	r5, #8
 8006244:	2d0c      	cmp	r5, #12
 8006246:	bf38      	it	cc
 8006248:	250c      	movcc	r5, #12
 800624a:	4629      	mov	r1, r5
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff ffa5 	bl	800619c <sbrk_aligned>
 8006252:	3001      	adds	r0, #1
 8006254:	d02b      	beq.n	80062ae <_malloc_r+0xd2>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	442b      	add	r3, r5
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	e00e      	b.n	800627c <_malloc_r+0xa0>
 800625e:	6822      	ldr	r2, [r4, #0]
 8006260:	1b52      	subs	r2, r2, r5
 8006262:	d41e      	bmi.n	80062a2 <_malloc_r+0xc6>
 8006264:	2a0b      	cmp	r2, #11
 8006266:	d916      	bls.n	8006296 <_malloc_r+0xba>
 8006268:	1961      	adds	r1, r4, r5
 800626a:	42a3      	cmp	r3, r4
 800626c:	6025      	str	r5, [r4, #0]
 800626e:	bf18      	it	ne
 8006270:	6059      	strne	r1, [r3, #4]
 8006272:	6863      	ldr	r3, [r4, #4]
 8006274:	bf08      	it	eq
 8006276:	6031      	streq	r1, [r6, #0]
 8006278:	5162      	str	r2, [r4, r5]
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	4638      	mov	r0, r7
 800627e:	f104 060b 	add.w	r6, r4, #11
 8006282:	f000 f835 	bl	80062f0 <__malloc_unlock>
 8006286:	f026 0607 	bic.w	r6, r6, #7
 800628a:	1d23      	adds	r3, r4, #4
 800628c:	1af2      	subs	r2, r6, r3
 800628e:	d0b6      	beq.n	80061fe <_malloc_r+0x22>
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	50a3      	str	r3, [r4, r2]
 8006294:	e7b3      	b.n	80061fe <_malloc_r+0x22>
 8006296:	6862      	ldr	r2, [r4, #4]
 8006298:	42a3      	cmp	r3, r4
 800629a:	bf0c      	ite	eq
 800629c:	6032      	streq	r2, [r6, #0]
 800629e:	605a      	strne	r2, [r3, #4]
 80062a0:	e7ec      	b.n	800627c <_malloc_r+0xa0>
 80062a2:	4623      	mov	r3, r4
 80062a4:	6864      	ldr	r4, [r4, #4]
 80062a6:	e7b2      	b.n	800620e <_malloc_r+0x32>
 80062a8:	4634      	mov	r4, r6
 80062aa:	6876      	ldr	r6, [r6, #4]
 80062ac:	e7b9      	b.n	8006222 <_malloc_r+0x46>
 80062ae:	230c      	movs	r3, #12
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4638      	mov	r0, r7
 80062b4:	f000 f81c 	bl	80062f0 <__malloc_unlock>
 80062b8:	e7a1      	b.n	80061fe <_malloc_r+0x22>
 80062ba:	6025      	str	r5, [r4, #0]
 80062bc:	e7de      	b.n	800627c <_malloc_r+0xa0>
 80062be:	bf00      	nop
 80062c0:	200209b0 	.word	0x200209b0

080062c4 <_sbrk_r>:
 80062c4:	b538      	push	{r3, r4, r5, lr}
 80062c6:	4d06      	ldr	r5, [pc, #24]	; (80062e0 <_sbrk_r+0x1c>)
 80062c8:	2300      	movs	r3, #0
 80062ca:	4604      	mov	r4, r0
 80062cc:	4608      	mov	r0, r1
 80062ce:	602b      	str	r3, [r5, #0]
 80062d0:	f7fa ff88 	bl	80011e4 <_sbrk>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	d102      	bne.n	80062de <_sbrk_r+0x1a>
 80062d8:	682b      	ldr	r3, [r5, #0]
 80062da:	b103      	cbz	r3, 80062de <_sbrk_r+0x1a>
 80062dc:	6023      	str	r3, [r4, #0]
 80062de:	bd38      	pop	{r3, r4, r5, pc}
 80062e0:	200209b8 	.word	0x200209b8

080062e4 <__malloc_lock>:
 80062e4:	4801      	ldr	r0, [pc, #4]	; (80062ec <__malloc_lock+0x8>)
 80062e6:	f000 b809 	b.w	80062fc <__retarget_lock_acquire_recursive>
 80062ea:	bf00      	nop
 80062ec:	200209bc 	.word	0x200209bc

080062f0 <__malloc_unlock>:
 80062f0:	4801      	ldr	r0, [pc, #4]	; (80062f8 <__malloc_unlock+0x8>)
 80062f2:	f000 b804 	b.w	80062fe <__retarget_lock_release_recursive>
 80062f6:	bf00      	nop
 80062f8:	200209bc 	.word	0x200209bc

080062fc <__retarget_lock_acquire_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_release_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__FLASH__enGetSizeInBytes_veneer>:
 8006300:	f85f f000 	ldr.w	pc, [pc]	; 8006304 <__FLASH__enGetSizeInBytes_veneer+0x4>
 8006304:	2007cd51 	.word	0x2007cd51

08006308 <__FLASH__enGetSize_veneer>:
 8006308:	f85f f000 	ldr.w	pc, [pc]	; 800630c <__FLASH__enGetSize_veneer+0x4>
 800630c:	2007ccf5 	.word	0x2007ccf5

08006310 <__FLASH__enEnablePrefetch_veneer>:
 8006310:	f85f f000 	ldr.w	pc, [pc]	; 8006314 <__FLASH__enEnablePrefetch_veneer+0x4>
 8006314:	2007ca91 	.word	0x2007ca91

08006318 <__FLASH__enSetPrefetchMode_veneer>:
 8006318:	f85f f000 	ldr.w	pc, [pc]	; 800631c <__FLASH__enSetPrefetchMode_veneer+0x4>
 800631c:	2007c9fd 	.word	0x2007c9fd

08006320 <__FLASH__enWriteWorld_veneer>:
 8006320:	f85f f000 	ldr.w	pc, [pc]	; 8006324 <__FLASH__enWriteWorld_veneer+0x4>
 8006324:	2007c001 	.word	0x2007c001

08006328 <__FLASH__enWriteRegister_veneer>:
 8006328:	f85f f000 	ldr.w	pc, [pc]	; 800632c <__FLASH__enWriteRegister_veneer+0x4>
 800632c:	2007c649 	.word	0x2007c649

08006330 <__FLASH__pvfGetIRQSourceHandler_veneer>:
 8006330:	f85f f000 	ldr.w	pc, [pc]	; 8006334 <__FLASH__pvfGetIRQSourceHandler_veneer+0x4>
 8006334:	2007cfc1 	.word	0x2007cfc1

Disassembly of section .init:

08006338 <_init>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr

Disassembly of section .finit:

08006344 <_fini>:
 8006344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006346:	bf00      	nop

08006348 <__do_global_dtors_aux_fini_array_entry>:
 8006348:	0401 0800 bcf8 bc08 469e 4770               .........FpG

Disassembly of section .ramcode:

2007c000 <FLASH__enWriteWorld>:
    }
    return (enErrorReg);
}

FLASH_nERROR FLASH__enWriteWorld (FLASH_nMODULE enModuleArg, UBase_t uxDataArg, UBase_t uxAddressArg)
{
2007c000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2007c004:	b084      	sub	sp, #16
    enErasedReg = FLASH_enERASED_YES;
2007c006:	2300      	movs	r3, #0
{
2007c008:	460f      	mov	r7, r1
2007c00a:	4606      	mov	r6, r0
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c00c:	a901      	add	r1, sp, #4
{
2007c00e:	4615      	mov	r5, r2
    enErasedReg = FLASH_enERASED_YES;
2007c010:	9303      	str	r3, [sp, #12]
    uxFlashSize = 0UL;
2007c012:	9301      	str	r3, [sp, #4]
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c014:	f000 fe6e 	bl	2007ccf4 <FLASH__enGetSize>
    if(FLASH_enERROR_OK == enErrorReg)
2007c018:	4604      	mov	r4, r0
2007c01a:	b118      	cbz	r0, 2007c024 <FLASH__enWriteWorld+0x24>
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH_enWriteAux(enModuleArg, uxDataArg, uxAddressArg, FLASH_enVARIABLE_WORD);
    return (enErrorReg);
}
2007c01c:	4620      	mov	r0, r4
2007c01e:	b004      	add	sp, #16
2007c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSize);
2007c024:	9901      	ldr	r1, [sp, #4]
2007c026:	4628      	mov	r0, r5
2007c028:	f000 fa44 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c02c:	4604      	mov	r4, r0
2007c02e:	2800      	cmp	r0, #0
2007c030:	d1f4      	bne.n	2007c01c <FLASH__enWriteWorld+0x1c>
        enErrorReg = FLASH_enIsDataErased(uxAddressArg, enVariableTypeArg, &enErasedReg);
2007c032:	aa03      	add	r2, sp, #12
2007c034:	2102      	movs	r1, #2
2007c036:	4628      	mov	r0, r5
2007c038:	f000 fbaa 	bl	2007c790 <FLASH_enIsDataErased>
    if(FLASH_enERROR_OK == enErrorReg)
2007c03c:	4604      	mov	r4, r0
2007c03e:	2800      	cmp	r0, #0
2007c040:	d1ec      	bne.n	2007c01c <FLASH__enWriteWorld+0x1c>
        if(FLASH_enERASED_YES == enErasedReg)
2007c042:	9b03      	ldr	r3, [sp, #12]
2007c044:	b9ab      	cbnz	r3, 2007c072 <FLASH__enWriteWorld+0x72>
        uxAddressAligned &= 0x3UL;
2007c046:	f005 0803 	and.w	r8, r5, #3
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c04a:	462a      	mov	r2, r5
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c04c:	4d29      	ldr	r5, [pc, #164]	; (2007c0f4 <FLASH__enWriteWorld+0xf4>)
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c04e:	4639      	mov	r1, r7
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c050:	f8d8 3000 	ldr.w	r3, [r8]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c054:	4628      	mov	r0, r5
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c056:	602b      	str	r3, [r5, #0]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c058:	2302      	movs	r3, #2
2007c05a:	f000 fb7d 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c05e:	4604      	mov	r4, r0
2007c060:	2800      	cmp	r0, #0
2007c062:	d1db      	bne.n	2007c01c <FLASH__enWriteWorld+0x1c>
                enErrorReg = FLASH__enWriteWord(enModuleArg, uxDataAux, uxAddressAligned);
2007c064:	4642      	mov	r2, r8
2007c066:	6829      	ldr	r1, [r5, #0]
2007c068:	4630      	mov	r0, r6
2007c06a:	f000 f93d 	bl	2007c2e8 <FLASH__enWriteWord>
2007c06e:	4604      	mov	r4, r0
2007c070:	e7d4      	b.n	2007c01c <FLASH__enWriteWorld+0x1c>
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c072:	4669      	mov	r1, sp
2007c074:	4630      	mov	r0, r6
            uxSectorSizeReg = 0UL;
2007c076:	9400      	str	r4, [sp, #0]
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c078:	f000 feae 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
            if(FLASH_enERROR_OK == enErrorReg)
2007c07c:	4604      	mov	r4, r0
2007c07e:	2800      	cmp	r0, #0
2007c080:	d1cc      	bne.n	2007c01c <FLASH__enWriteWorld+0x1c>
                puxPageDataInitial = (UBase_t*) malloc( (size_t) (sizeof(uint8_t) * uxSectorSizeReg));
2007c082:	9d00      	ldr	r5, [sp, #0]
2007c084:	4628      	mov	r0, r5
2007c086:	f000 ffaf 	bl	2007cfe8 <__malloc_veneer>
                if(0UL == (uintptr_t) puxPageDataInitial)
2007c08a:	4680      	mov	r8, r0
2007c08c:	b370      	cbz	r0, 2007c0ec <FLASH__enWriteWorld+0xec>
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c08e:	08a9      	lsrs	r1, r5, #2
2007c090:	d008      	beq.n	2007c0a4 <FLASH__enWriteWorld+0xa4>
2007c092:	eb08 0181 	add.w	r1, r8, r1, lsl #2
2007c096:	4643      	mov	r3, r8
                    *puxPageData = *puxAddress;
2007c098:	f854 2b04 	ldr.w	r2, [r4], #4
2007c09c:	f843 2b04 	str.w	r2, [r3], #4
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c0a0:	428b      	cmp	r3, r1
2007c0a2:	d1f9      	bne.n	2007c098 <FLASH__enWriteWorld+0x98>
                enErrorReg = FLASH__enReplaceData((void*) puxAuxData, uxDataArg, (UBase_t) puxPageData, enVariableTypeArg);
2007c0a4:	2302      	movs	r3, #2
2007c0a6:	4642      	mov	r2, r8
2007c0a8:	4639      	mov	r1, r7
2007c0aa:	4640      	mov	r0, r8
2007c0ac:	f000 fb54 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c0b0:	4604      	mov	r4, r0
2007c0b2:	b9a0      	cbnz	r0, 2007c0de <FLASH__enWriteWorld+0xde>
                enErrorReg = FLASH__enPageEraseByAddress(enModuleArg, uxAddressPage);
2007c0b4:	4601      	mov	r1, r0
2007c0b6:	4630      	mov	r0, r6
2007c0b8:	f000 f966 	bl	2007c388 <FLASH__enPageEraseByAddress>
            if(FLASH_enERROR_OK == enErrorReg)
2007c0bc:	4605      	mov	r5, r0
2007c0be:	b9b8      	cbnz	r0, 2007c0f0 <FLASH__enWriteWorld+0xf0>
                uxCounter = 32UL;
2007c0c0:	2320      	movs	r3, #32
2007c0c2:	9302      	str	r3, [sp, #8]
                    enErrorReg = FLASH__enWriteBuffer(enModuleArg, (const UBase_t*) puxPageData, uxAddressPage, &uxCounter);
2007c0c4:	462a      	mov	r2, r5
2007c0c6:	eb08 0105 	add.w	r1, r8, r5
2007c0ca:	ab02      	add	r3, sp, #8
2007c0cc:	4630      	mov	r0, r6
2007c0ce:	f000 f931 	bl	2007c334 <FLASH__enWriteBuffer>
                    uxAddressPage += 0x80UL;/*32World = 4Bytes*32 = 0x80 = 128*/
2007c0d2:	3580      	adds	r5, #128	; 0x80
                    if(FLASH_enERROR_OK != enErrorReg)
2007c0d4:	4604      	mov	r4, r0
2007c0d6:	b910      	cbnz	r0, 2007c0de <FLASH__enWriteWorld+0xde>
                for(uxPos = 0UL; uxPos < 8UL; uxPos++)
2007c0d8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
2007c0dc:	d1f2      	bne.n	2007c0c4 <FLASH__enWriteWorld+0xc4>
                free(puxPageDataInitial);
2007c0de:	4640      	mov	r0, r8
2007c0e0:	f000 ff8a 	bl	2007cff8 <__free_veneer>
}
2007c0e4:	4620      	mov	r0, r4
2007c0e6:	b004      	add	sp, #16
2007c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    enErrorReg = FLASH_enERROR_POINTER;
2007c0ec:	2401      	movs	r4, #1
    return (enErrorReg);
2007c0ee:	e795      	b.n	2007c01c <FLASH__enWriteWorld+0x1c>
2007c0f0:	4604      	mov	r4, r0
2007c0f2:	e7f4      	b.n	2007c0de <FLASH__enWriteWorld+0xde>
2007c0f4:	200204a8 	.word	0x200204a8

2007c0f8 <FLASH__enWriteHalfWorld>:

FLASH_nERROR FLASH__enWriteHalfWorld (FLASH_nMODULE enModuleArg, uint16_t u16DataArg, UBase_t uxAddressArg)
{
2007c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2007c0fc:	b084      	sub	sp, #16
    enErasedReg = FLASH_enERASED_YES;
2007c0fe:	2300      	movs	r3, #0
{
2007c100:	460f      	mov	r7, r1
2007c102:	4606      	mov	r6, r0
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c104:	a901      	add	r1, sp, #4
{
2007c106:	4615      	mov	r5, r2
    enErasedReg = FLASH_enERASED_YES;
2007c108:	9303      	str	r3, [sp, #12]
    uxFlashSize = 0UL;
2007c10a:	9301      	str	r3, [sp, #4]
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c10c:	f000 fdf2 	bl	2007ccf4 <FLASH__enGetSize>
    if(FLASH_enERROR_OK == enErrorReg)
2007c110:	4604      	mov	r4, r0
2007c112:	b118      	cbz	r0, 2007c11c <FLASH__enWriteHalfWorld+0x24>
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH_enWriteAux(enModuleArg, (UBase_t) u16DataArg, uxAddressArg, FLASH_enVARIABLE_HALFWORD);
    return (enErrorReg);
}
2007c114:	4620      	mov	r0, r4
2007c116:	b004      	add	sp, #16
2007c118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSize);
2007c11c:	9901      	ldr	r1, [sp, #4]
2007c11e:	4628      	mov	r0, r5
2007c120:	f000 f9c8 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c124:	4604      	mov	r4, r0
2007c126:	2800      	cmp	r0, #0
2007c128:	d1f4      	bne.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
        enErrorReg = FLASH_enIsDataErased(uxAddressArg, enVariableTypeArg, &enErasedReg);
2007c12a:	aa03      	add	r2, sp, #12
2007c12c:	2101      	movs	r1, #1
2007c12e:	4628      	mov	r0, r5
2007c130:	f000 fb2e 	bl	2007c790 <FLASH_enIsDataErased>
    if(FLASH_enERROR_OK == enErrorReg)
2007c134:	4604      	mov	r4, r0
2007c136:	2800      	cmp	r0, #0
2007c138:	d1ec      	bne.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
        if(FLASH_enERASED_YES == enErasedReg)
2007c13a:	9b03      	ldr	r3, [sp, #12]
2007c13c:	b9ab      	cbnz	r3, 2007c16a <FLASH__enWriteHalfWorld+0x72>
        uxAddressAligned &= 0x3UL;
2007c13e:	f005 0803 	and.w	r8, r5, #3
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c142:	462a      	mov	r2, r5
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c144:	4d29      	ldr	r5, [pc, #164]	; (2007c1ec <FLASH__enWriteHalfWorld+0xf4>)
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c146:	4639      	mov	r1, r7
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c148:	f8d8 3000 	ldr.w	r3, [r8]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c14c:	4628      	mov	r0, r5
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c14e:	602b      	str	r3, [r5, #0]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c150:	2301      	movs	r3, #1
2007c152:	f000 fb01 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c156:	4604      	mov	r4, r0
2007c158:	2800      	cmp	r0, #0
2007c15a:	d1db      	bne.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
                enErrorReg = FLASH__enWriteWord(enModuleArg, uxDataAux, uxAddressAligned);
2007c15c:	4642      	mov	r2, r8
2007c15e:	6829      	ldr	r1, [r5, #0]
2007c160:	4630      	mov	r0, r6
2007c162:	f000 f8c1 	bl	2007c2e8 <FLASH__enWriteWord>
2007c166:	4604      	mov	r4, r0
2007c168:	e7d4      	b.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c16a:	4669      	mov	r1, sp
2007c16c:	4630      	mov	r0, r6
            uxSectorSizeReg = 0UL;
2007c16e:	9400      	str	r4, [sp, #0]
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c170:	f000 fe32 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
            if(FLASH_enERROR_OK == enErrorReg)
2007c174:	4604      	mov	r4, r0
2007c176:	2800      	cmp	r0, #0
2007c178:	d1cc      	bne.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
                puxPageDataInitial = (UBase_t*) malloc( (size_t) (sizeof(uint8_t) * uxSectorSizeReg));
2007c17a:	9d00      	ldr	r5, [sp, #0]
2007c17c:	4628      	mov	r0, r5
2007c17e:	f000 ff33 	bl	2007cfe8 <__malloc_veneer>
                if(0UL == (uintptr_t) puxPageDataInitial)
2007c182:	4680      	mov	r8, r0
2007c184:	b370      	cbz	r0, 2007c1e4 <FLASH__enWriteHalfWorld+0xec>
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c186:	08a9      	lsrs	r1, r5, #2
2007c188:	d008      	beq.n	2007c19c <FLASH__enWriteHalfWorld+0xa4>
2007c18a:	eb08 0181 	add.w	r1, r8, r1, lsl #2
2007c18e:	4643      	mov	r3, r8
                    *puxPageData = *puxAddress;
2007c190:	f854 2b04 	ldr.w	r2, [r4], #4
2007c194:	f843 2b04 	str.w	r2, [r3], #4
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c198:	428b      	cmp	r3, r1
2007c19a:	d1f9      	bne.n	2007c190 <FLASH__enWriteHalfWorld+0x98>
                enErrorReg = FLASH__enReplaceData((void*) puxAuxData, uxDataArg, (UBase_t) puxPageData, enVariableTypeArg);
2007c19c:	2301      	movs	r3, #1
2007c19e:	4642      	mov	r2, r8
2007c1a0:	4639      	mov	r1, r7
2007c1a2:	4640      	mov	r0, r8
2007c1a4:	f000 fad8 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c1a8:	4604      	mov	r4, r0
2007c1aa:	b9a0      	cbnz	r0, 2007c1d6 <FLASH__enWriteHalfWorld+0xde>
                enErrorReg = FLASH__enPageEraseByAddress(enModuleArg, uxAddressPage);
2007c1ac:	4601      	mov	r1, r0
2007c1ae:	4630      	mov	r0, r6
2007c1b0:	f000 f8ea 	bl	2007c388 <FLASH__enPageEraseByAddress>
            if(FLASH_enERROR_OK == enErrorReg)
2007c1b4:	4605      	mov	r5, r0
2007c1b6:	b9b8      	cbnz	r0, 2007c1e8 <FLASH__enWriteHalfWorld+0xf0>
                uxCounter = 32UL;
2007c1b8:	2320      	movs	r3, #32
2007c1ba:	9302      	str	r3, [sp, #8]
                    enErrorReg = FLASH__enWriteBuffer(enModuleArg, (const UBase_t*) puxPageData, uxAddressPage, &uxCounter);
2007c1bc:	462a      	mov	r2, r5
2007c1be:	eb08 0105 	add.w	r1, r8, r5
2007c1c2:	ab02      	add	r3, sp, #8
2007c1c4:	4630      	mov	r0, r6
2007c1c6:	f000 f8b5 	bl	2007c334 <FLASH__enWriteBuffer>
                    uxAddressPage += 0x80UL;/*32World = 4Bytes*32 = 0x80 = 128*/
2007c1ca:	3580      	adds	r5, #128	; 0x80
                    if(FLASH_enERROR_OK != enErrorReg)
2007c1cc:	4604      	mov	r4, r0
2007c1ce:	b910      	cbnz	r0, 2007c1d6 <FLASH__enWriteHalfWorld+0xde>
                for(uxPos = 0UL; uxPos < 8UL; uxPos++)
2007c1d0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
2007c1d4:	d1f2      	bne.n	2007c1bc <FLASH__enWriteHalfWorld+0xc4>
                free(puxPageDataInitial);
2007c1d6:	4640      	mov	r0, r8
2007c1d8:	f000 ff0e 	bl	2007cff8 <__free_veneer>
}
2007c1dc:	4620      	mov	r0, r4
2007c1de:	b004      	add	sp, #16
2007c1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    enErrorReg = FLASH_enERROR_POINTER;
2007c1e4:	2401      	movs	r4, #1
    return (enErrorReg);
2007c1e6:	e795      	b.n	2007c114 <FLASH__enWriteHalfWorld+0x1c>
2007c1e8:	4604      	mov	r4, r0
2007c1ea:	e7f4      	b.n	2007c1d6 <FLASH__enWriteHalfWorld+0xde>
2007c1ec:	200204a8 	.word	0x200204a8

2007c1f0 <FLASH__enWriteByte>:

FLASH_nERROR FLASH__enWriteByte (FLASH_nMODULE enModuleArg, uint8_t u8DataArg, UBase_t uxAddressArg)
{
2007c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2007c1f4:	b084      	sub	sp, #16
    enErasedReg = FLASH_enERASED_YES;
2007c1f6:	2300      	movs	r3, #0
{
2007c1f8:	460f      	mov	r7, r1
2007c1fa:	4606      	mov	r6, r0
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c1fc:	a901      	add	r1, sp, #4
{
2007c1fe:	4615      	mov	r5, r2
    enErasedReg = FLASH_enERASED_YES;
2007c200:	9303      	str	r3, [sp, #12]
    uxFlashSize = 0UL;
2007c202:	9301      	str	r3, [sp, #4]
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c204:	f000 fd76 	bl	2007ccf4 <FLASH__enGetSize>
    if(FLASH_enERROR_OK == enErrorReg)
2007c208:	4604      	mov	r4, r0
2007c20a:	b118      	cbz	r0, 2007c214 <FLASH__enWriteByte+0x24>
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH_enWriteAux(enModuleArg, (UBase_t) u8DataArg, uxAddressArg, FLASH_enVARIABLE_BYTE);
    return (enErrorReg);
}
2007c20c:	4620      	mov	r0, r4
2007c20e:	b004      	add	sp, #16
2007c210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSize);
2007c214:	9901      	ldr	r1, [sp, #4]
2007c216:	4628      	mov	r0, r5
2007c218:	f000 f94c 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c21c:	4604      	mov	r4, r0
2007c21e:	2800      	cmp	r0, #0
2007c220:	d1f4      	bne.n	2007c20c <FLASH__enWriteByte+0x1c>
        enErrorReg = FLASH_enIsDataErased(uxAddressArg, enVariableTypeArg, &enErasedReg);
2007c222:	4601      	mov	r1, r0
2007c224:	aa03      	add	r2, sp, #12
2007c226:	4628      	mov	r0, r5
2007c228:	f000 fab2 	bl	2007c790 <FLASH_enIsDataErased>
    if(FLASH_enERROR_OK == enErrorReg)
2007c22c:	4604      	mov	r4, r0
2007c22e:	2800      	cmp	r0, #0
2007c230:	d1ec      	bne.n	2007c20c <FLASH__enWriteByte+0x1c>
        if(FLASH_enERASED_YES == enErasedReg)
2007c232:	9b03      	ldr	r3, [sp, #12]
2007c234:	b9ab      	cbnz	r3, 2007c262 <FLASH__enWriteByte+0x72>
        uxAddressAligned &= 0x3UL;
2007c236:	f005 0803 	and.w	r8, r5, #3
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c23a:	4603      	mov	r3, r0
2007c23c:	462a      	mov	r2, r5
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c23e:	4d29      	ldr	r5, [pc, #164]	; (2007c2e4 <FLASH__enWriteByte+0xf4>)
2007c240:	f8d8 0000 	ldr.w	r0, [r8]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c244:	4639      	mov	r1, r7
            uxDataAux = *((UBase_t*) uxAddressAligned);
2007c246:	6028      	str	r0, [r5, #0]
            enErrorReg = FLASH__enReplaceData((void*) &uxDataAux, uxDataArg, uxAddressArg, enVariableTypeArg);
2007c248:	4628      	mov	r0, r5
2007c24a:	f000 fa85 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c24e:	4604      	mov	r4, r0
2007c250:	2800      	cmp	r0, #0
2007c252:	d1db      	bne.n	2007c20c <FLASH__enWriteByte+0x1c>
                enErrorReg = FLASH__enWriteWord(enModuleArg, uxDataAux, uxAddressAligned);
2007c254:	4642      	mov	r2, r8
2007c256:	6829      	ldr	r1, [r5, #0]
2007c258:	4630      	mov	r0, r6
2007c25a:	f000 f845 	bl	2007c2e8 <FLASH__enWriteWord>
2007c25e:	4604      	mov	r4, r0
2007c260:	e7d4      	b.n	2007c20c <FLASH__enWriteByte+0x1c>
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c262:	4669      	mov	r1, sp
2007c264:	4630      	mov	r0, r6
            uxSectorSizeReg = 0UL;
2007c266:	9400      	str	r4, [sp, #0]
            enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c268:	f000 fdb6 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
            if(FLASH_enERROR_OK == enErrorReg)
2007c26c:	4604      	mov	r4, r0
2007c26e:	2800      	cmp	r0, #0
2007c270:	d1cc      	bne.n	2007c20c <FLASH__enWriteByte+0x1c>
                puxPageDataInitial = (UBase_t*) malloc( (size_t) (sizeof(uint8_t) * uxSectorSizeReg));
2007c272:	9d00      	ldr	r5, [sp, #0]
2007c274:	4628      	mov	r0, r5
2007c276:	f000 feb7 	bl	2007cfe8 <__malloc_veneer>
                if(0UL == (uintptr_t) puxPageDataInitial)
2007c27a:	4680      	mov	r8, r0
2007c27c:	b370      	cbz	r0, 2007c2dc <FLASH__enWriteByte+0xec>
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c27e:	08a9      	lsrs	r1, r5, #2
2007c280:	d008      	beq.n	2007c294 <FLASH__enWriteByte+0xa4>
2007c282:	eb08 0181 	add.w	r1, r8, r1, lsl #2
2007c286:	4643      	mov	r3, r8
                    *puxPageData = *puxAddress;
2007c288:	f854 2b04 	ldr.w	r2, [r4], #4
2007c28c:	f843 2b04 	str.w	r2, [r3], #4
                for(uxPos = 0UL; uxPos < uxTempValue; uxPos++)
2007c290:	428b      	cmp	r3, r1
2007c292:	d1f9      	bne.n	2007c288 <FLASH__enWriteByte+0x98>
                enErrorReg = FLASH__enReplaceData((void*) puxAuxData, uxDataArg, (UBase_t) puxPageData, enVariableTypeArg);
2007c294:	2300      	movs	r3, #0
2007c296:	4642      	mov	r2, r8
2007c298:	4639      	mov	r1, r7
2007c29a:	4640      	mov	r0, r8
2007c29c:	f000 fa5c 	bl	2007c758 <FLASH__enReplaceData>
            if(FLASH_enERROR_OK == enErrorReg)
2007c2a0:	4604      	mov	r4, r0
2007c2a2:	b9a0      	cbnz	r0, 2007c2ce <FLASH__enWriteByte+0xde>
                enErrorReg = FLASH__enPageEraseByAddress(enModuleArg, uxAddressPage);
2007c2a4:	4601      	mov	r1, r0
2007c2a6:	4630      	mov	r0, r6
2007c2a8:	f000 f86e 	bl	2007c388 <FLASH__enPageEraseByAddress>
            if(FLASH_enERROR_OK == enErrorReg)
2007c2ac:	4605      	mov	r5, r0
2007c2ae:	b9b8      	cbnz	r0, 2007c2e0 <FLASH__enWriteByte+0xf0>
                uxCounter = 32UL;
2007c2b0:	2320      	movs	r3, #32
2007c2b2:	9302      	str	r3, [sp, #8]
                    enErrorReg = FLASH__enWriteBuffer(enModuleArg, (const UBase_t*) puxPageData, uxAddressPage, &uxCounter);
2007c2b4:	462a      	mov	r2, r5
2007c2b6:	eb08 0105 	add.w	r1, r8, r5
2007c2ba:	ab02      	add	r3, sp, #8
2007c2bc:	4630      	mov	r0, r6
2007c2be:	f000 f839 	bl	2007c334 <FLASH__enWriteBuffer>
                    uxAddressPage += 0x80UL;/*32World = 4Bytes*32 = 0x80 = 128*/
2007c2c2:	3580      	adds	r5, #128	; 0x80
                    if(FLASH_enERROR_OK != enErrorReg)
2007c2c4:	4604      	mov	r4, r0
2007c2c6:	b910      	cbnz	r0, 2007c2ce <FLASH__enWriteByte+0xde>
                for(uxPos = 0UL; uxPos < 8UL; uxPos++)
2007c2c8:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
2007c2cc:	d1f2      	bne.n	2007c2b4 <FLASH__enWriteByte+0xc4>
                free(puxPageDataInitial);
2007c2ce:	4640      	mov	r0, r8
2007c2d0:	f000 fe92 	bl	2007cff8 <__free_veneer>
}
2007c2d4:	4620      	mov	r0, r4
2007c2d6:	b004      	add	sp, #16
2007c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    enErrorReg = FLASH_enERROR_POINTER;
2007c2dc:	2401      	movs	r4, #1
    return (enErrorReg);
2007c2de:	e795      	b.n	2007c20c <FLASH__enWriteByte+0x1c>
2007c2e0:	4604      	mov	r4, r0
2007c2e2:	e7f4      	b.n	2007c2ce <FLASH__enWriteByte+0xde>
2007c2e4:	200204a8 	.word	0x200204a8

2007c2e8 <FLASH__enWriteWord>:

#include <xApplication_MCU/FLASH/xHeader/FLASH_InitProcess.h>
#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>

FLASH_nERROR FLASH__enWriteWord(FLASH_nMODULE enModuleArg, UBase_t uxDataArg, UBase_t uxAddressArg)
{
2007c2e8:	b570      	push	{r4, r5, r6, lr}
2007c2ea:	b082      	sub	sp, #8
    FLASH_nERROR enErrorReg;
    UBase_t uxFlashSize;

    uxFlashSize = 0UL;
2007c2ec:	2300      	movs	r3, #0
{
2007c2ee:	460e      	mov	r6, r1
2007c2f0:	4604      	mov	r4, r0
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c2f2:	a901      	add	r1, sp, #4
{
2007c2f4:	4615      	mov	r5, r2
    uxFlashSize = 0UL;
2007c2f6:	9301      	str	r3, [sp, #4]
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSize);
2007c2f8:	f000 fcfc 	bl	2007ccf4 <FLASH__enGetSize>
    if(FLASH_enERROR_OK == enErrorReg)
2007c2fc:	b108      	cbz	r0, 2007c302 <FLASH__enWriteWord+0x1a>
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_WORD_WRITE);
    }
    return (enErrorReg);
}
2007c2fe:	b002      	add	sp, #8
2007c300:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSize);
2007c302:	9901      	ldr	r1, [sp, #4]
2007c304:	4628      	mov	r0, r5
2007c306:	f000 f8d5 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c30a:	2800      	cmp	r0, #0
2007c30c:	d1f7      	bne.n	2007c2fe <FLASH__enWriteWord+0x16>
        enErrorReg = FLASH__enSetData(enModuleArg, uxDataArg);
2007c30e:	4631      	mov	r1, r6
2007c310:	4620      	mov	r0, r4
2007c312:	f000 fa65 	bl	2007c7e0 <FLASH__enSetData>
    if(FLASH_enERROR_OK == enErrorReg)
2007c316:	2800      	cmp	r0, #0
2007c318:	d1f1      	bne.n	2007c2fe <FLASH__enWriteWord+0x16>
        enErrorReg = FLASH__enSetAddress(enModuleArg, uxAddressArg);
2007c31a:	f025 0103 	bic.w	r1, r5, #3
2007c31e:	4620      	mov	r0, r4
2007c320:	f000 f9aa 	bl	2007c678 <FLASH__enSetAddress>
    if(FLASH_enERROR_OK == enErrorReg)
2007c324:	2800      	cmp	r0, #0
2007c326:	d1ea      	bne.n	2007c2fe <FLASH__enWriteWord+0x16>
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_WORD_WRITE);
2007c328:	4601      	mov	r1, r0
2007c32a:	4620      	mov	r0, r4
2007c32c:	f000 f886 	bl	2007c43c <FLASH__enInitProcessAndWait>
}
2007c330:	b002      	add	sp, #8
2007c332:	bd70      	pop	{r4, r5, r6, pc}

2007c334 <FLASH__enWriteBuffer>:

FLASH_nERROR FLASH__enWriteBuffer(FLASH_nMODULE enModuleArg, const UBase_t* puxData, UBase_t uxAddressArg, UBase_t* puxCount)
{
2007c334:	b5f0      	push	{r4, r5, r6, r7, lr}
2007c336:	b083      	sub	sp, #12
2007c338:	461f      	mov	r7, r3

    UBase_t uxStartIndexReg;
    UBase_t uxFlashSizeReg;

    uxStartIndexReg = 0U;
    uxFlashSizeReg = 0UL;
2007c33a:	2300      	movs	r3, #0
{
2007c33c:	460e      	mov	r6, r1
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSizeReg);
2007c33e:	a901      	add	r1, sp, #4
{
2007c340:	4604      	mov	r4, r0
2007c342:	4615      	mov	r5, r2
    uxFlashSizeReg = 0UL;
2007c344:	9301      	str	r3, [sp, #4]
    enErrorReg = FLASH__enGetSize(enModuleArg, &uxFlashSizeReg);
2007c346:	f000 fcd5 	bl	2007ccf4 <FLASH__enGetSize>
    if(FLASH_enERROR_OK == enErrorReg)
2007c34a:	b108      	cbz	r0, 2007c350 <FLASH__enWriteBuffer+0x1c>
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_BUFFER_WRITE);
    }
    return (enErrorReg);
}
2007c34c:	b003      	add	sp, #12
2007c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSizeReg);
2007c350:	9901      	ldr	r1, [sp, #4]
2007c352:	4628      	mov	r0, r5
2007c354:	f000 f8ae 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c358:	2800      	cmp	r0, #0
2007c35a:	d1f7      	bne.n	2007c34c <FLASH__enWriteBuffer+0x18>
        enErrorReg = FLASH__enSetDataBuffer(enModuleArg, puxData, uxStartIndexReg, puxCount);
2007c35c:	463b      	mov	r3, r7
2007c35e:	f3c5 0284 	ubfx	r2, r5, #2, #5
2007c362:	4631      	mov	r1, r6
2007c364:	4620      	mov	r0, r4
2007c366:	f000 fa6b 	bl	2007c840 <FLASH__enSetDataBuffer>
    if(FLASH_enERROR_OK == enErrorReg)
2007c36a:	2800      	cmp	r0, #0
2007c36c:	d1ee      	bne.n	2007c34c <FLASH__enWriteBuffer+0x18>
        enErrorReg = FLASH__enSetAddress(enModuleArg, uxAddressArg);
2007c36e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
2007c372:	4620      	mov	r0, r4
2007c374:	f000 f980 	bl	2007c678 <FLASH__enSetAddress>
    if(FLASH_enERROR_OK == enErrorReg)
2007c378:	2800      	cmp	r0, #0
2007c37a:	d1e7      	bne.n	2007c34c <FLASH__enWriteBuffer+0x18>
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_BUFFER_WRITE);
2007c37c:	2104      	movs	r1, #4
2007c37e:	4620      	mov	r0, r4
2007c380:	f000 f85c 	bl	2007c43c <FLASH__enInitProcessAndWait>
}
2007c384:	b003      	add	sp, #12
2007c386:	bdf0      	pop	{r4, r5, r6, r7, pc}

2007c388 <FLASH__enPageEraseByAddress>:

#include <xApplication_MCU/FLASH/xHeader/FLASH_InitProcess.h>
#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>

FLASH_nERROR FLASH__enPageEraseByAddress(FLASH_nMODULE enModuleArg, UBase_t uxAddressArg)
{
2007c388:	b530      	push	{r4, r5, lr}
2007c38a:	b083      	sub	sp, #12
    FLASH_nERROR enErrorReg;
    UBase_t uxFlashSizeReg;
    UBase_t uxSectorSizeReg;

    uxFlashSizeReg = 0UL;
2007c38c:	2300      	movs	r3, #0
{
2007c38e:	460d      	mov	r5, r1
2007c390:	4604      	mov	r4, r0
    uxSectorSizeReg = 0UL;
    enErrorReg = FLASH__enGetSizeInBytes(enModuleArg, &uxFlashSizeReg);
2007c392:	4669      	mov	r1, sp
    uxSectorSizeReg = 0UL;
2007c394:	e9cd 3300 	strd	r3, r3, [sp]
    enErrorReg = FLASH__enGetSizeInBytes(enModuleArg, &uxFlashSizeReg);
2007c398:	f000 fcda 	bl	2007cd50 <FLASH__enGetSizeInBytes>
    if(FLASH_enERROR_OK == enErrorReg)
2007c39c:	b108      	cbz	r0, 2007c3a2 <FLASH__enPageEraseByAddress+0x1a>
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_PAGE_ERASE);
    }
    return (enErrorReg);
}
2007c39e:	b003      	add	sp, #12
2007c3a0:	bd30      	pop	{r4, r5, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressArg, uxFlashSizeReg);
2007c3a2:	9900      	ldr	r1, [sp, #0]
2007c3a4:	4628      	mov	r0, r5
2007c3a6:	f000 f885 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c3aa:	2800      	cmp	r0, #0
2007c3ac:	d1f7      	bne.n	2007c39e <FLASH__enPageEraseByAddress+0x16>
        enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c3ae:	a901      	add	r1, sp, #4
2007c3b0:	4620      	mov	r0, r4
2007c3b2:	f000 fd11 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
    if(FLASH_enERROR_OK == enErrorReg)
2007c3b6:	2800      	cmp	r0, #0
2007c3b8:	d1f1      	bne.n	2007c39e <FLASH__enPageEraseByAddress+0x16>
        if(0UL == uxSectorSizeReg)
2007c3ba:	9b01      	ldr	r3, [sp, #4]
2007c3bc:	b913      	cbnz	r3, 2007c3c4 <FLASH__enPageEraseByAddress+0x3c>
            enErrorReg = FLASH_enERROR_VALUE;
2007c3be:	2002      	movs	r0, #2
}
2007c3c0:	b003      	add	sp, #12
2007c3c2:	bd30      	pop	{r4, r5, pc}
        uxSectorSizeReg--;
2007c3c4:	3b01      	subs	r3, #1
        enErrorReg = FLASH__enStartAddressToErase(enModuleArg, uxAddressArg);
2007c3c6:	4620      	mov	r0, r4
2007c3c8:	ea03 0105 	and.w	r1, r3, r5
        uxSectorSizeReg--;
2007c3cc:	9301      	str	r3, [sp, #4]
        enErrorReg = FLASH__enStartAddressToErase(enModuleArg, uxAddressArg);
2007c3ce:	f000 f979 	bl	2007c6c4 <FLASH__enStartAddressToErase>
    if(FLASH_enERROR_OK == enErrorReg)
2007c3d2:	2800      	cmp	r0, #0
2007c3d4:	d1e3      	bne.n	2007c39e <FLASH__enPageEraseByAddress+0x16>
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_PAGE_ERASE);
2007c3d6:	2101      	movs	r1, #1
2007c3d8:	4620      	mov	r0, r4
2007c3da:	f000 f82f 	bl	2007c43c <FLASH__enInitProcessAndWait>
}
2007c3de:	b003      	add	sp, #12
2007c3e0:	bd30      	pop	{r4, r5, pc}
2007c3e2:	bf00      	nop

2007c3e4 <FLASH__enPageEraseBySector>:

FLASH_nERROR FLASH__enPageEraseBySector(FLASH_nMODULE enModuleArg, UBase_t uxSectorArg)
{
2007c3e4:	b530      	push	{r4, r5, lr}
2007c3e6:	b083      	sub	sp, #12
    FLASH_nERROR enErrorReg;
    UBase_t uxFlashSizeReg;
    UBase_t uxAddressReg;
    UBase_t uxSectorSizeReg;

    uxFlashSizeReg = 0UL;
2007c3e8:	2200      	movs	r2, #0
{
2007c3ea:	460c      	mov	r4, r1
2007c3ec:	4605      	mov	r5, r0
    uxSectorSizeReg = 0UL;
    uxAddressReg = 0UL;
    enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c3ee:	a901      	add	r1, sp, #4
    uxSectorSizeReg = 0UL;
2007c3f0:	e9cd 2200 	strd	r2, r2, [sp]
    enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c3f4:	f000 fcf0 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
    if(FLASH_enERROR_OK == enErrorReg)
2007c3f8:	b9b8      	cbnz	r0, 2007c42a <FLASH__enPageEraseBySector+0x46>
    {
        if(0UL == uxSectorSizeReg)
2007c3fa:	9b01      	ldr	r3, [sp, #4]
2007c3fc:	b1bb      	cbz	r3, 2007c42e <FLASH__enPageEraseBySector+0x4a>
            enErrorReg = FLASH_enERROR_VALUE;
        }
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enGetSizeInBytes(enModuleArg, &uxFlashSizeReg);
2007c3fe:	4669      	mov	r1, sp
2007c400:	4628      	mov	r0, r5
2007c402:	f000 fca5 	bl	2007cd50 <FLASH__enGetSizeInBytes>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c406:	b980      	cbnz	r0, 2007c42a <FLASH__enPageEraseBySector+0x46>
    {
        uxAddressReg = uxSectorArg;
        uxAddressReg *= uxSectorSizeReg;
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressReg, uxFlashSizeReg);
2007c408:	e9dd 1300 	ldrd	r1, r3, [sp]
        uxAddressReg *= uxSectorSizeReg;
2007c40c:	fb03 f404 	mul.w	r4, r3, r4
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxAddressReg, uxFlashSizeReg);
2007c410:	4620      	mov	r0, r4
2007c412:	f000 f84f 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c416:	b940      	cbnz	r0, 2007c42a <FLASH__enPageEraseBySector+0x46>
    {
        enErrorReg = FLASH__enStartAddressToErase(enModuleArg, uxAddressReg);
2007c418:	4621      	mov	r1, r4
2007c41a:	4628      	mov	r0, r5
2007c41c:	f000 f952 	bl	2007c6c4 <FLASH__enStartAddressToErase>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c420:	b918      	cbnz	r0, 2007c42a <FLASH__enPageEraseBySector+0x46>
    {
        enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_PAGE_ERASE);
2007c422:	2101      	movs	r1, #1
2007c424:	4628      	mov	r0, r5
2007c426:	f000 f809 	bl	2007c43c <FLASH__enInitProcessAndWait>
    }
    return (enErrorReg);
}
2007c42a:	b003      	add	sp, #12
2007c42c:	bd30      	pop	{r4, r5, pc}
            enErrorReg = FLASH_enERROR_VALUE;
2007c42e:	2002      	movs	r0, #2
}
2007c430:	b003      	add	sp, #12
2007c432:	bd30      	pop	{r4, r5, pc}

2007c434 <FLASH__enMassErase>:

FLASH_nERROR FLASH__enMassErase(FLASH_nMODULE enModuleArg)
{
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH__enInitProcessAndWait(enModuleArg, FLASH_enPROCESS_MASS_ERASE);
2007c434:	2102      	movs	r1, #2
2007c436:	f000 b801 	b.w	2007c43c <FLASH__enInitProcessAndWait>
2007c43a:	bf00      	nop

2007c43c <FLASH__enInitProcessAndWait>:
#include <xApplication_MCU/FLASH/xHeader/FLASH_InitProcess.h>

#include <xApplication_MCU/FLASH/Intrinsics/xHeader/FLASH_Dependencies.h>

FLASH_nERROR FLASH__enInitProcessAndWait(FLASH_nMODULE enModuleArg, FLASH_nPROCESS enProcessArg)
{
2007c43c:	b530      	push	{r4, r5, lr}
    FLASH_nERROR enErrorReg;
    UBase_t uxKeySelectReg;
    UBase_t uxKeyReg;

    uxKeySelectReg = MCU__uxReadRegister(SYSCTL_BASE, BOOT_CFG_OFFSET,
2007c43e:	2304      	movs	r3, #4
{
2007c440:	b083      	sub	sp, #12
2007c442:	460d      	mov	r5, r1
    uxKeySelectReg = MCU__uxReadRegister(SYSCTL_BASE, BOOT_CFG_OFFSET,
2007c444:	2201      	movs	r2, #1
2007c446:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
{
2007c44a:	4604      	mov	r4, r0
    uxKeySelectReg = MCU__uxReadRegister(SYSCTL_BASE, BOOT_CFG_OFFSET,
2007c44c:	4817      	ldr	r0, [pc, #92]	; (2007c4ac <FLASH__enInitProcessAndWait+0x70>)
2007c44e:	f000 fdcf 	bl	2007cff0 <__MCU__uxReadRegister_veneer>
                                  BOOT_CFG_KEY_MASK, BOOT_CFG_R_KEY_BIT);
    switch(uxKeySelectReg)
2007c452:	4603      	mov	r3, r0
2007c454:	b168      	cbz	r0, 2007c472 <FLASH__enInitProcessAndWait+0x36>
2007c456:	2801      	cmp	r0, #1
2007c458:	d108      	bne.n	2007c46c <FLASH__enInitProcessAndWait+0x30>
        {
            enErrorReg = FLASH__enWait(enModuleArg, enProcessArg, FLASH_TIMEOUT_MAX);
        }
        break;
    case BOOT_CFG_KEY_A442:
        enErrorReg = FLASH__enInitProcess(enModuleArg, FLASH_CTL_WRKEY_KEY1, enProcessArg);
2007c45a:	462a      	mov	r2, r5
2007c45c:	f24a 4142 	movw	r1, #42050	; 0xa442
2007c460:	4620      	mov	r0, r4
2007c462:	f000 fbe7 	bl	2007cc34 <FLASH__enInitProcess>
        if(FLASH_enERROR_OK == enErrorReg)
2007c466:	b1c8      	cbz	r0, 2007c49c <FLASH__enInitProcessAndWait+0x60>
    default:
        enErrorReg = FLASH_enERROR_VALUE;
        break;
    }
    return (enErrorReg);
}
2007c468:	b003      	add	sp, #12
2007c46a:	bd30      	pop	{r4, r5, pc}
    switch(uxKeySelectReg)
2007c46c:	2002      	movs	r0, #2
}
2007c46e:	b003      	add	sp, #12
2007c470:	bd30      	pop	{r4, r5, pc}
        enErrorReg =FLASH__enGetCustomKey(enModuleArg, &uxKeyReg);
2007c472:	a901      	add	r1, sp, #4
2007c474:	4620      	mov	r0, r4
        uxKeyReg = 0UL;
2007c476:	9301      	str	r3, [sp, #4]
        enErrorReg =FLASH__enGetCustomKey(enModuleArg, &uxKeyReg);
2007c478:	f000 fd6e 	bl	2007cf58 <FLASH__enGetCustomKey>
        if(FLASH_enERROR_OK == enErrorReg)
2007c47c:	2800      	cmp	r0, #0
2007c47e:	d1f3      	bne.n	2007c468 <FLASH__enInitProcessAndWait+0x2c>
            enErrorReg = FLASH__enInitProcess(enModuleArg, uxKeyReg, enProcessArg);
2007c480:	462a      	mov	r2, r5
2007c482:	9901      	ldr	r1, [sp, #4]
2007c484:	4620      	mov	r0, r4
2007c486:	f000 fbd5 	bl	2007cc34 <FLASH__enInitProcess>
        if(FLASH_enERROR_OK == enErrorReg)
2007c48a:	2800      	cmp	r0, #0
2007c48c:	d1ec      	bne.n	2007c468 <FLASH__enInitProcessAndWait+0x2c>
            enErrorReg = FLASH__enWait(enModuleArg, enProcessArg, FLASH_TIMEOUT_MAX);
2007c48e:	4a08      	ldr	r2, [pc, #32]	; (2007c4b0 <FLASH__enInitProcessAndWait+0x74>)
2007c490:	4629      	mov	r1, r5
2007c492:	4620      	mov	r0, r4
2007c494:	f000 fd26 	bl	2007cee4 <FLASH__enWait>
}
2007c498:	b003      	add	sp, #12
2007c49a:	bd30      	pop	{r4, r5, pc}
            enErrorReg = FLASH__enWait(enModuleArg, enProcessArg, FLASH_TIMEOUT_MAX);
2007c49c:	4a04      	ldr	r2, [pc, #16]	; (2007c4b0 <FLASH__enInitProcessAndWait+0x74>)
2007c49e:	4629      	mov	r1, r5
2007c4a0:	4620      	mov	r0, r4
}
2007c4a2:	b003      	add	sp, #12
2007c4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            enErrorReg = FLASH__enWait(enModuleArg, enProcessArg, FLASH_TIMEOUT_MAX);
2007c4a8:	f000 bd1c 	b.w	2007cee4 <FLASH__enWait>
2007c4ac:	400fe000 	.word	0x400fe000
2007c4b0:	00895440 	.word	0x00895440

2007c4b4 <MCU__enCheckParams_RAM>:
}
2007c4b4:	4281      	cmp	r1, r0
2007c4b6:	bf94      	ite	ls
2007c4b8:	2003      	movls	r0, #3
2007c4ba:	2000      	movhi	r0, #0
2007c4bc:	4770      	bx	lr
2007c4be:	bf00      	nop

2007c4c0 <MCU__uxCheckParams_RAM>:
    if((uxModuleMaxArg <= uxModuleArg) && (0UL != uxModuleMaxArg))
2007c4c0:	4281      	cmp	r1, r0
2007c4c2:	d801      	bhi.n	2007c4c8 <MCU__uxCheckParams_RAM+0x8>
2007c4c4:	b101      	cbz	r1, 2007c4c8 <MCU__uxCheckParams_RAM+0x8>
        uxModuleMaxArg--;
2007c4c6:	1e48      	subs	r0, r1, #1
}
2007c4c8:	4770      	bx	lr
2007c4ca:	bf00      	nop
2007c4cc:	0000      	movs	r0, r0
	...

2007c4d0 <MCU__enDisableGlobalInterrupt_RAM>:
2007c4d0:	f3ef 8010 	mrs	r0, PRIMASK
2007c4d4:	b672      	cpsid	i
2007c4d6:	f3bf 8f4f 	dsb	sy
2007c4da:	f3bf 8f6f 	isb	sy
2007c4de:	4770      	bx	lr

2007c4e0 <MCU__enEnableGlobalInterrupt_RAM>:
2007c4e0:	f3ef 8010 	mrs	r0, PRIMASK
2007c4e4:	b662      	cpsie	i
2007c4e6:	f3bf 8f4f 	dsb	sy
2007c4ea:	f3bf 8f6f 	isb	sy
2007c4ee:	4770      	bx	lr

2007c4f0 <MCU__vSetGlobalInterrupt_RAM>:
2007c4f0:	f380 8810 	msr	PRIMASK, r0
2007c4f4:	f3bf 8f4f 	dsb	sy
2007c4f8:	f3bf 8f6f 	isb	sy
2007c4fc:	4770      	bx	lr
	...

2007c500 <MCU__enSetGlobalInterrupt_RAM>:
2007c500:	b406      	push	{r1, r2}
2007c502:	f3ef 8110 	mrs	r1, PRIMASK
2007c506:	f380 8810 	msr	PRIMASK, r0
2007c50a:	f3bf 8f4f 	dsb	sy
2007c50e:	f3bf 8f6f 	isb	sy
2007c512:	4608      	mov	r0, r1
2007c514:	bc06      	pop	{r1, r2}
2007c516:	4770      	bx	lr
	...

2007c520 <MCU__enGetGlobalInterrupt_RAM>:
2007c520:	f3ef 8010 	mrs	r0, PRIMASK
2007c524:	4770      	bx	lr
	...

2007c530 <MCU__vSetBasePriorityInterrupt_RAM>:
2007c530:	b406      	push	{r1, r2}
2007c532:	f000 0107 	and.w	r1, r0, #7
2007c536:	ea4f 1141 	mov.w	r1, r1, lsl #5
2007c53a:	f381 8811 	msr	BASEPRI, r1
2007c53e:	f3bf 8f4f 	dsb	sy
2007c542:	f3bf 8f6f 	isb	sy
2007c546:	bc06      	pop	{r1, r2}
2007c548:	4770      	bx	lr
2007c54a:	0000      	.short	0x0000
2007c54c:	00000000 	.word	0x00000000

2007c550 <MCU__enSetBasePriorityInterrupt_RAM>:
2007c550:	b406      	push	{r1, r2}
2007c552:	f000 0107 	and.w	r1, r0, #7
2007c556:	ea4f 1141 	mov.w	r1, r1, lsl #5
2007c55a:	f3ef 8211 	mrs	r2, BASEPRI
2007c55e:	f3c2 1042 	ubfx	r0, r2, #5, #3
2007c562:	f381 8811 	msr	BASEPRI, r1
2007c566:	f3bf 8f4f 	dsb	sy
2007c56a:	f3bf 8f6f 	isb	sy
2007c56e:	bc06      	pop	{r1, r2}
2007c570:	4770      	bx	lr
	...

2007c580 <MCU__enGetBasePriorityInterrupt_RAM>:
2007c580:	b406      	push	{r1, r2}
2007c582:	f3ef 8111 	mrs	r1, BASEPRI
2007c586:	ea4f 1051 	mov.w	r0, r1, lsr #5
2007c58a:	f000 0007 	and.w	r0, r0, #7
2007c58e:	bc06      	pop	{r1, r2}
2007c590:	4770      	bx	lr
	...

2007c5a0 <MCU__enDisableGlobalFault_RAM>:
2007c5a0:	f3ef 8013 	mrs	r0, FAULTMASK
2007c5a4:	b671      	cpsid	f
2007c5a6:	f3bf 8f4f 	dsb	sy
2007c5aa:	f3bf 8f6f 	isb	sy
2007c5ae:	4770      	bx	lr

2007c5b0 <MCU__enEnableGlobalFault_RAM>:
2007c5b0:	f3ef 8013 	mrs	r0, FAULTMASK
2007c5b4:	b661      	cpsie	f
2007c5b6:	f3bf 8f4f 	dsb	sy
2007c5ba:	f3bf 8f6f 	isb	sy
2007c5be:	4770      	bx	lr

2007c5c0 <MCU__enSetGlobalFault_RAM>:
2007c5c0:	b406      	push	{r1, r2}
2007c5c2:	f3ef 8113 	mrs	r1, FAULTMASK
2007c5c6:	f380 8813 	msr	FAULTMASK, r0
2007c5ca:	f3bf 8f4f 	dsb	sy
2007c5ce:	f3bf 8f6f 	isb	sy
2007c5d2:	4608      	mov	r0, r1
2007c5d4:	bc06      	pop	{r1, r2}
2007c5d6:	4770      	bx	lr
	...

2007c5e0 <MCU__enGetGlobalFault_RAM>:
2007c5e0:	f3ef 8013 	mrs	r0, FAULTMASK
2007c5e4:	4770      	bx	lr
	...

2007c5e8 <MCU__enReadRegister_RAM>:
    if(0UL == (uintptr_t) pstRegisterDataArg)
2007c5e8:	b170      	cbz	r0, 2007c608 <MCU__enReadRegister_RAM+0x20>
2007c5ea:	4603      	mov	r3, r0
        puxRegisterAddress = (volatile UBase_t*) uptrRegisterAddress;
2007c5ec:	68c0      	ldr	r0, [r0, #12]
{
2007c5ee:	b410      	push	{r4}
        uxRegisterShift = pstRegisterDataArg->uxShift;
2007c5f0:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
        uxRegisterValue = *puxRegisterAddress;
2007c5f4:	6802      	ldr	r2, [r0, #0]
        if(MCU_MASK_BASE != uxRegisterMask)
2007c5f6:	1c48      	adds	r0, r1, #1
2007c5f8:	d001      	beq.n	2007c5fe <MCU__enReadRegister_RAM+0x16>
            uxRegisterValue >>= uxRegisterShift;
2007c5fa:	40e2      	lsrs	r2, r4
            uxRegisterValue &= uxRegisterMask;
2007c5fc:	400a      	ands	r2, r1
    enErrorReg = MCU_enERROR_OK;
2007c5fe:	2000      	movs	r0, #0
}
2007c600:	f85d 4b04 	ldr.w	r4, [sp], #4
        pstRegisterDataArg->uxValue = (UBase_t) uxRegisterValue;
2007c604:	601a      	str	r2, [r3, #0]
}
2007c606:	4770      	bx	lr
        enErrorReg = MCU_enERROR_POINTER;
2007c608:	2001      	movs	r0, #1
}
2007c60a:	4770      	bx	lr

2007c60c <MCU__uxReadRegister_RAM>:
    volatile UBase_t* puxPeripheral = 0UL;

    uxPeripheralBase += uxOffsetRegister;
    puxPeripheral = (volatile UBase_t*) (uxPeripheralBase);

    uxFeatureValue = *puxPeripheral;
2007c60c:	5840      	ldr	r0, [r0, r1]

    if(MCU_MASK_32 != uxMaskFeature)
2007c60e:	1c51      	adds	r1, r2, #1
2007c610:	d001      	beq.n	2007c616 <MCU__uxReadRegister_RAM+0xa>
    {
        uxFeatureValue >>= uxBitFeature;
2007c612:	40d8      	lsrs	r0, r3
        uxFeatureValue &= uxMaskFeature;
2007c614:	4010      	ands	r0, r2
    }
    return (uxFeatureValue);
}
2007c616:	4770      	bx	lr

2007c618 <FLASH__enReadRegister>:
FLASH_nERROR FLASH__enReadRegister(FLASH_nMODULE enModuleArg, FLASH_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
2007c618:	b199      	cbz	r1, 2007c642 <FLASH__enReadRegister+0x2a>
{
2007c61a:	b538      	push	{r3, r4, r5, lr}
2007c61c:	460c      	mov	r4, r1
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
2007c61e:	2101      	movs	r1, #1
2007c620:	4605      	mov	r5, r0
2007c622:	f7ff ff47 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c626:	b958      	cbnz	r0, 2007c640 <FLASH__enReadRegister+0x28>
    {
        uptrModuleBase = FLASH__uptrBlockBaseAddress(enModuleArg);
2007c628:	4628      	mov	r0, r5
2007c62a:	f000 fcab 	bl	2007cf84 <FLASH__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
2007c62e:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = FLASH__uptrBlockBaseAddress(enModuleArg);
2007c630:	4602      	mov	r2, r0
        enErrorReg = (FLASH_nERROR) MCU__enReadRegister_RAM(pstRegisterDataArg);
2007c632:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
2007c634:	4413      	add	r3, r2
2007c636:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
2007c638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (FLASH_nERROR) MCU__enReadRegister_RAM(pstRegisterDataArg);
2007c63c:	f7ff bfd4 	b.w	2007c5e8 <MCU__enReadRegister_RAM>
}
2007c640:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c642:	2001      	movs	r0, #1
}
2007c644:	4770      	bx	lr
2007c646:	bf00      	nop

2007c648 <FLASH__enWriteRegister>:
FLASH_nERROR FLASH__enWriteRegister(FLASH_nMODULE enModuleArg, FLASH_Register_t* pstRegisterDataArg)
{
    uintptr_t uptrModuleBase;
    FLASH_nERROR enErrorReg;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) pstRegisterDataArg)
2007c648:	b199      	cbz	r1, 2007c672 <FLASH__enWriteRegister+0x2a>
{
2007c64a:	b538      	push	{r3, r4, r5, lr}
2007c64c:	460c      	mov	r4, r1
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM((UBase_t) enModuleArg, (UBase_t) FLASH_enMODULE_MAX);
2007c64e:	2101      	movs	r1, #1
2007c650:	4605      	mov	r5, r0
2007c652:	f7ff ff2f 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c656:	b958      	cbnz	r0, 2007c670 <FLASH__enWriteRegister+0x28>
    {
        uptrModuleBase = FLASH__uptrBlockBaseAddress(enModuleArg);
2007c658:	4628      	mov	r0, r5
2007c65a:	f000 fc93 	bl	2007cf84 <FLASH__uptrBlockBaseAddress>
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
2007c65e:	68e3      	ldr	r3, [r4, #12]
        uptrModuleBase = FLASH__uptrBlockBaseAddress(enModuleArg);
2007c660:	4602      	mov	r2, r0
        enErrorReg = (FLASH_nERROR) MCU__enWriteRegister_RAM(pstRegisterDataArg);
2007c662:	4620      	mov	r0, r4
        pstRegisterDataArg->uptrAddress += uptrModuleBase;
2007c664:	4413      	add	r3, r2
2007c666:	60e3      	str	r3, [r4, #12]
    }
    return (enErrorReg);
}
2007c668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        enErrorReg = (FLASH_nERROR) MCU__enWriteRegister_RAM(pstRegisterDataArg);
2007c66c:	f000 bc8e 	b.w	2007cf8c <MCU__enWriteRegister_RAM>
}
2007c670:	bd38      	pop	{r3, r4, r5, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c672:	2001      	movs	r0, #1
}
2007c674:	4770      	bx	lr
2007c676:	bf00      	nop

2007c678 <FLASH__enSetAddress>:
#include <xDriver_MCU/FLASH/Driver/Intrinsics/FLASH_Intrinsics.h>
#include <xDriver_MCU/FLASH/Peripheral/FLASH_Peripheral.h>


FLASH_nERROR FLASH__enSetAddress(FLASH_nMODULE enModuleArg, UBase_t uxAddressArg)
{
2007c678:	b510      	push	{r4, lr}
2007c67a:	b084      	sub	sp, #16
2007c67c:	460a      	mov	r2, r1
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_ADDRESS_R_OFFSET_BIT;
2007c67e:	2300      	movs	r3, #0
    stRegister.uxMask = FLASH_ADDRESS_OFFSET_MASK;
2007c680:	4c04      	ldr	r4, [pc, #16]	; (2007c694 <FLASH__enSetAddress+0x1c>)
    stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
    stRegister.uxValue = uxAddressArg;
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c682:	4669      	mov	r1, sp
    stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
2007c684:	e9cd 3302 	strd	r3, r3, [sp, #8]
    stRegister.uxValue = uxAddressArg;
2007c688:	e9cd 2400 	strd	r2, r4, [sp]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c68c:	f7ff ffdc 	bl	2007c648 <FLASH__enWriteRegister>

    return (enErrorReg);
}
2007c690:	b004      	add	sp, #16
2007c692:	bd10      	pop	{r4, pc}
2007c694:	000fffff 	.word	0x000fffff

2007c698 <FLASH__enGetAddress>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxAddressArg)
2007c698:	b179      	cbz	r1, 2007c6ba <FLASH__enGetAddress+0x22>
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_ADDRESS_R_OFFSET_BIT;
2007c69a:	2300      	movs	r3, #0
        stRegister.uxMask = FLASH_ADDRESS_OFFSET_MASK;
2007c69c:	4a08      	ldr	r2, [pc, #32]	; (2007c6c0 <FLASH__enGetAddress+0x28>)
{
2007c69e:	b510      	push	{r4, lr}
2007c6a0:	b084      	sub	sp, #16
2007c6a2:	460c      	mov	r4, r1
        stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c6a4:	4669      	mov	r1, sp
        stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
2007c6a6:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_ADDRESS_OFFSET_MASK;
2007c6a8:	e9cd 2301 	strd	r2, r3, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c6ac:	f7ff ffb4 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c6b0:	b908      	cbnz	r0, 2007c6b6 <FLASH__enGetAddress+0x1e>
    {
        *puxAddressArg = stRegister.uxValue;
2007c6b2:	9b00      	ldr	r3, [sp, #0]
2007c6b4:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007c6b6:	b004      	add	sp, #16
2007c6b8:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c6ba:	2001      	movs	r0, #1
}
2007c6bc:	4770      	bx	lr
2007c6be:	bf00      	nop
2007c6c0:	000fffff 	.word	0x000fffff

2007c6c4 <FLASH__enStartAddressToErase>:

FLASH_nERROR FLASH__enStartAddressToErase(FLASH_nMODULE enModuleArg, UBase_t uxAddressArg)
{
2007c6c4:	b530      	push	{r4, r5, lr}
2007c6c6:	b087      	sub	sp, #28
    FLASH_Register_t stRegister;
    UBase_t uxSectorSizeReg;
    FLASH_nERROR enErrorReg;

    uxSectorSizeReg = 0UL;
2007c6c8:	2200      	movs	r2, #0
{
2007c6ca:	460c      	mov	r4, r1
2007c6cc:	4605      	mov	r5, r0
    enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c6ce:	a901      	add	r1, sp, #4
    uxSectorSizeReg = 0UL;
2007c6d0:	9201      	str	r2, [sp, #4]
    enErrorReg = FLASH__enGetSectorSizeInBytes(enModuleArg, &uxSectorSizeReg);
2007c6d2:	f000 fb81 	bl	2007cdd8 <FLASH__enGetSectorSizeInBytes>
    if(FLASH_enERROR_OK == enErrorReg)
2007c6d6:	4603      	mov	r3, r0
2007c6d8:	b978      	cbnz	r0, 2007c6fa <FLASH__enStartAddressToErase+0x36>
    {
        if(0UL == uxSectorSizeReg)
2007c6da:	9a01      	ldr	r2, [sp, #4]
2007c6dc:	b182      	cbz	r2, 2007c700 <FLASH__enStartAddressToErase+0x3c>
            enErrorReg = FLASH_enERROR_VALUE;
        }
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSectorSizeReg--;
2007c6de:	3a01      	subs	r2, #1
        if(0UL != (uxAddressArg & uxSectorSizeReg))
2007c6e0:	4222      	tst	r2, r4
        uxSectorSizeReg--;
2007c6e2:	9201      	str	r2, [sp, #4]
        if(0UL != (uxAddressArg & uxSectorSizeReg))
2007c6e4:	d10c      	bne.n	2007c700 <FLASH__enStartAddressToErase+0x3c>
        }
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_ADDRESS_R_OFFSET_BIT;
        stRegister.uxMask = FLASH_ADDRESS_OFFSET_MASK;
2007c6e6:	4a08      	ldr	r2, [pc, #32]	; (2007c708 <FLASH__enStartAddressToErase+0x44>)
        stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
        stRegister.uxValue = (UBase_t) uxAddressArg;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c6e8:	a902      	add	r1, sp, #8
2007c6ea:	4628      	mov	r0, r5
        stRegister.uptrAddress = FLASH_ADDRESS_OFFSET;
2007c6ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
        stRegister.uxValue = (UBase_t) uxAddressArg;
2007c6f0:	e9cd 4202 	strd	r4, r2, [sp, #8]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c6f4:	f7ff ffa8 	bl	2007c648 <FLASH__enWriteRegister>
2007c6f8:	4603      	mov	r3, r0
    }
    return (enErrorReg);
}
2007c6fa:	4618      	mov	r0, r3
2007c6fc:	b007      	add	sp, #28
2007c6fe:	bd30      	pop	{r4, r5, pc}
            enErrorReg = FLASH_enERROR_VALUE;
2007c700:	2302      	movs	r3, #2
}
2007c702:	4618      	mov	r0, r3
2007c704:	b007      	add	sp, #28
2007c706:	bd30      	pop	{r4, r5, pc}
2007c708:	000fffff 	.word	0x000fffff

2007c70c <FLASH__enExtractData>:
    uint16_t* pu16Data;
    uint8_t* pu8DataAux;
    uint8_t* pu8Data;

    enErrorReg = FLASH_enERROR_OK;
    if((0UL == (uintptr_t) pvDataExtractedArg) || (0UL == (uintptr_t) puxInitialDataArg))
2007c70c:	b168      	cbz	r0, 2007c72a <FLASH__enExtractData+0x1e>
2007c70e:	fab1 fc81 	clz	ip, r1
2007c712:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
2007c716:	b141      	cbz	r1, 2007c72a <FLASH__enExtractData+0x1e>
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        switch(enVariableTypeArg)
2007c718:	2b01      	cmp	r3, #1
2007c71a:	d015      	beq.n	2007c748 <FLASH__enExtractData+0x3c>
2007c71c:	2b02      	cmp	r3, #2
2007c71e:	d008      	beq.n	2007c732 <FLASH__enExtractData+0x26>
2007c720:	b15b      	cbz	r3, 2007c73a <FLASH__enExtractData+0x2e>
2007c722:	f04f 0c02 	mov.w	ip, #2
                enErrorReg = FLASH_enERROR_VALUE;
            break;
        }
    }
    return (enErrorReg);
}
2007c726:	4660      	mov	r0, ip
2007c728:	4770      	bx	lr
        enErrorReg = FLASH_enERROR_POINTER;
2007c72a:	f04f 0c01 	mov.w	ip, #1
}
2007c72e:	4660      	mov	r0, ip
2007c730:	4770      	bx	lr
                *puxData = *puxDataAux;
2007c732:	680b      	ldr	r3, [r1, #0]
2007c734:	6003      	str	r3, [r0, #0]
}
2007c736:	4660      	mov	r0, ip
2007c738:	4770      	bx	lr
                uxOffsetData &= 3UL;
2007c73a:	f002 0203 	and.w	r2, r2, #3
    enErrorReg = FLASH_enERROR_OK;
2007c73e:	469c      	mov	ip, r3
                *pu8Data = *pu8DataAux;
2007c740:	5c8b      	ldrb	r3, [r1, r2]
2007c742:	7003      	strb	r3, [r0, #0]
}
2007c744:	4660      	mov	r0, ip
2007c746:	4770      	bx	lr
                uxOffsetData &= 1UL;
2007c748:	f3c2 0240 	ubfx	r2, r2, #1, #1
                *pu16Data = *pu16DataAux;
2007c74c:	f831 3012 	ldrh.w	r3, [r1, r2, lsl #1]
2007c750:	8003      	strh	r3, [r0, #0]
}
2007c752:	4660      	mov	r0, ip
2007c754:	4770      	bx	lr
2007c756:	bf00      	nop

2007c758 <FLASH__enReplaceData>:
    uint16_t u16DataReg;
    uint8_t u8DataReg;
    uint8_t *pu8DataAux;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) pvDataOutArg)
2007c758:	b138      	cbz	r0, 2007c76a <FLASH__enReplaceData+0x12>
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        switch(enVariableTypeArg)
2007c75a:	2b01      	cmp	r3, #1
2007c75c:	d011      	beq.n	2007c782 <FLASH__enReplaceData+0x2a>
2007c75e:	2b02      	cmp	r3, #2
2007c760:	d006      	beq.n	2007c770 <FLASH__enReplaceData+0x18>
2007c762:	b14b      	cbz	r3, 2007c778 <FLASH__enReplaceData+0x20>
2007c764:	2302      	movs	r3, #2
            enErrorReg = FLASH_enERROR_VALUE;
        break;
        }
    }
    return (enErrorReg);
}
2007c766:	4618      	mov	r0, r3
2007c768:	4770      	bx	lr
        enErrorReg = FLASH_enERROR_POINTER;
2007c76a:	2301      	movs	r3, #1
}
2007c76c:	4618      	mov	r0, r3
2007c76e:	4770      	bx	lr
    enErrorReg = FLASH_enERROR_OK;
2007c770:	2300      	movs	r3, #0
            *puxDataAux = uxDataReg;
2007c772:	6001      	str	r1, [r0, #0]
}
2007c774:	4618      	mov	r0, r3
2007c776:	4770      	bx	lr
            uxOffsetData &= 3UL;
2007c778:	f002 0203 	and.w	r2, r2, #3
            u8DataReg = (uint8_t) uxDataToReplaceArg;
2007c77c:	5481      	strb	r1, [r0, r2]
}
2007c77e:	4618      	mov	r0, r3
2007c780:	4770      	bx	lr
            uxOffsetData &= 1UL;
2007c782:	f3c2 0240 	ubfx	r2, r2, #1, #1
    enErrorReg = FLASH_enERROR_OK;
2007c786:	2300      	movs	r3, #0
            u16DataReg = (uint16_t) uxDataToReplaceArg;
2007c788:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
}
2007c78c:	4618      	mov	r0, r3
2007c78e:	4770      	bx	lr

2007c790 <FLASH_enIsDataErased>:
    uint8_t* pu8DataValue;
    uint16_t* pu16DataValue;
    UBase_t* puxDataValue;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penErrasedArg)
2007c790:	b132      	cbz	r2, 2007c7a0 <FLASH_enIsDataErased+0x10>
        enErrorReg = FLASH_enERROR_POINTER;
    }

    if(FLASH_enERROR_OK == enErrorReg)
    {
        switch(enVariableTypeArg)
2007c792:	2901      	cmp	r1, #1
2007c794:	d016      	beq.n	2007c7c4 <FLASH_enIsDataErased+0x34>
2007c796:	2902      	cmp	r1, #2
2007c798:	d004      	beq.n	2007c7a4 <FLASH_enIsDataErased+0x14>
2007c79a:	b161      	cbz	r1, 2007c7b6 <FLASH_enIsDataErased+0x26>
2007c79c:	2002      	movs	r0, #2
                enErrorReg = FLASH_enERROR_VALUE;
            break;
        }
    }
    return (enErrorReg);
}
2007c79e:	4770      	bx	lr
        enErrorReg = FLASH_enERROR_POINTER;
2007c7a0:	2001      	movs	r0, #1
2007c7a2:	4770      	bx	lr
                uxAddressArg &= ~ (UBase_t) 3UL;
2007c7a4:	f020 0003 	bic.w	r0, r0, #3
                if((UBase_t) MCU_MASK_BASE == *(puxDataValue))
2007c7a8:	6803      	ldr	r3, [r0, #0]
2007c7aa:	3301      	adds	r3, #1
2007c7ac:	d006      	beq.n	2007c7bc <FLASH_enIsDataErased+0x2c>
                    *penErrasedArg = FLASH_enERASED_NO;
2007c7ae:	2301      	movs	r3, #1
    enErrorReg = FLASH_enERROR_OK;
2007c7b0:	2000      	movs	r0, #0
                    *penErrasedArg = FLASH_enERASED_NO;
2007c7b2:	6013      	str	r3, [r2, #0]
2007c7b4:	4770      	bx	lr
                if((uint8_t) MCU_MASK_8 == *(pu8DataValue))
2007c7b6:	7803      	ldrb	r3, [r0, #0]
2007c7b8:	2bff      	cmp	r3, #255	; 0xff
2007c7ba:	d1f8      	bne.n	2007c7ae <FLASH_enIsDataErased+0x1e>
                    *penErrasedArg = FLASH_enERASED_YES;
2007c7bc:	2300      	movs	r3, #0
    enErrorReg = FLASH_enERROR_OK;
2007c7be:	4618      	mov	r0, r3
                    *penErrasedArg = FLASH_enERASED_YES;
2007c7c0:	6013      	str	r3, [r2, #0]
2007c7c2:	4770      	bx	lr
                uxAddressArg &= ~ (UBase_t) 1UL;
2007c7c4:	f020 0001 	bic.w	r0, r0, #1
                if((uint16_t) MCU_MASK_16 == *(pu16DataValue))
2007c7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
2007c7cc:	8801      	ldrh	r1, [r0, #0]
2007c7ce:	4299      	cmp	r1, r3
2007c7d0:	d0f4      	beq.n	2007c7bc <FLASH_enIsDataErased+0x2c>
                    *penErrasedArg = FLASH_enERASED_NO;
2007c7d2:	2301      	movs	r3, #1
    enErrorReg = FLASH_enERROR_OK;
2007c7d4:	2000      	movs	r0, #0
                    *penErrasedArg = FLASH_enERASED_NO;
2007c7d6:	6013      	str	r3, [r2, #0]
2007c7d8:	4770      	bx	lr
2007c7da:	bf00      	nop
2007c7dc:	0000      	movs	r0, r0
	...

2007c7e0 <FLASH__enSetData>:
#include <xDriver_MCU/Common/MCU_Common.h>
#include <xDriver_MCU/FLASH/Driver/Intrinsics/FLASH_Intrinsics.h>
#include <xDriver_MCU/FLASH/Peripheral/FLASH_Peripheral.h>

FLASH_nERROR FLASH__enSetData(FLASH_nMODULE enModuleArg, UBase_t uxDataArg)
{
2007c7e0:	b510      	push	{r4, lr}
2007c7e2:	b084      	sub	sp, #16
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_DATA_R_DATA_BIT;
    stRegister.uxMask = FLASH_DATA_DATA_MASK;
2007c7e4:	f04f 32ff 	mov.w	r2, #4294967295
    stRegister.uptrAddress = FLASH_DATA_OFFSET;
2007c7e8:	2304      	movs	r3, #4
    stRegister.uxShift = FLASH_DATA_R_DATA_BIT;
2007c7ea:	2400      	movs	r4, #0
    stRegister.uxValue = uxDataArg;
2007c7ec:	9100      	str	r1, [sp, #0]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c7ee:	4669      	mov	r1, sp
    stRegister.uxShift = FLASH_DATA_R_DATA_BIT;
2007c7f0:	9402      	str	r4, [sp, #8]
    stRegister.uxMask = FLASH_DATA_DATA_MASK;
2007c7f2:	9201      	str	r2, [sp, #4]
    stRegister.uptrAddress = FLASH_DATA_OFFSET;
2007c7f4:	9303      	str	r3, [sp, #12]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c7f6:	f7ff ff27 	bl	2007c648 <FLASH__enWriteRegister>

    return (enErrorReg);
}
2007c7fa:	b004      	add	sp, #16
2007c7fc:	bd10      	pop	{r4, pc}
2007c7fe:	bf00      	nop

2007c800 <FLASH__enSetDataOnBuffer>:

FLASH_nERROR FLASH__enSetDataOnBuffer(FLASH_nMODULE enModuleArg, UBase_t uxDataArg, UBase_t uxIndexArg)
{
2007c800:	b570      	push	{r4, r5, r6, lr}
2007c802:	460d      	mov	r5, r1
2007c804:	b084      	sub	sp, #16
    FLASH_Register_t stRegister;
    UBase_t uxOffsetReg;
    FLASH_nERROR enErrorReg;

    enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c806:	2120      	movs	r1, #32
{
2007c808:	4606      	mov	r6, r0
    enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c80a:	4610      	mov	r0, r2
{
2007c80c:	4614      	mov	r4, r2
    enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c80e:	f7ff fe51 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c812:	4603      	mov	r3, r0
2007c814:	b110      	cbz	r0, 2007c81c <FLASH__enSetDataOnBuffer+0x1c>
        stRegister.uxValue = uxDataArg;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
    }

    return (enErrorReg);
}
2007c816:	4618      	mov	r0, r3
2007c818:	b004      	add	sp, #16
2007c81a:	bd70      	pop	{r4, r5, r6, pc}
        uxOffsetReg <<= 2UL;
2007c81c:	00a4      	lsls	r4, r4, #2
        stRegister.uxMask = MCU_MASK_BASE;
2007c81e:	f04f 32ff 	mov.w	r2, #4294967295
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c822:	4630      	mov	r0, r6
2007c824:	4669      	mov	r1, sp
        uxOffsetReg += FLASH_WBn_OFFSET;
2007c826:	f504 7480 	add.w	r4, r4, #256	; 0x100
        stRegister.uxShift = 0UL;
2007c82a:	9302      	str	r3, [sp, #8]
        stRegister.uxMask = MCU_MASK_BASE;
2007c82c:	9201      	str	r2, [sp, #4]
        stRegister.uxValue = uxDataArg;
2007c82e:	9500      	str	r5, [sp, #0]
        stRegister.uptrAddress = (uintptr_t) uxOffsetReg;
2007c830:	9403      	str	r4, [sp, #12]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c832:	f7ff ff09 	bl	2007c648 <FLASH__enWriteRegister>
2007c836:	4603      	mov	r3, r0
}
2007c838:	4618      	mov	r0, r3
2007c83a:	b004      	add	sp, #16
2007c83c:	bd70      	pop	{r4, r5, r6, pc}
2007c83e:	bf00      	nop

2007c840 <FLASH__enSetDataBuffer>:
    UBase_t uxMaxCountReg;
    UBase_t uxCurrentIndexReg;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if((0UL == (uintptr_t) puxDataArg) || (0UL == (uintptr_t) puxCountArg))
2007c840:	2900      	cmp	r1, #0
2007c842:	d03a      	beq.n	2007c8ba <FLASH__enSetDataBuffer+0x7a>
{
2007c844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2007c848:	461e      	mov	r6, r3
2007c84a:	b084      	sub	sp, #16
    if((0UL == (uintptr_t) puxDataArg) || (0UL == (uintptr_t) puxCountArg))
2007c84c:	b923      	cbnz	r3, 2007c858 <FLASH__enSetDataBuffer+0x18>
    {
        enErrorReg = FLASH_enERROR_POINTER;
2007c84e:	2201      	movs	r2, #1
            }
        }
    }

    return (enErrorReg);
}
2007c850:	4610      	mov	r0, r2
2007c852:	b004      	add	sp, #16
2007c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxMaxCountReg, (32UL + 1UL));
2007c858:	4607      	mov	r7, r0
        uxMaxCountReg =  uxStartIndexArg + *puxCountArg;
2007c85a:	6818      	ldr	r0, [r3, #0]
2007c85c:	468a      	mov	sl, r1
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxMaxCountReg, (32UL + 1UL));
2007c85e:	2121      	movs	r1, #33	; 0x21
2007c860:	4410      	add	r0, r2
2007c862:	4615      	mov	r5, r2
2007c864:	f7ff fe26 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c868:	4680      	mov	r8, r0
2007c86a:	bb48      	cbnz	r0, 2007c8c0 <FLASH__enSetDataBuffer+0x80>
        uxCurrentIndexReg <<= 2UL;
2007c86c:	00ad      	lsls	r5, r5, #2
        while((0UL != *puxCountArg) && (FLASH_enERROR_OK == enErrorReg))
2007c86e:	6834      	ldr	r4, [r6, #0]
            stRegister.uxMask = MCU_MASK_BASE;
2007c870:	f04f 39ff 	mov.w	r9, #4294967295
        uxCurrentIndexReg += FLASH_WBn_OFFSET;
2007c874:	f505 7580 	add.w	r5, r5, #256	; 0x100
                    uxCurrentIndexReg = FLASH_WBn_OFFSET;
2007c878:	2200      	movs	r2, #0
2007c87a:	e000      	b.n	2007c87e <FLASH__enSetDataBuffer+0x3e>
        while((0UL != *puxCountArg) && (FLASH_enERROR_OK == enErrorReg))
2007c87c:	6834      	ldr	r4, [r6, #0]
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c87e:	4669      	mov	r1, sp
2007c880:	4638      	mov	r0, r7
        while((0UL != *puxCountArg) && (FLASH_enERROR_OK == enErrorReg))
2007c882:	2c00      	cmp	r4, #0
2007c884:	d0e4      	beq.n	2007c850 <FLASH__enSetDataBuffer+0x10>
2007c886:	2a00      	cmp	r2, #0
2007c888:	d1e2      	bne.n	2007c850 <FLASH__enSetDataBuffer+0x10>
            stRegister.uxValue = *puxDataArg;
2007c88a:	f8da 3000 	ldr.w	r3, [sl]
            stRegister.uptrAddress = (uintptr_t) uxCurrentIndexReg;
2007c88e:	9503      	str	r5, [sp, #12]
            stRegister.uxValue = *puxDataArg;
2007c890:	9300      	str	r3, [sp, #0]
            stRegister.uxMask = MCU_MASK_BASE;
2007c892:	e9cd 9801 	strd	r9, r8, [sp, #4]
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c896:	f7ff fed7 	bl	2007c648 <FLASH__enWriteRegister>
            if(FLASH_enERROR_OK == enErrorReg)
2007c89a:	4602      	mov	r2, r0
2007c89c:	2800      	cmp	r0, #0
2007c89e:	d1ed      	bne.n	2007c87c <FLASH__enSetDataBuffer+0x3c>
                uxCurrentIndexReg += 4UL;
2007c8a0:	3504      	adds	r5, #4
                (*puxCountArg)--;
2007c8a2:	6834      	ldr	r4, [r6, #0]
                puxDataArg += 1UL;
2007c8a4:	f10a 0a04 	add.w	sl, sl, #4
                    uxCurrentIndexReg = FLASH_WBn_OFFSET;
2007c8a8:	f5b5 7fbe 	cmp.w	r5, #380	; 0x17c
                (*puxCountArg)--;
2007c8ac:	f104 34ff 	add.w	r4, r4, #4294967295
                    uxCurrentIndexReg = FLASH_WBn_OFFSET;
2007c8b0:	bf88      	it	hi
2007c8b2:	f44f 7580 	movhi.w	r5, #256	; 0x100
                (*puxCountArg)--;
2007c8b6:	6034      	str	r4, [r6, #0]
                if(FLASH_WB31_OFFSET < uxCurrentIndexReg)
2007c8b8:	e7de      	b.n	2007c878 <FLASH__enSetDataBuffer+0x38>
        enErrorReg = FLASH_enERROR_POINTER;
2007c8ba:	2201      	movs	r2, #1
}
2007c8bc:	4610      	mov	r0, r2
2007c8be:	4770      	bx	lr
2007c8c0:	4602      	mov	r2, r0
    return (enErrorReg);
2007c8c2:	e7c5      	b.n	2007c850 <FLASH__enSetDataBuffer+0x10>

2007c8c4 <FLASH__enSetDataBufferValidByNumber>:

FLASH_nERROR FLASH__enSetDataBufferValidByNumber(FLASH_nMODULE enModuleArg, UBase_t uxIndexArg)
{
2007c8c4:	b570      	push	{r4, r5, r6, lr}
2007c8c6:	460c      	mov	r4, r1
2007c8c8:	b084      	sub	sp, #16
2007c8ca:	4605      	mov	r5, r0
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c8cc:	2120      	movs	r1, #32
2007c8ce:	4620      	mov	r0, r4
2007c8d0:	f7ff fdf0 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c8d4:	b108      	cbz	r0, 2007c8da <FLASH__enSetDataBufferValidByNumber+0x16>
        stRegister.uxValue = FLASH_WBVAL_WB0_NEWDATA;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
    }

    return (enErrorReg);
}
2007c8d6:	b004      	add	sp, #16
2007c8d8:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = FLASH_WBVAL_WB0_NEWDATA;
2007c8da:	2201      	movs	r2, #1
2007c8dc:	2301      	movs	r3, #1
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c8de:	2630      	movs	r6, #48	; 0x30
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c8e0:	4669      	mov	r1, sp
2007c8e2:	4628      	mov	r0, r5
        stRegister.uxShift = uxIndexArg;
2007c8e4:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c8e6:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = FLASH_WBVAL_WB0_NEWDATA;
2007c8e8:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c8ec:	f7ff feac 	bl	2007c648 <FLASH__enWriteRegister>
}
2007c8f0:	b004      	add	sp, #16
2007c8f2:	bd70      	pop	{r4, r5, r6, pc}

2007c8f4 <FLASH__enSetDataBufferInvalidByNumber>:

FLASH_nERROR FLASH__enSetDataBufferInvalidByNumber(FLASH_nMODULE enModuleArg, UBase_t uxIndexArg)
{
2007c8f4:	b570      	push	{r4, r5, r6, lr}
2007c8f6:	460c      	mov	r4, r1
2007c8f8:	b084      	sub	sp, #16
2007c8fa:	4605      	mov	r5, r0
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c8fc:	2120      	movs	r1, #32
2007c8fe:	4620      	mov	r0, r4
2007c900:	f7ff fdd8 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    if(FLASH_enERROR_OK == enErrorReg)
2007c904:	b108      	cbz	r0, 2007c90a <FLASH__enSetDataBufferInvalidByNumber+0x16>
        stRegister.uxValue = FLASH_WBVAL_WB0_NODATA;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
    }

    return (enErrorReg);
}
2007c906:	b004      	add	sp, #16
2007c908:	bd70      	pop	{r4, r5, r6, pc}
        stRegister.uxValue = FLASH_WBVAL_WB0_NODATA;
2007c90a:	2200      	movs	r2, #0
2007c90c:	2301      	movs	r3, #1
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c90e:	2630      	movs	r6, #48	; 0x30
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c910:	4669      	mov	r1, sp
2007c912:	4628      	mov	r0, r5
        stRegister.uxShift = uxIndexArg;
2007c914:	9402      	str	r4, [sp, #8]
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c916:	9603      	str	r6, [sp, #12]
        stRegister.uxValue = FLASH_WBVAL_WB0_NODATA;
2007c918:	e9cd 2300 	strd	r2, r3, [sp]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c91c:	f7ff fe94 	bl	2007c648 <FLASH__enWriteRegister>
}
2007c920:	b004      	add	sp, #16
2007c922:	bd70      	pop	{r4, r5, r6, pc}

2007c924 <FLASH__enSetDataBufferValidByMask>:

FLASH_nERROR FLASH__enSetDataBufferValidByMask(FLASH_nMODULE enModuleArg, UBase_t uxIndexMaskArg)
{
2007c924:	b500      	push	{lr}
2007c926:	b085      	sub	sp, #20
2007c928:	460b      	mov	r3, r1
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
2007c92a:	ed9f 7b07 	vldr	d7, [pc, #28]	; 2007c948 <FLASH__enSetDataBufferValidByMask+0x24>
    stRegister.uxMask = uxIndexMaskArg;
    stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
    stRegister.uxValue = uxIndexMaskArg;
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c92e:	4669      	mov	r1, sp
    stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
2007c930:	ed8d 7b02 	vstr	d7, [sp, #8]
    stRegister.uxValue = uxIndexMaskArg;
2007c934:	e9cd 3300 	strd	r3, r3, [sp]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c938:	f7ff fe86 	bl	2007c648 <FLASH__enWriteRegister>

    return (enErrorReg);
}
2007c93c:	b005      	add	sp, #20
2007c93e:	f85d fb04 	ldr.w	pc, [sp], #4
2007c942:	bf00      	nop
2007c944:	f3af 8000 	nop.w
2007c948:	00000000 	.word	0x00000000
2007c94c:	00000030 	.word	0x00000030

2007c950 <FLASH__enSetDataBufferInvalidByMask>:

FLASH_nERROR FLASH__enSetDataBufferInvalidByMask(FLASH_nMODULE enModuleArg, UBase_t uxIndexMaskArg)
{
2007c950:	b510      	push	{r4, lr}
2007c952:	b084      	sub	sp, #16
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
2007c954:	2300      	movs	r3, #0
{
2007c956:	460c      	mov	r4, r1
    stRegister.uxMask = uxIndexMaskArg;
    stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c958:	2230      	movs	r2, #48	; 0x30
    stRegister.uxValue = 0UL;
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c95a:	4669      	mov	r1, sp
    stRegister.uxValue = 0UL;
2007c95c:	9300      	str	r3, [sp, #0]
    stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c95e:	9203      	str	r2, [sp, #12]
    stRegister.uxMask = uxIndexMaskArg;
2007c960:	e9cd 4301 	strd	r4, r3, [sp, #4]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007c964:	f7ff fe70 	bl	2007c648 <FLASH__enWriteRegister>

    return (enErrorReg);
}
2007c968:	b004      	add	sp, #16
2007c96a:	bd10      	pop	{r4, pc}

2007c96c <FLASH__enIsDataBufferValidByNumber>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penValidArg)
2007c96c:	b1ba      	cbz	r2, 2007c99e <FLASH__enIsDataBufferValidByNumber+0x32>
{
2007c96e:	b570      	push	{r4, r5, r6, lr}
2007c970:	460d      	mov	r5, r1
2007c972:	b084      	sub	sp, #16
2007c974:	4606      	mov	r6, r0
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = (FLASH_nERROR) MCU__enCheckParams_RAM(uxIndexArg, 32UL);
2007c976:	2120      	movs	r1, #32
2007c978:	4628      	mov	r0, r5
2007c97a:	4614      	mov	r4, r2
2007c97c:	f7ff fd9a 	bl	2007c4b4 <MCU__enCheckParams_RAM>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c980:	b958      	cbnz	r0, 2007c99a <FLASH__enIsDataBufferValidByNumber+0x2e>
    {
        stRegister.uxShift = uxIndexArg;
        stRegister.uxMask = FLASH_WBVAL_WB0_MASK;
2007c982:	2201      	movs	r2, #1
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c984:	2330      	movs	r3, #48	; 0x30
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c986:	4630      	mov	r0, r6
2007c988:	4669      	mov	r1, sp
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c98a:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_WBVAL_WB0_MASK;
2007c98c:	e9cd 2501 	strd	r2, r5, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c990:	f7ff fe42 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c994:	b908      	cbnz	r0, 2007c99a <FLASH__enIsDataBufferValidByNumber+0x2e>
    {
        *penValidArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007c996:	9b00      	ldr	r3, [sp, #0]
2007c998:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007c99a:	b004      	add	sp, #16
2007c99c:	bd70      	pop	{r4, r5, r6, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c99e:	2001      	movs	r0, #1
}
2007c9a0:	4770      	bx	lr
2007c9a2:	bf00      	nop

2007c9a4 <FLASH__enIsDataBufferValidByMask>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxValidArg)
2007c9a4:	b17a      	cbz	r2, 2007c9c6 <FLASH__enIsDataBufferValidByMask+0x22>
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
        stRegister.uxMask = uxIndexMaskArg;
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c9a6:	2330      	movs	r3, #48	; 0x30
{
2007c9a8:	b510      	push	{r4, lr}
2007c9aa:	4614      	mov	r4, r2
2007c9ac:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
2007c9ae:	2200      	movs	r2, #0
        stRegister.uptrAddress = FLASH_WBVAL_OFFSET;
2007c9b0:	9303      	str	r3, [sp, #12]
        stRegister.uxShift = FLASH_WBVAL_R_WB0_BIT;
2007c9b2:	e9cd 1201 	strd	r1, r2, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c9b6:	4669      	mov	r1, sp
2007c9b8:	f7ff fe2e 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c9bc:	b908      	cbnz	r0, 2007c9c2 <FLASH__enIsDataBufferValidByMask+0x1e>
    {
        *puxValidArg = stRegister.uxValue;
2007c9be:	9b00      	ldr	r3, [sp, #0]
2007c9c0:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007c9c2:	b004      	add	sp, #16
2007c9c4:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c9c6:	2001      	movs	r0, #1
}
2007c9c8:	4770      	bx	lr
2007c9ca:	bf00      	nop
2007c9cc:	0000      	movs	r0, r0
	...

2007c9d0 <FLASH__enIsPrefetchDualModeAvailable>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penStatusArg)
2007c9d0:	b189      	cbz	r1, 2007c9f6 <FLASH__enIsPrefetchDualModeAvailable+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PP_R_PFC_BIT;
        stRegister.uxMask = FLASH_PP_PFC_MASK;
2007c9d2:	2201      	movs	r2, #1
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007c9d4:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007c9d8:	b510      	push	{r4, lr}
2007c9da:	460c      	mov	r4, r1
2007c9dc:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_PFC_BIT;
2007c9de:	211e      	movs	r1, #30
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007c9e0:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_PFC_MASK;
2007c9e2:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007c9e6:	4669      	mov	r1, sp
2007c9e8:	f7ff fe16 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007c9ec:	b908      	cbnz	r0, 2007c9f2 <FLASH__enIsPrefetchDualModeAvailable+0x22>
    {
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007c9ee:	9b00      	ldr	r3, [sp, #0]
2007c9f0:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007c9f2:	b004      	add	sp, #16
2007c9f4:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007c9f6:	2001      	movs	r0, #1
}
2007c9f8:	4770      	bx	lr
2007c9fa:	bf00      	nop

2007c9fc <FLASH__enSetPrefetchMode>:
    FLASH_nBOOLEAN enStatusReg;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    enStatusReg = FLASH_enFALSE;
    if(FLASH_enPREFETCH_MODE_DUAL == enModeArg)
2007c9fc:	b109      	cbz	r1, 2007ca02 <FLASH__enSetPrefetchMode+0x6>
            stRegister.uxValue = (UBase_t) enModeArg;
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
        }
        else
        {
            enErrorReg = FLASH_enERROR_VALUE;
2007c9fe:	2002      	movs	r0, #2
    {
        enErrorReg = FLASH__enClearPrefetchBuffer(enModuleArg);
    }

    return (enErrorReg);
}
2007ca00:	4770      	bx	lr
{
2007ca02:	b510      	push	{r4, lr}
        stRegister.uxMask = FLASH_PP_PFC_MASK;
2007ca04:	2301      	movs	r3, #1
{
2007ca06:	b088      	sub	sp, #32
        stRegister.uxMask = FLASH_PP_PFC_MASK;
2007ca08:	221e      	movs	r2, #30
2007ca0a:	4604      	mov	r4, r0
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ca0c:	a904      	add	r1, sp, #16
        stRegister.uxMask = FLASH_PP_PFC_MASK;
2007ca0e:	e9cd 3205 	strd	r3, r2, [sp, #20]
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ca12:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
2007ca16:	9307      	str	r3, [sp, #28]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ca18:	f7ff fdfe 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007ca1c:	b9e8      	cbnz	r0, 2007ca5a <FLASH__enSetPrefetchMode+0x5e>
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007ca1e:	9b04      	ldr	r3, [sp, #16]
        if(FLASH_enTRUE == enStatusReg)
2007ca20:	2b01      	cmp	r3, #1
2007ca22:	d11c      	bne.n	2007ca5e <FLASH__enSetPrefetchMode+0x62>
            stRegister.uxValue = (UBase_t) enModeArg;
2007ca24:	2200      	movs	r2, #0
2007ca26:	2301      	movs	r3, #1
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ca28:	4669      	mov	r1, sp
2007ca2a:	4620      	mov	r0, r4
            stRegister.uxValue = (UBase_t) enModeArg;
2007ca2c:	e9cd 2300 	strd	r2, r3, [sp]
2007ca30:	221d      	movs	r2, #29
2007ca32:	f640 73c8 	movw	r3, #4040	; 0xfc8
2007ca36:	e9cd 2302 	strd	r2, r3, [sp, #8]
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ca3a:	f7ff fe05 	bl	2007c648 <FLASH__enWriteRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007ca3e:	b960      	cbnz	r0, 2007ca5a <FLASH__enSetPrefetchMode+0x5e>
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007ca40:	2201      	movs	r2, #1
2007ca42:	2301      	movs	r3, #1
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ca44:	a904      	add	r1, sp, #16
2007ca46:	4620      	mov	r0, r4
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007ca48:	e9cd 2304 	strd	r2, r3, [sp, #16]
2007ca4c:	2214      	movs	r2, #20
2007ca4e:	f640 73c8 	movw	r3, #4040	; 0xfc8
2007ca52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ca56:	f7ff fdf7 	bl	2007c648 <FLASH__enWriteRegister>
}
2007ca5a:	b008      	add	sp, #32
2007ca5c:	bd10      	pop	{r4, pc}
            enErrorReg = FLASH_enERROR_VALUE;
2007ca5e:	2002      	movs	r0, #2
}
2007ca60:	b008      	add	sp, #32
2007ca62:	bd10      	pop	{r4, pc}

2007ca64 <FLASH__enGetPrefetchMode>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penModeArg)
2007ca64:	b189      	cbz	r1, 2007ca8a <FLASH__enGetPrefetchMode+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_CONF_R_SPFE_BIT;
        stRegister.uxMask = FLASH_CONF_SPFE_MASK;
2007ca66:	2201      	movs	r2, #1
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
2007ca68:	f640 73c8 	movw	r3, #4040	; 0xfc8
{
2007ca6c:	b510      	push	{r4, lr}
2007ca6e:	460c      	mov	r4, r1
2007ca70:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_CONF_R_SPFE_BIT;
2007ca72:	211d      	movs	r1, #29
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
2007ca74:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_CONF_SPFE_MASK;
2007ca76:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ca7a:	4669      	mov	r1, sp
2007ca7c:	f7ff fdcc 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007ca80:	b908      	cbnz	r0, 2007ca86 <FLASH__enGetPrefetchMode+0x22>
    {
        *penModeArg = (FLASH_nPREFETCH_MODE) stRegister.uxValue;
2007ca82:	9b00      	ldr	r3, [sp, #0]
2007ca84:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007ca86:	b004      	add	sp, #16
2007ca88:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ca8a:	2001      	movs	r0, #1
}
2007ca8c:	4770      	bx	lr
2007ca8e:	bf00      	nop

2007ca90 <FLASH__enEnablePrefetch>:

FLASH_nERROR FLASH__enEnablePrefetch(FLASH_nMODULE enModuleArg)
{
2007ca90:	b570      	push	{r4, r5, r6, lr}
2007ca92:	b088      	sub	sp, #32
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_CONF_R_FPFON_BIT;
    stRegister.uxMask = FLASH_CONF_FPFON_MASK;
    stRegister.uptrAddress = FLASH_CONF_OFFSET;
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007ca94:	2401      	movs	r4, #1
2007ca96:	2501      	movs	r5, #1
2007ca98:	2211      	movs	r2, #17
2007ca9a:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ca9e:	4669      	mov	r1, sp
{
2007caa0:	4606      	mov	r6, r0
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007caa2:	e9cd 4500 	strd	r4, r5, [sp]
2007caa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007caaa:	f7ff fdcd 	bl	2007c648 <FLASH__enWriteRegister>

    if(enErrorReg == FLASH_enERROR_OK)
2007caae:	b108      	cbz	r0, 2007cab4 <FLASH__enEnablePrefetch+0x24>
    {
        enErrorReg = FLASH__enClearPrefetchBuffer(enModuleArg);
    }

    return (enErrorReg);
}
2007cab0:	b008      	add	sp, #32
2007cab2:	bd70      	pop	{r4, r5, r6, pc}
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cab4:	2214      	movs	r2, #20
2007cab6:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007caba:	a904      	add	r1, sp, #16
2007cabc:	4630      	mov	r0, r6
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cabe:	e9cd 4504 	strd	r4, r5, [sp, #16]
2007cac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cac6:	f7ff fdbf 	bl	2007c648 <FLASH__enWriteRegister>
}
2007caca:	b008      	add	sp, #32
2007cacc:	bd70      	pop	{r4, r5, r6, pc}
2007cace:	bf00      	nop

2007cad0 <FLASH__enDisablePrefetch>:

FLASH_nERROR FLASH__enDisablePrefetch(FLASH_nMODULE enModuleArg)
{
2007cad0:	b570      	push	{r4, r5, r6, lr}
2007cad2:	b088      	sub	sp, #32
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = FLASH_CONF_R_FPFOFF_BIT;
    stRegister.uxMask = FLASH_CONF_FPFOFF_MASK;
    stRegister.uptrAddress = FLASH_CONF_OFFSET;
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cad4:	2401      	movs	r4, #1
2007cad6:	2501      	movs	r5, #1
2007cad8:	2210      	movs	r2, #16
2007cada:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cade:	4669      	mov	r1, sp
{
2007cae0:	4606      	mov	r6, r0
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cae2:	e9cd 4500 	strd	r4, r5, [sp]
2007cae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007caea:	f7ff fdad 	bl	2007c648 <FLASH__enWriteRegister>

    if(enErrorReg == FLASH_enERROR_OK)
2007caee:	b108      	cbz	r0, 2007caf4 <FLASH__enDisablePrefetch+0x24>
    {
        enErrorReg = FLASH__enClearPrefetchBuffer(enModuleArg);
    }

    return (enErrorReg);
}
2007caf0:	b008      	add	sp, #32
2007caf2:	bd70      	pop	{r4, r5, r6, pc}
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007caf4:	2214      	movs	r2, #20
2007caf6:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cafa:	a904      	add	r1, sp, #16
2007cafc:	4630      	mov	r0, r6
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cafe:	e9cd 4504 	strd	r4, r5, [sp, #16]
2007cb02:	e9cd 2306 	strd	r2, r3, [sp, #24]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb06:	f7ff fd9f 	bl	2007c648 <FLASH__enWriteRegister>
}
2007cb0a:	b008      	add	sp, #32
2007cb0c:	bd70      	pop	{r4, r5, r6, pc}
2007cb0e:	bf00      	nop

2007cb10 <FLASH__enSetPrefetchState>:

FLASH_nERROR FLASH__enSetPrefetchState(FLASH_nMODULE enModuleArg, FLASH_nPREFETCH_STATE enStateArg)
{
2007cb10:	b5d0      	push	{r4, r6, r7, lr}
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cb12:	2601      	movs	r6, #1
{
2007cb14:	b088      	sub	sp, #32
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cb16:	2701      	movs	r7, #1
{
2007cb18:	4604      	mov	r4, r0
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cb1a:	e9cd 6700 	strd	r6, r7, [sp]
    FLASH_nERROR enErrorReg;

    if(FLASH_enPREFETCH_STATE_OFF == enStateArg)
2007cb1e:	b951      	cbnz	r1, 2007cb36 <FLASH__enSetPrefetchState+0x26>
    stRegister.uxValue = FLASH_CONF_FPFOFF_FORCE;
2007cb20:	2210      	movs	r2, #16
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007cb22:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb26:	4669      	mov	r1, sp
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007cb28:	e9cd 2302 	strd	r2, r3, [sp, #8]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb2c:	f7ff fd8c 	bl	2007c648 <FLASH__enWriteRegister>
    if(enErrorReg == FLASH_enERROR_OK)
2007cb30:	b158      	cbz	r0, 2007cb4a <FLASH__enSetPrefetchState+0x3a>
    else
    {
        enErrorReg = FLASH__enEnablePrefetch(enModuleArg);
    }
    return (enErrorReg);
}
2007cb32:	b008      	add	sp, #32
2007cb34:	bdd0      	pop	{r4, r6, r7, pc}
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007cb36:	2211      	movs	r2, #17
2007cb38:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb3c:	4669      	mov	r1, sp
    stRegister.uxValue = FLASH_CONF_FPFON_FORCE;
2007cb3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb42:	f7ff fd81 	bl	2007c648 <FLASH__enWriteRegister>
    if(enErrorReg == FLASH_enERROR_OK)
2007cb46:	2800      	cmp	r0, #0
2007cb48:	d1f3      	bne.n	2007cb32 <FLASH__enSetPrefetchState+0x22>
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cb4a:	2214      	movs	r2, #20
2007cb4c:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb50:	a904      	add	r1, sp, #16
2007cb52:	4620      	mov	r0, r4
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cb54:	e9cd 6704 	strd	r6, r7, [sp, #16]
2007cb58:	e9cd 2306 	strd	r2, r3, [sp, #24]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cb5c:	f7ff fd74 	bl	2007c648 <FLASH__enWriteRegister>
}
2007cb60:	b008      	add	sp, #32
2007cb62:	bdd0      	pop	{r4, r6, r7, pc}

2007cb64 <FLASH__enIsMirrorModeAvailable>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penStatusArg)
2007cb64:	b189      	cbz	r1, 2007cb8a <FLASH__enIsMirrorModeAvailable+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PP_R_FMM_BIT;
        stRegister.uxMask = FLASH_PP_FMM_MASK;
2007cb66:	2201      	movs	r2, #1
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cb68:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cb6c:	b510      	push	{r4, lr}
2007cb6e:	460c      	mov	r4, r1
2007cb70:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_FMM_BIT;
2007cb72:	211d      	movs	r1, #29
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cb74:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_FMM_MASK;
2007cb76:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cb7a:	4669      	mov	r1, sp
2007cb7c:	f7ff fd4c 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cb80:	b908      	cbnz	r0, 2007cb86 <FLASH__enIsMirrorModeAvailable+0x22>
    {
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007cb82:	9b00      	ldr	r3, [sp, #0]
2007cb84:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cb86:	b004      	add	sp, #16
2007cb88:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cb8a:	2001      	movs	r0, #1
}
2007cb8c:	4770      	bx	lr
2007cb8e:	bf00      	nop

2007cb90 <FLASH__enSetMirrorMode>:


FLASH_nERROR FLASH__enSetMirrorMode(FLASH_nMODULE enModuleArg, FLASH_nSTATE enStateArg)
{
2007cb90:	b530      	push	{r4, r5, lr}
    FLASH_nBOOLEAN enStatusReg;
    FLASH_nERROR enErrorReg;

    enStatusReg = FLASH_enTRUE;
    enErrorReg = FLASH_enERROR_OK;
    if(FLASH_enSTATE_ENA == enStateArg)
2007cb92:	2901      	cmp	r1, #1
{
2007cb94:	b08b      	sub	sp, #44	; 0x2c
2007cb96:	460c      	mov	r4, r1
2007cb98:	4605      	mov	r5, r0
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cb9a:	a906      	add	r1, sp, #24
    if(FLASH_enSTATE_ENA == enStateArg)
2007cb9c:	d01c      	beq.n	2007cbd8 <FLASH__enSetMirrorMode+0x48>
    }

    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_CONF_R_FMME_BIT;
        stRegister.uxMask = FLASH_CONF_FMME_MASK;
2007cb9e:	2301      	movs	r3, #1
        stRegister.uxShift = FLASH_CONF_R_FMME_BIT;
2007cba0:	221e      	movs	r2, #30
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
        stRegister.uxValue = (UBase_t) enStateArg;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cba2:	4628      	mov	r0, r5
        stRegister.uxValue = (UBase_t) enStateArg;
2007cba4:	9406      	str	r4, [sp, #24]
        stRegister.uxMask = FLASH_CONF_FMME_MASK;
2007cba6:	e9cd 3207 	strd	r3, r2, [sp, #28]
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
2007cbaa:	f640 73c8 	movw	r3, #4040	; 0xfc8
2007cbae:	9309      	str	r3, [sp, #36]	; 0x24
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cbb0:	f7ff fd4a 	bl	2007c648 <FLASH__enWriteRegister>
    }

    if(FLASH_enERROR_OK == enErrorReg)
2007cbb4:	b108      	cbz	r0, 2007cbba <FLASH__enSetMirrorMode+0x2a>
    {
        enErrorReg = FLASH__enClearPrefetchBuffer(enModuleArg);
    }

    return (enErrorReg);
}
2007cbb6:	b00b      	add	sp, #44	; 0x2c
2007cbb8:	bd30      	pop	{r4, r5, pc}
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cbba:	ed9f 7b11 	vldr	d7, [pc, #68]	; 2007cc00 <FLASH__enSetMirrorMode+0x70>
2007cbbe:	2214      	movs	r2, #20
2007cbc0:	f640 73c8 	movw	r3, #4040	; 0xfc8
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cbc4:	a902      	add	r1, sp, #8
2007cbc6:	4628      	mov	r0, r5
    stRegister.uxValue = FLASH_CONF_CLRTV_CLEAR;
2007cbc8:	ed8d 7b02 	vstr	d7, [sp, #8]
2007cbcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cbd0:	f7ff fd3a 	bl	2007c648 <FLASH__enWriteRegister>
}
2007cbd4:	b00b      	add	sp, #44	; 0x2c
2007cbd6:	bd30      	pop	{r4, r5, pc}
        stRegister.uxShift = FLASH_PP_R_FMM_BIT;
2007cbd8:	231d      	movs	r3, #29
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cbda:	9101      	str	r1, [sp, #4]
        stRegister.uxShift = FLASH_PP_R_FMM_BIT;
2007cbdc:	e9cd 4307 	strd	r4, r3, [sp, #28]
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cbe0:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
2007cbe4:	9309      	str	r3, [sp, #36]	; 0x24
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cbe6:	f7ff fd17 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007cbea:	2800      	cmp	r0, #0
2007cbec:	d1e3      	bne.n	2007cbb6 <FLASH__enSetMirrorMode+0x26>
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007cbee:	9b06      	ldr	r3, [sp, #24]
        if(FLASH_enTRUE != enStatusReg)
2007cbf0:	9901      	ldr	r1, [sp, #4]
2007cbf2:	2b01      	cmp	r3, #1
2007cbf4:	d0d3      	beq.n	2007cb9e <FLASH__enSetMirrorMode+0xe>
2007cbf6:	2002      	movs	r0, #2
    return (enErrorReg);
2007cbf8:	e7dd      	b.n	2007cbb6 <FLASH__enSetMirrorMode+0x26>
2007cbfa:	bf00      	nop
2007cbfc:	f3af 8000 	nop.w
2007cc00:	00000001 	.word	0x00000001
2007cc04:	00000001 	.word	0x00000001

2007cc08 <FLASH__enGetMirrorMode>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penStateArg)
2007cc08:	b189      	cbz	r1, 2007cc2e <FLASH__enGetMirrorMode+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_CONF_R_FMME_BIT;
        stRegister.uxMask = FLASH_CONF_FMME_MASK;
2007cc0a:	2201      	movs	r2, #1
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
2007cc0c:	f640 73c8 	movw	r3, #4040	; 0xfc8
{
2007cc10:	b510      	push	{r4, lr}
2007cc12:	460c      	mov	r4, r1
2007cc14:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_CONF_R_FMME_BIT;
2007cc16:	211e      	movs	r1, #30
        stRegister.uptrAddress = FLASH_CONF_OFFSET;
2007cc18:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_CONF_FMME_MASK;
2007cc1a:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cc1e:	4669      	mov	r1, sp
2007cc20:	f7ff fcfa 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cc24:	b908      	cbnz	r0, 2007cc2a <FLASH__enGetMirrorMode+0x22>
    {
        *penStateArg = (FLASH_nSTATE) stRegister.uxValue;
2007cc26:	9b00      	ldr	r3, [sp, #0]
2007cc28:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cc2a:	b004      	add	sp, #16
2007cc2c:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cc2e:	2001      	movs	r0, #1
}
2007cc30:	4770      	bx	lr
2007cc32:	bf00      	nop

2007cc34 <FLASH__enInitProcess>:
#include <xDriver_MCU/FLASH/Driver/Intrinsics/FLASH_Intrinsics.h>
#include <xDriver_MCU/FLASH/Peripheral/FLASH_Peripheral.h>


FLASH_nERROR FLASH__enInitProcess(FLASH_nMODULE enModuleArg, UBase_t uxKeyArg, FLASH_nPROCESS enProcessArg)
{
2007cc34:	b510      	push	{r4, lr}
    FLASH_Register_t stRegister;
    UBase_t uxValueReg;
    FLASH_nERROR enErrorReg;

    stRegister.uxShift = 0UL;
    stRegister.uxMask = MCU_MASK_BASE;
2007cc36:	f04f 33ff 	mov.w	r3, #4294967295
{
2007cc3a:	b084      	sub	sp, #16
    stRegister.uxShift = 0UL;
2007cc3c:	2400      	movs	r4, #0
2007cc3e:	0409      	lsls	r1, r1, #16
    stRegister.uxMask = MCU_MASK_BASE;
2007cc40:	e9cd 3401 	strd	r3, r4, [sp, #4]
    uxValueReg = uxKeyArg;
    uxValueReg &= MCU_MASK_16;
    uxValueReg <<= 16UL;
    switch(enProcessArg)
2007cc44:	2a04      	cmp	r2, #4
2007cc46:	d821      	bhi.n	2007cc8c <FLASH__enInitProcess+0x58>
2007cc48:	e8df f002 	tbb	[pc, r2]
2007cc4c:	1d1a170d 	.word	0x1d1a170d
2007cc50:	03          	.byte	0x03
2007cc51:	00          	.byte	0x00
        stRegister.uxValue = (UBase_t) uxValueReg;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
        break;
    case FLASH_enPROCESS_BUFFER_WRITE:
        stRegister.uptrAddress = FLASH_CTL2_OFFSET;
        uxValueReg |= FLASH_CTL2_R_WRBUF_MASK;
2007cc52:	f041 0301 	orr.w	r3, r1, #1
        stRegister.uptrAddress = FLASH_CTL2_OFFSET;
2007cc56:	2220      	movs	r2, #32
        stRegister.uxValue = (UBase_t) uxValueReg;
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cc58:	4669      	mov	r1, sp
        stRegister.uptrAddress = FLASH_CTL2_OFFSET;
2007cc5a:	9203      	str	r2, [sp, #12]
        stRegister.uxValue = (UBase_t) uxValueReg;
2007cc5c:	9300      	str	r3, [sp, #0]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cc5e:	f7ff fcf3 	bl	2007c648 <FLASH__enWriteRegister>
        enErrorReg = FLASH_enERROR_VALUE;
        break;
    }

    return (enErrorReg);
}
2007cc62:	b004      	add	sp, #16
2007cc64:	bd10      	pop	{r4, pc}
        uxValueReg |= FLASH_CTL_R_WRITE_MASK;
2007cc66:	f041 0301 	orr.w	r3, r1, #1
        stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007cc6a:	2208      	movs	r2, #8
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cc6c:	4669      	mov	r1, sp
        stRegister.uxValue = (UBase_t) uxValueReg;
2007cc6e:	9300      	str	r3, [sp, #0]
        stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007cc70:	9203      	str	r2, [sp, #12]
        enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007cc72:	f7ff fce9 	bl	2007c648 <FLASH__enWriteRegister>
}
2007cc76:	b004      	add	sp, #16
2007cc78:	bd10      	pop	{r4, pc}
        uxValueReg |= FLASH_CTL_R_ERASE_MASK;
2007cc7a:	f041 0302 	orr.w	r3, r1, #2
2007cc7e:	e7f4      	b.n	2007cc6a <FLASH__enInitProcess+0x36>
        uxValueReg |= FLASH_CTL_R_MERASE_MASK;
2007cc80:	f041 0304 	orr.w	r3, r1, #4
2007cc84:	e7f1      	b.n	2007cc6a <FLASH__enInitProcess+0x36>
        uxValueReg |= FLASH_CTL_R_COMT_MASK;
2007cc86:	f041 0308 	orr.w	r3, r1, #8
2007cc8a:	e7ee      	b.n	2007cc6a <FLASH__enInitProcess+0x36>
    switch(enProcessArg)
2007cc8c:	2002      	movs	r0, #2
    return (enErrorReg);
2007cc8e:	e7e8      	b.n	2007cc62 <FLASH__enInitProcess+0x2e>

2007cc90 <FLASH__enIsProcessOngoing>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) penStatusArg)
2007cc90:	b14a      	cbz	r2, 2007cca6 <FLASH__enIsProcessOngoing+0x16>
{
2007cc92:	b510      	push	{r4, lr}
2007cc94:	4614      	mov	r4, r2
2007cc96:	b084      	sub	sp, #16
    {
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        switch(enProcessArg)
2007cc98:	2904      	cmp	r1, #4
2007cc9a:	d829      	bhi.n	2007ccf0 <FLASH__enIsProcessOngoing+0x60>
2007cc9c:	e8df f001 	tbb	[pc, r1]
2007cca0:	24201713 	.word	0x24201713
2007cca4:	05          	.byte	0x05
2007cca5:	00          	.byte	0x00
        enErrorReg = FLASH_enERROR_POINTER;
2007cca6:	2001      	movs	r0, #1
    if(FLASH_enERROR_OK == enErrorReg)
    {
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
    }
    return (enErrorReg);
}
2007cca8:	4770      	bx	lr
            stRegister.uxShift = FLASH_CTL2_R_WRBUF_BIT;
2007ccaa:	2100      	movs	r1, #0
            stRegister.uxMask = FLASH_CTL2_WRBUF_MASK;
2007ccac:	2201      	movs	r2, #1
            stRegister.uptrAddress = FLASH_CTL2_OFFSET;
2007ccae:	2320      	movs	r3, #32
2007ccb0:	9303      	str	r3, [sp, #12]
            stRegister.uxMask = FLASH_CTL2_WRBUF_MASK;
2007ccb2:	e9cd 2101 	strd	r2, r1, [sp, #4]
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ccb6:	4669      	mov	r1, sp
2007ccb8:	f7ff fcc6 	bl	2007c648 <FLASH__enWriteRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007ccbc:	b908      	cbnz	r0, 2007ccc2 <FLASH__enIsProcessOngoing+0x32>
        *penStatusArg = (FLASH_nBOOLEAN) stRegister.uxValue;
2007ccbe:	9b00      	ldr	r3, [sp, #0]
2007ccc0:	6023      	str	r3, [r4, #0]
}
2007ccc2:	b004      	add	sp, #16
2007ccc4:	bd10      	pop	{r4, pc}
            stRegister.uxShift = FLASH_CTL_R_WRITE_BIT;
2007ccc6:	2100      	movs	r1, #0
            stRegister.uxMask = FLASH_CTL_WRITE_MASK;
2007ccc8:	2201      	movs	r2, #1
            stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007ccca:	2308      	movs	r3, #8
2007cccc:	e7f0      	b.n	2007ccb0 <FLASH__enIsProcessOngoing+0x20>
            stRegister.uxShift = FLASH_CTL_R_ERASE_BIT;
2007ccce:	2301      	movs	r3, #1
            stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007ccd0:	2208      	movs	r2, #8
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ccd2:	4669      	mov	r1, sp
            stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007ccd4:	9203      	str	r2, [sp, #12]
            stRegister.uxMask = FLASH_CTL_ERASE_MASK;
2007ccd6:	e9cd 3301 	strd	r3, r3, [sp, #4]
            enErrorReg = FLASH__enWriteRegister(enModuleArg, &stRegister);
2007ccda:	f7ff fcb5 	bl	2007c648 <FLASH__enWriteRegister>
            break;
2007ccde:	e7ed      	b.n	2007ccbc <FLASH__enIsProcessOngoing+0x2c>
            stRegister.uxShift = FLASH_CTL_R_MERASE_BIT;
2007cce0:	2102      	movs	r1, #2
            stRegister.uxMask = FLASH_CTL_MERASE_MASK;
2007cce2:	2201      	movs	r2, #1
            stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007cce4:	2308      	movs	r3, #8
2007cce6:	e7e3      	b.n	2007ccb0 <FLASH__enIsProcessOngoing+0x20>
            stRegister.uxShift = FLASH_CTL_R_COMT_BIT;
2007cce8:	2103      	movs	r1, #3
            stRegister.uxMask = FLASH_CTL_COMT_MASK;
2007ccea:	2201      	movs	r2, #1
            stRegister.uptrAddress = FLASH_CTL_OFFSET;
2007ccec:	2308      	movs	r3, #8
2007ccee:	e7df      	b.n	2007ccb0 <FLASH__enIsProcessOngoing+0x20>
        switch(enProcessArg)
2007ccf0:	2002      	movs	r0, #2
    return (enErrorReg);
2007ccf2:	e7e6      	b.n	2007ccc2 <FLASH__enIsProcessOngoing+0x32>

2007ccf4 <FLASH__enGetSize>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeArg)
2007ccf4:	b191      	cbz	r1, 2007cd1c <FLASH__enGetSize+0x28>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PP_R_SIZE_BIT;
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007ccf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ccfa:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007ccfe:	b510      	push	{r4, lr}
2007cd00:	460c      	mov	r4, r1
2007cd02:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_SIZE_BIT;
2007cd04:	2100      	movs	r1, #0
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd06:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007cd08:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cd0c:	4669      	mov	r1, sp
2007cd0e:	f7ff fc83 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cd12:	b908      	cbnz	r0, 2007cd18 <FLASH__enGetSize+0x24>
    {
        *puxSizeArg = (UBase_t)  stRegister.uxValue;
2007cd14:	9b00      	ldr	r3, [sp, #0]
2007cd16:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cd18:	b004      	add	sp, #16
2007cd1a:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cd1c:	2001      	movs	r0, #1
}
2007cd1e:	4770      	bx	lr

2007cd20 <FLASH__enGetSizeInKBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInKBytesArg)
2007cd20:	b1a1      	cbz	r1, 2007cd4c <FLASH__enGetSizeInKBytes+0x2c>
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007cd22:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd26:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cd2a:	b510      	push	{r4, lr}
2007cd2c:	460c      	mov	r4, r1
2007cd2e:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_SIZE_BIT;
2007cd30:	2100      	movs	r1, #0
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd32:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007cd34:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cd38:	4669      	mov	r1, sp
2007cd3a:	f7ff fc6d 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007cd3e:	b918      	cbnz	r0, 2007cd48 <FLASH__enGetSizeInKBytes+0x28>
        *puxSizeArg = (UBase_t)  stRegister.uxValue;
2007cd40:	9b00      	ldr	r3, [sp, #0]
    {
        enErrorReg = FLASH__enGetSize(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSizeReg++;
2007cd42:	3301      	adds	r3, #1
        uxSizeReg *= 2UL;
2007cd44:	005b      	lsls	r3, r3, #1
        *puxSizeInKBytesArg = (UBase_t) uxSizeReg;
2007cd46:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cd48:	b004      	add	sp, #16
2007cd4a:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cd4c:	2001      	movs	r0, #1
}
2007cd4e:	4770      	bx	lr

2007cd50 <FLASH__enGetSizeInBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInBytesArg)
2007cd50:	b1a1      	cbz	r1, 2007cd7c <FLASH__enGetSizeInBytes+0x2c>
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007cd52:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd56:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cd5a:	b510      	push	{r4, lr}
2007cd5c:	460c      	mov	r4, r1
2007cd5e:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_SIZE_BIT;
2007cd60:	2100      	movs	r1, #0
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd62:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_SIZE_MASK;
2007cd64:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cd68:	4669      	mov	r1, sp
2007cd6a:	f7ff fc55 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007cd6e:	b918      	cbnz	r0, 2007cd78 <FLASH__enGetSizeInBytes+0x28>
        *puxSizeArg = (UBase_t)  stRegister.uxValue;
2007cd70:	9b00      	ldr	r3, [sp, #0]
        uxSizeReg++;
2007cd72:	3301      	adds	r3, #1
    {
        enErrorReg = FLASH__enGetSizeInKBytes(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSizeReg *= 1024UL;
2007cd74:	02db      	lsls	r3, r3, #11
        *puxSizeInBytesArg = (UBase_t) uxSizeReg;
2007cd76:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cd78:	b004      	add	sp, #16
2007cd7a:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cd7c:	2001      	movs	r0, #1
}
2007cd7e:	4770      	bx	lr

2007cd80 <FLASH__enGetSectorSize>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSectorSizeArg)
2007cd80:	b189      	cbz	r1, 2007cda6 <FLASH__enGetSectorSize+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PP_R_MAINSS_BIT;
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cd82:	2207      	movs	r2, #7
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd84:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cd88:	b510      	push	{r4, lr}
2007cd8a:	460c      	mov	r4, r1
2007cd8c:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_MAINSS_BIT;
2007cd8e:	2110      	movs	r1, #16
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cd90:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cd92:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cd96:	4669      	mov	r1, sp
2007cd98:	f7ff fc3e 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cd9c:	b908      	cbnz	r0, 2007cda2 <FLASH__enGetSectorSize+0x22>
    {
        *puxSectorSizeArg = (UBase_t)  stRegister.uxValue;
2007cd9e:	9b00      	ldr	r3, [sp, #0]
2007cda0:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cda2:	b004      	add	sp, #16
2007cda4:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cda6:	2001      	movs	r0, #1
}
2007cda8:	4770      	bx	lr
2007cdaa:	bf00      	nop

2007cdac <FLASH__enGetSectorSizeInKBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInKBytesArg)
2007cdac:	b189      	cbz	r1, 2007cdd2 <FLASH__enGetSectorSizeInKBytes+0x26>
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cdae:	2207      	movs	r2, #7
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cdb0:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cdb4:	b510      	push	{r4, lr}
2007cdb6:	460c      	mov	r4, r1
2007cdb8:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_MAINSS_BIT;
2007cdba:	2110      	movs	r1, #16
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cdbc:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cdbe:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cdc2:	4669      	mov	r1, sp
2007cdc4:	f7ff fc28 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enGetSectorSize(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cdc8:	b908      	cbnz	r0, 2007cdce <FLASH__enGetSectorSizeInKBytes+0x22>
    {
        uxSizeReg = 1UL;
        uxSizeReg <<= uxSizeReg;
        *puxSizeInKBytesArg = (UBase_t) uxSizeReg;
2007cdca:	2302      	movs	r3, #2
2007cdcc:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cdce:	b004      	add	sp, #16
2007cdd0:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cdd2:	2001      	movs	r0, #1
}
2007cdd4:	4770      	bx	lr
2007cdd6:	bf00      	nop

2007cdd8 <FLASH__enGetSectorSizeInBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInBytesArg)
2007cdd8:	b191      	cbz	r1, 2007ce00 <FLASH__enGetSectorSizeInBytes+0x28>
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cdda:	2207      	movs	r2, #7
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cddc:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007cde0:	b510      	push	{r4, lr}
2007cde2:	460c      	mov	r4, r1
2007cde4:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_MAINSS_BIT;
2007cde6:	2110      	movs	r1, #16
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007cde8:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_MAINSS_MASK;
2007cdea:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cdee:	4669      	mov	r1, sp
2007cdf0:	f7ff fc12 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007cdf4:	b910      	cbnz	r0, 2007cdfc <FLASH__enGetSectorSizeInBytes+0x24>
        enErrorReg = FLASH__enGetSectorSizeInKBytes(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSizeReg *= 1024UL;
        *puxSizeInBytesArg = (UBase_t) uxSizeReg;
2007cdf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
2007cdfa:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cdfc:	b004      	add	sp, #16
2007cdfe:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ce00:	2001      	movs	r0, #1
}
2007ce02:	4770      	bx	lr

2007ce04 <FLASH__enGetEEPROMSectorSize>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSectorSizeArg)
2007ce04:	b189      	cbz	r1, 2007ce2a <FLASH__enGetEEPROMSectorSize+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PP_R_EESS_BIT;
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce06:	220f      	movs	r2, #15
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce08:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007ce0c:	b510      	push	{r4, lr}
2007ce0e:	460c      	mov	r4, r1
2007ce10:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_EESS_BIT;
2007ce12:	2113      	movs	r1, #19
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce14:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce16:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ce1a:	4669      	mov	r1, sp
2007ce1c:	f7ff fbfc 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007ce20:	b908      	cbnz	r0, 2007ce26 <FLASH__enGetEEPROMSectorSize+0x22>
    {
        *puxSectorSizeArg = (UBase_t) stRegister.uxValue;
2007ce22:	9b00      	ldr	r3, [sp, #0]
2007ce24:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007ce26:	b004      	add	sp, #16
2007ce28:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ce2a:	2001      	movs	r0, #1
}
2007ce2c:	4770      	bx	lr
2007ce2e:	bf00      	nop

2007ce30 <FLASH__enGetEEPROMSectorSizeInKBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInKBytesArg)
2007ce30:	b189      	cbz	r1, 2007ce56 <FLASH__enGetEEPROMSectorSizeInKBytes+0x26>
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce32:	220f      	movs	r2, #15
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce34:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007ce38:	b510      	push	{r4, lr}
2007ce3a:	460c      	mov	r4, r1
2007ce3c:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_EESS_BIT;
2007ce3e:	2113      	movs	r1, #19
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce40:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce42:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ce46:	4669      	mov	r1, sp
2007ce48:	f7ff fbe6 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        enErrorReg = FLASH__enGetEEPROMSectorSize(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007ce4c:	b908      	cbnz	r0, 2007ce52 <FLASH__enGetEEPROMSectorSizeInKBytes+0x22>
    {
        uxSizeReg = 1UL;
        uxSizeReg <<= uxSizeReg;
        *puxSizeInKBytesArg = (UBase_t) uxSizeReg;
2007ce4e:	2302      	movs	r3, #2
2007ce50:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007ce52:	b004      	add	sp, #16
2007ce54:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ce56:	2001      	movs	r0, #1
}
2007ce58:	4770      	bx	lr
2007ce5a:	bf00      	nop

2007ce5c <FLASH__enGetEEPROMSectorSizeInBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInBytesArg)
2007ce5c:	b191      	cbz	r1, 2007ce84 <FLASH__enGetEEPROMSectorSizeInBytes+0x28>
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce5e:	220f      	movs	r2, #15
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce60:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
{
2007ce64:	b510      	push	{r4, lr}
2007ce66:	460c      	mov	r4, r1
2007ce68:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PP_R_EESS_BIT;
2007ce6a:	2113      	movs	r1, #19
        stRegister.uptrAddress = FLASH_PP_OFFSET;
2007ce6c:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PP_EESS_MASK;
2007ce6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007ce72:	4669      	mov	r1, sp
2007ce74:	f7ff fbd0 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007ce78:	b910      	cbnz	r0, 2007ce80 <FLASH__enGetEEPROMSectorSizeInBytes+0x24>
        enErrorReg = FLASH__enGetEEPROMSectorSizeInKBytes(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSizeReg *= 1024UL;
        *puxSizeInBytesArg = (UBase_t) uxSizeReg;
2007ce7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
2007ce7e:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007ce80:	b004      	add	sp, #16
2007ce82:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ce84:	2001      	movs	r0, #1
}
2007ce86:	4770      	bx	lr

2007ce88 <FLASH__enGetSRAMSize>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeArg)
2007ce88:	b191      	cbz	r1, 2007ceb0 <FLASH__enGetSRAMSize+0x28>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = SRAM_SIZE_R_SIZE_BIT;
        stRegister.uxMask = SRAM_SIZE_SIZE_MASK;
2007ce8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = SRAM_SIZE_OFFSET;
2007ce8e:	f640 73c4 	movw	r3, #4036	; 0xfc4
{
2007ce92:	b510      	push	{r4, lr}
2007ce94:	460c      	mov	r4, r1
2007ce96:	b084      	sub	sp, #16
        stRegister.uxShift = SRAM_SIZE_R_SIZE_BIT;
2007ce98:	2100      	movs	r1, #0
        stRegister.uptrAddress = SRAM_SIZE_OFFSET;
2007ce9a:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = SRAM_SIZE_SIZE_MASK;
2007ce9c:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cea0:	4669      	mov	r1, sp
2007cea2:	f7ff fbb9 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cea6:	b908      	cbnz	r0, 2007ceac <FLASH__enGetSRAMSize+0x24>
    {
        *puxSizeArg = (UBase_t) stRegister.uxValue;
2007cea8:	9b00      	ldr	r3, [sp, #0]
2007ceaa:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007ceac:	b004      	add	sp, #16
2007ceae:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007ceb0:	2001      	movs	r0, #1
}
2007ceb2:	4770      	bx	lr

2007ceb4 <FLASH__enGetSRAMSizeInBytes>:
    UBase_t uxSizeReg;
    FLASH_nERROR enErrorReg;

    uxSizeReg = 0UL;
    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxSizeInBytesArg)
2007ceb4:	b1a1      	cbz	r1, 2007cee0 <FLASH__enGetSRAMSizeInBytes+0x2c>
        stRegister.uxMask = SRAM_SIZE_SIZE_MASK;
2007ceb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = SRAM_SIZE_OFFSET;
2007ceba:	f640 73c4 	movw	r3, #4036	; 0xfc4
{
2007cebe:	b510      	push	{r4, lr}
2007cec0:	460c      	mov	r4, r1
2007cec2:	b084      	sub	sp, #16
        stRegister.uxShift = SRAM_SIZE_R_SIZE_BIT;
2007cec4:	2100      	movs	r1, #0
        stRegister.uptrAddress = SRAM_SIZE_OFFSET;
2007cec6:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = SRAM_SIZE_SIZE_MASK;
2007cec8:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cecc:	4669      	mov	r1, sp
2007cece:	f7ff fba3 	bl	2007c618 <FLASH__enReadRegister>
    if(FLASH_enERROR_OK == enErrorReg)
2007ced2:	b918      	cbnz	r0, 2007cedc <FLASH__enGetSRAMSizeInBytes+0x28>
        *puxSizeArg = (UBase_t) stRegister.uxValue;
2007ced4:	9b00      	ldr	r3, [sp, #0]
    {
        enErrorReg = FLASH__enGetSRAMSize(enModuleArg, &uxSizeReg);
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        uxSizeReg++;
2007ced6:	3301      	adds	r3, #1
        uxSizeReg *= 256UL;
2007ced8:	021b      	lsls	r3, r3, #8
        *puxSizeInBytesArg = (UBase_t) uxSizeReg;
2007ceda:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cedc:	b004      	add	sp, #16
2007cede:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cee0:	2001      	movs	r0, #1
}
2007cee2:	4770      	bx	lr

2007cee4 <FLASH__enWait>:

#include <xDriver_MCU/FLASH/Driver/xHeader/FLASH_Process.h>
#include <xDriver_MCU/FLASH/Driver/xHeader/FLASH_Prefetch.h>

FLASH_nERROR FLASH__enWait(FLASH_nMODULE enModuleArg, FLASH_nPROCESS enProcessArg, UBase_t uxTimeoutArg)
{
2007cee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    FLASH_nERROR enErrorReg;
    FLASH_nBOOLEAN enStatusReg;

    enErrorReg = FLASH_enERROR_OK;
    enStatusReg = FLASH_enFALSE;
2007cee8:	2300      	movs	r3, #0
{
2007ceea:	b082      	sub	sp, #8
2007ceec:	4606      	mov	r6, r0
2007ceee:	460f      	mov	r7, r1
    enStatusReg = FLASH_enFALSE;
2007cef0:	9301      	str	r3, [sp, #4]
    if(0UL == uxTimeoutArg)
2007cef2:	b1a2      	cbz	r2, 2007cf1e <FLASH__enWait+0x3a>
2007cef4:	4615      	mov	r5, r2
2007cef6:	f10d 0804 	add.w	r8, sp, #4
2007cefa:	e001      	b.n	2007cf00 <FLASH__enWait+0x1c>
        do
        {
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
            uxTimeoutArg--;
        }while((FLASH_enTRUE == enStatusReg) &&
               (0UL != uxTimeoutArg) &&
2007cefc:	b335      	cbz	r5, 2007cf4c <FLASH__enWait+0x68>
2007cefe:	bb28      	cbnz	r0, 2007cf4c <FLASH__enWait+0x68>
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
2007cf00:	4642      	mov	r2, r8
2007cf02:	4639      	mov	r1, r7
2007cf04:	4630      	mov	r0, r6
            uxTimeoutArg--;
2007cf06:	3d01      	subs	r5, #1
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
2007cf08:	f7ff fec2 	bl	2007cc90 <FLASH__enIsProcessOngoing>
               (FLASH_enERROR_OK == enErrorReg));
2007cf0c:	9b01      	ldr	r3, [sp, #4]
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
2007cf0e:	4604      	mov	r4, r0
               (FLASH_enERROR_OK == enErrorReg));
2007cf10:	2b01      	cmp	r3, #1
2007cf12:	d0f3      	beq.n	2007cefc <FLASH__enWait+0x18>
           (FLASH_enERROR_OK == enErrorReg))
        {
            enErrorReg = FLASH_enERROR_TIMEOUT;
        }
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cf14:	b19c      	cbz	r4, 2007cf3e <FLASH__enWait+0x5a>
    {
        FLASH__enClearPrefetchBuffer(enModuleArg);
    }
    return (enErrorReg);
}
2007cf16:	4620      	mov	r0, r4
2007cf18:	b002      	add	sp, #8
2007cf1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2007cf1e:	f10d 0804 	add.w	r8, sp, #4
2007cf22:	e001      	b.n	2007cf28 <FLASH__enWait+0x44>
        }while((FLASH_enTRUE == enStatusReg) &&
2007cf24:	2800      	cmp	r0, #0
2007cf26:	d1f6      	bne.n	2007cf16 <FLASH__enWait+0x32>
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
2007cf28:	4642      	mov	r2, r8
2007cf2a:	4639      	mov	r1, r7
2007cf2c:	4630      	mov	r0, r6
2007cf2e:	f7ff feaf 	bl	2007cc90 <FLASH__enIsProcessOngoing>
               (FLASH_enERROR_OK == enErrorReg));
2007cf32:	9b01      	ldr	r3, [sp, #4]
            enErrorReg = FLASH__enIsProcessOngoing(enModuleArg, enProcessArg, &enStatusReg);
2007cf34:	4604      	mov	r4, r0
               (FLASH_enERROR_OK == enErrorReg));
2007cf36:	2b01      	cmp	r3, #1
2007cf38:	d0f4      	beq.n	2007cf24 <FLASH__enWait+0x40>
    if(FLASH_enERROR_OK == enErrorReg)
2007cf3a:	2c00      	cmp	r4, #0
2007cf3c:	d1eb      	bne.n	2007cf16 <FLASH__enWait+0x32>
        FLASH__enClearPrefetchBuffer(enModuleArg);
2007cf3e:	4630      	mov	r0, r6
2007cf40:	f000 f84e 	bl	2007cfe0 <__FLASH__enClearPrefetchBuffer_veneer>
}
2007cf44:	4620      	mov	r0, r4
2007cf46:	b002      	add	sp, #8
2007cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           (0UL == uxTimeoutArg) &&
2007cf4c:	ea54 0305 	orrs.w	r3, r4, r5
2007cf50:	d1e0      	bne.n	2007cf14 <FLASH__enWait+0x30>
            enErrorReg = FLASH_enERROR_TIMEOUT;
2007cf52:	2406      	movs	r4, #6
    return (enErrorReg);
2007cf54:	e7df      	b.n	2007cf16 <FLASH__enWait+0x32>
2007cf56:	bf00      	nop

2007cf58 <FLASH__enGetCustomKey>:
{
    FLASH_Register_t stRegister;
    FLASH_nERROR enErrorReg;

    enErrorReg = FLASH_enERROR_OK;
    if(0UL == (uintptr_t) puxKeyArg)
2007cf58:	b189      	cbz	r1, 2007cf7e <FLASH__enGetCustomKey+0x26>
        enErrorReg = FLASH_enERROR_POINTER;
    }
    if(FLASH_enERROR_OK == enErrorReg)
    {
        stRegister.uxShift = FLASH_PEKEY_R_PEKEY_BIT;
        stRegister.uxMask = FLASH_PEKEY_PEKEY_MASK;
2007cf5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
        stRegister.uptrAddress = FLASH_PEKEY_OFFSET;
2007cf5e:	233c      	movs	r3, #60	; 0x3c
{
2007cf60:	b510      	push	{r4, lr}
2007cf62:	460c      	mov	r4, r1
2007cf64:	b084      	sub	sp, #16
        stRegister.uxShift = FLASH_PEKEY_R_PEKEY_BIT;
2007cf66:	2110      	movs	r1, #16
        stRegister.uptrAddress = FLASH_PEKEY_OFFSET;
2007cf68:	9303      	str	r3, [sp, #12]
        stRegister.uxMask = FLASH_PEKEY_PEKEY_MASK;
2007cf6a:	e9cd 2101 	strd	r2, r1, [sp, #4]
        enErrorReg = FLASH__enReadRegister(enModuleArg, &stRegister);
2007cf6e:	4669      	mov	r1, sp
2007cf70:	f7ff fb52 	bl	2007c618 <FLASH__enReadRegister>
    }
    if(FLASH_enERROR_OK == enErrorReg)
2007cf74:	b908      	cbnz	r0, 2007cf7a <FLASH__enGetCustomKey+0x22>
    {
        *puxKeyArg = stRegister.uxValue;
2007cf76:	9b00      	ldr	r3, [sp, #0]
2007cf78:	6023      	str	r3, [r4, #0]
    }
    return (enErrorReg);
}
2007cf7a:	b004      	add	sp, #16
2007cf7c:	bd10      	pop	{r4, pc}
        enErrorReg = FLASH_enERROR_POINTER;
2007cf7e:	2001      	movs	r0, #1
}
2007cf80:	4770      	bx	lr
2007cf82:	bf00      	nop

2007cf84 <FLASH__uptrBlockBaseAddress>:
    const uintptr_t FLASH_BLOCK_BASE[(UBase_t) FLASH_enMODULE_MAX] =
    {
     FLASH_BASE
    };
    return (FLASH_BLOCK_BASE[(UBase_t) enModuleArg]);
}
2007cf84:	4800      	ldr	r0, [pc, #0]	; (2007cf88 <FLASH__uptrBlockBaseAddress+0x4>)
2007cf86:	4770      	bx	lr
2007cf88:	400fd000 	.word	0x400fd000

2007cf8c <MCU__enWriteRegister_RAM>:
    if(0U == (uintptr_t) pstRegisterDataArg)
2007cf8c:	b1a8      	cbz	r0, 2007cfba <MCU__enWriteRegister_RAM+0x2e>
{
2007cf8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uxRegisterMask = pstRegisterDataArg->uxMask;
2007cf90:	e9d0 4500 	ldrd	r4, r5, [r0]
        uptrRegisterAddress = pstRegisterDataArg->uptrAddress;
2007cf94:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
        enStatus = MCU__enDisableGlobalInterrupt_RAM();
2007cf98:	f7ff fa9a 	bl	2007c4d0 <MCU__enDisableGlobalInterrupt_RAM>
        if(MCU_MASK_BASE != uxRegisterMask)
2007cf9c:	1c6b      	adds	r3, r5, #1
2007cf9e:	d007      	beq.n	2007cfb0 <MCU__enWriteRegister_RAM+0x24>
            uxRegisterValue &= uxRegisterMask;
2007cfa0:	402c      	ands	r4, r5
            uxReg = *puxRegisterAddress;
2007cfa2:	6833      	ldr	r3, [r6, #0]
            if(0U != uxRegisterShift)
2007cfa4:	b10f      	cbz	r7, 2007cfaa <MCU__enWriteRegister_RAM+0x1e>
                uxRegisterValue <<= uxRegisterShift;
2007cfa6:	40bc      	lsls	r4, r7
                uxRegisterMask <<= uxRegisterShift;
2007cfa8:	40bd      	lsls	r5, r7
            uxReg &= ~uxRegisterMask;
2007cfaa:	ea23 0505 	bic.w	r5, r3, r5
            uxReg |= uxRegisterValue;
2007cfae:	432c      	orrs	r4, r5
        *puxRegisterAddress = (UBase_t) uxReg;
2007cfb0:	6034      	str	r4, [r6, #0]
        (void) MCU__vSetGlobalInterrupt_RAM(enStatus);
2007cfb2:	f7ff fa9d 	bl	2007c4f0 <MCU__vSetGlobalInterrupt_RAM>
    enErrorReg = MCU_enERROR_OK;
2007cfb6:	2000      	movs	r0, #0
}
2007cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        enErrorReg = MCU_enERROR_POINTER;
2007cfba:	2001      	movs	r0, #1
}
2007cfbc:	4770      	bx	lr
2007cfbe:	bf00      	nop

2007cfc0 <FLASH__pvfGetIRQSourceHandler>:

FLASH_pvfIRQSourceHandler_t FLASH__pvfGetIRQSourceHandler(FLASH_nMODULE enModuleArg,
                                                          FLASH_nINT enIntSourceArg)
{
    FLASH_pvfIRQSourceHandler_t pvfFunctionReg;
    pvfFunctionReg = FLASH_vIRQSourceHandler[(UBase_t) enModuleArg]
2007cfc0:	4b02      	ldr	r3, [pc, #8]	; (2007cfcc <FLASH__pvfGetIRQSourceHandler+0xc>)
2007cfc2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
                                              [(UBase_t) enIntSourceArg];
    return (pvfFunctionReg);
}
2007cfc6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
2007cfca:	4770      	bx	lr
2007cfcc:	20020080 	.word	0x20020080

2007cfd0 <FLASH__pvfGetIRQSourceHandlerPointer>:

FLASH_pvfIRQSourceHandler_t* FLASH__pvfGetIRQSourceHandlerPointer(FLASH_nMODULE enModuleArg,
                                                                  FLASH_nINT enIntSourceArg)
{
    FLASH_pvfIRQSourceHandler_t* pvfFunctionReg;
    pvfFunctionReg = &FLASH_vIRQSourceHandler[(UBase_t) enModuleArg]
2007cfd0:	4b02      	ldr	r3, [pc, #8]	; (2007cfdc <FLASH__pvfGetIRQSourceHandlerPointer+0xc>)
2007cfd2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
                                               [(UBase_t) enIntSourceArg];
    return (pvfFunctionReg);
}
2007cfd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
2007cfda:	4770      	bx	lr
2007cfdc:	20020080 	.word	0x20020080

2007cfe0 <__FLASH__enClearPrefetchBuffer_veneer>:
2007cfe0:	f85f f000 	ldr.w	pc, [pc]	; 2007cfe4 <__FLASH__enClearPrefetchBuffer_veneer+0x4>
2007cfe4:	08001909 	.word	0x08001909

2007cfe8 <__malloc_veneer>:
2007cfe8:	f85f f000 	ldr.w	pc, [pc]	; 2007cfec <__malloc_veneer+0x4>
2007cfec:	080060b9 	.word	0x080060b9

2007cff0 <__MCU__uxReadRegister_veneer>:
2007cff0:	f85f f000 	ldr.w	pc, [pc]	; 2007cff4 <__MCU__uxReadRegister_veneer+0x4>
2007cff4:	08001589 	.word	0x08001589

2007cff8 <__free_veneer>:
2007cff8:	f85f f000 	ldr.w	pc, [pc]	; 2007cffc <__free_veneer+0x4>
2007cffc:	080060c9 	.word	0x080060c9
